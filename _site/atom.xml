<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Sachin Malhotra</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2018-07-15T23:34:36-07:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Sachin Malhotra</name>
   <email></email>
 </author>

 
 <entry>
   <title>Recursion Demystified</title>
   <link href="http://localhost:4000/2018/07/12/Recursion-Demystified-99a2105cb871/"/>
   <updated>2018-07-12T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/07/12/Recursion-Demystified-99a2105cb871</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Recursion Demystified&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 40px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
In order to understand recursion, you must first understand recursion.
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;e3cf&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;3511&quot; id=&quot;3511&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;1b59&quot; id=&quot;1b59&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 36.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*yNNmaPaMjbto_oSlcO7hvQ.png&quot; data-width=&quot;2960&quot; data-height=&quot;1076&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*yNNmaPaMjbto_oSlcO7hvQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://thomaspark.co/wp/wp-content/uploads/2017/01/xkcd.png&quot; data-href=&quot;https://thomaspark.co/wp/wp-content/uploads/2017/01/xkcd.png&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://thomaspark.co/wp/wp-content/uploads/2017/01/xkcd.png&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;blockquote name=&quot;bc1c&quot; id=&quot;bc1c&quot; class=&quot;graf graf--pullquote graf-after--figure&quot;&gt;In order to understand recursion, you must first understand recursion.&lt;/blockquote&gt;&lt;p name=&quot;245f&quot; id=&quot;245f&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Crazy, isn’t it ?&lt;/p&gt;&lt;p name=&quot;2f41&quot; id=&quot;2f41&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Well, I hope that by the end of this article you will feel much more confident about what recursion is and mainly, how we can come up with a recursive solution to a problem.&lt;/p&gt;&lt;h3 name=&quot;1488&quot; id=&quot;1488&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;What is Recursion?&lt;/h3&gt;&lt;p name=&quot;7aa6&quot; id=&quot;7aa6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;How do you explain recursion to a 4 year old? This is a pretty famous interview question, and there are loads of answers available on the web. We won’t answer this question as it is too mainstream.&lt;/p&gt;&lt;p name=&quot;4947&quot; id=&quot;4947&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you are as clever as I am 🤓🤓, you would explain recursion to someone one year younger than you. Have them explain recursion to someone one year younger than them. Continue until you have a 5 year old explaining recursion to a 4 year old. Done. [Source: &lt;a href=&quot;https://www.reddit.com/r/programmerchat/comments/3ua9ie/how_would_you_explain_recursion_to_a_6_year_old/&quot; data-href=&quot;https://www.reddit.com/r/programmerchat/comments/3ua9ie/how_would_you_explain_recursion_to_a_6_year_old/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;reddit&lt;/a&gt;].&lt;/p&gt;&lt;figure name=&quot;0bb3&quot; id=&quot;0bb3&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;iframe src=&quot;https://giphy.com/embed/gsYKROakiJQPu/twitter/iframe&quot; width=&quot;435&quot; height=&quot;244&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;https://giphy.com/gifs/reaction-gsYKROakiJQPu&quot; data-href=&quot;https://giphy.com/gifs/reaction-gsYKROakiJQPu&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://giphy.com/gifs/reaction-gsYKROakiJQPu&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;68d6&quot; id=&quot;68d6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In programming terms, recursion is&lt;/p&gt;&lt;blockquote name=&quot;f352&quot; id=&quot;f352&quot; class=&quot;graf graf--pullquote graf-after--p&quot;&gt;A function calling itself.&lt;/blockquote&gt;&lt;figure name=&quot;23fb&quot; id=&quot;23fb&quot; class=&quot;graf graf--figure graf--iframe graf-after--pullquote&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/e37127955dee6041a864337d1297a153.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;6e6b&quot; id=&quot;6e6b&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The above function does no useful work as such, but it does demonstrate recursion. The recursive relation above would be&lt;/p&gt;&lt;pre name=&quot;bb9c&quot; id=&quot;bb9c&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;T(N) = T(N - 1) + O(1)&lt;/pre&gt;&lt;p name=&quot;d18b&quot; id=&quot;d18b&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This simply means that the execution for the call to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;random_function(n)&lt;/code&gt; cannot proceed until the call to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;random_function(n-1)&lt;/code&gt; is completed and so on.&lt;/p&gt;&lt;p name=&quot;1df0&quot; id=&quot;1df0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Essentially, we delay the execution of the current state of the function until another call to the same function has completed and returned it’s result.&lt;/p&gt;&lt;p name=&quot;f6d5&quot; id=&quot;f6d5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The compiler keeps on saving the state of the function call now and then moves onto the next function call and so on. So, the compiler saves function states onto a stack and uses that for computations and backtracking.&lt;/p&gt;&lt;figure name=&quot;38a6&quot; id=&quot;38a6&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 707px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 101%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*UkdvcDN_JPxLvB62pTTj2g.png&quot; data-width=&quot;1420&quot; data-height=&quot;1434&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*UkdvcDN_JPxLvB62pTTj2g.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Recursion stack of a set of function calls.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;4433&quot; id=&quot;4433&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Essentially, if a problem can be broken down into similar subproblems which can be solved individually, and whose solutions can be combined together to get the overall solution, then we say that there might exist a recursive solution to the problem.&lt;/p&gt;&lt;p name=&quot;d044&quot; id=&quot;d044&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead of clinging to this seemingly old definition of recursion, we will look at a whole bunch of applications of recursion. Then hopefully things will be clear.&lt;/p&gt;&lt;h3 name=&quot;0141&quot; id=&quot;0141&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Factorial of a Number&lt;/h3&gt;&lt;p name=&quot;d917&quot; id=&quot;d917&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let us see how we can find out the factorial of a number. Before that, let’s see what the factorial of a number represents and how it is calculated.&lt;/p&gt;&lt;pre name=&quot;de25&quot; id=&quot;de25&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;factorial(N) = 1 * 2 * 3 * .... * N - 1 * N&lt;/pre&gt;&lt;p name=&quot;a120&quot; id=&quot;a120&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Simply put, the factorial of a number is just the product of terms from 1 to the number N multiplied by one another.&lt;/p&gt;&lt;p name=&quot;5147&quot; id=&quot;5147&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We can simply have a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;for&lt;/code&gt; loop from 1 to N and multiply all the terms iteratively and we will have the factorial of the given number.&lt;/p&gt;&lt;p name=&quot;0046&quot; id=&quot;0046&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But, if you look closely, there exists an inherent recursive structure to the factorial of a number.&lt;/p&gt;&lt;pre name=&quot;cfe6&quot; id=&quot;cfe6&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;factorial(N) = N * factorial(N - 1)&lt;/pre&gt;&lt;p name=&quot;6035&quot; id=&quot;6035&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;It’s like offloading the computation to another function call operating on a smaller version of the original problem. Let’s see how this relation would unfold to verify if the solution here matches the one provided by the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;for&lt;/code&gt; loop.&lt;/p&gt;&lt;figure name=&quot;22c2&quot; id=&quot;22c2&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 583px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 83.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*k6ThFBJ1_Wm1i-Wqu10HFw.png&quot; data-width=&quot;1404&quot; data-height=&quot;1170&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*k6ThFBJ1_Wm1i-Wqu10HFw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Showing the steps from top to bottom for the factorial recursive function&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure name=&quot;9214&quot; id=&quot;9214&quot; class=&quot;graf graf--figure graf-after--figure&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 679px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 97%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*dDy6r1_y-a0ey-hY8KbT_Q.png&quot; data-width=&quot;1400&quot; data-height=&quot;1358&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*dDy6r1_y-a0ey-hY8KbT_Q.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Verification that the recursive function defined produces the correct result&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;b072&quot; id=&quot;b072&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So, it is clear from the two figures above that the recursive function that we defined earlier,&lt;/p&gt;&lt;pre name=&quot;187c&quot; id=&quot;187c&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;factorial(N) = N * factorial(N - 1)&lt;/pre&gt;&lt;p name=&quot;f314&quot; id=&quot;f314&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;is indeed correct. Have a look at the Python code snippet used to find the factorial of a function, recursively.&lt;/p&gt;&lt;figure name=&quot;c48a&quot; id=&quot;c48a&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/a87fa4fe17c0c8ee3815b7859a0cd13c.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;9b78&quot; id=&quot;9b78&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This example was pretty simple. Let us consider a slightly bigger but standard example to demonstrate the concept of recursion.&lt;/p&gt;&lt;h3 name=&quot;7a65&quot; id=&quot;7a65&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Fibonacci Sequence&lt;/h3&gt;&lt;p name=&quot;3a15&quot; id=&quot;3a15&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;You must be already familiar with the famous fibonacci sequence. For those of you who have’t heard about this sequence or seen an example before, lets have a look.&lt;/p&gt;&lt;pre name=&quot;8f1b&quot; id=&quot;8f1b&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;1 1  2   3     5           8                       13 ..... &lt;/pre&gt;&lt;p name=&quot;af07&quot; id=&quot;af07&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Let us look at the formula for calculating the n^th fibonacci number.&lt;/p&gt;&lt;pre name=&quot;b698&quot; id=&quot;b698&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;F(n) = F(n - 1) + F(n - 2)&lt;br&gt;where F(1) = F(2) = 1&lt;/pre&gt;&lt;p name=&quot;cc0c&quot; id=&quot;cc0c&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Clearly, this definition of the fibonacci sequence is recursive in nature, since the n^th fibonacci number is dependent upon the previous two fibonacci numbers. This means dividing the problem into smaller subproblems, and hence recursion. Have a look at the code for this:&lt;/p&gt;&lt;figure name=&quot;582b&quot; id=&quot;582b&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/62631e1b7e4081c677db31dbfd141732.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;0013&quot; id=&quot;0013&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Every recursive problem must have two necessary things:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;328f&quot; id=&quot;328f&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;The recurrence relation defining the states of the problem and how the main problem can be broken down into smaller subproblems. This also includes the base case for stopping the recursion.&lt;/li&gt;&lt;li name=&quot;13d1&quot; id=&quot;13d1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;A recursion tree that showcases the first few, if not all calls to the function under consideration. Have a look at the recursion tree for the fibonacci sequences’ recursive relation.&lt;/li&gt;&lt;/ol&gt;&lt;figure name=&quot;ca81&quot; id=&quot;ca81&quot; class=&quot;graf graf--figure graf-after--li&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 749px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 106.89999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*2VfyZniOm8hK7w6NYq7Phw.png&quot; data-width=&quot;1210&quot; data-height=&quot;1294&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*2VfyZniOm8hK7w6NYq7Phw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Recursion tree showing the sequence of calls for the fibonacci recurrence relation.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;d257&quot; id=&quot;d257&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The recursion tree shows us that the results obtained from processing the two subtrees of the root N can be used to compute the result for the tree rooted at N. Similarly for other nodes.&lt;/p&gt;&lt;p name=&quot;1b20&quot; id=&quot;1b20&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The leaves of this recursion tree would be &lt;code class=&quot;markup--code markup--p-code&quot;&gt;fibonacci(1)&lt;/code&gt; or &lt;code class=&quot;markup--code markup--p-code&quot;&gt;fibonacci(2)&lt;/code&gt; both of which represent the base cases for this recursion.&lt;/p&gt;&lt;p name=&quot;3f0a&quot; id=&quot;3f0a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we have a very basic grasp of recursion, what a recurrence relation is, and the recursion tree, let’s move onto something more interesting.&lt;/p&gt;&lt;p name=&quot;a5c2&quot; id=&quot;a5c2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Examples!&lt;/p&gt;&lt;p name=&quot;3a6b&quot; id=&quot;3a6b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I strongly believe in solving umpteen number of examples for any given topic in programming to become a master of that topic. The two examples we considered (Factorial of a number and the Fibonacci sequence) had well defined recurrence relations. Let us look at a few examples where the recurrence relation might not be so obvious.&lt;/p&gt;&lt;h3 name=&quot;5422&quot; id=&quot;5422&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Height of a Tree&lt;/h3&gt;&lt;p name=&quot;2dd6&quot; id=&quot;2dd6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;To keep things simple for this example, we will only consider a binary tree. So, a binary tree is a tree data structure in which each node has at most two children. One node of the tree is designated as the root of the tree, for example:&lt;/p&gt;&lt;figure name=&quot;e00e&quot; id=&quot;e00e&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 853px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 121.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*XAVkpjgzPOGiEsKVgvBd9A.png&quot; data-width=&quot;1266&quot; data-height=&quot;1542&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*XAVkpjgzPOGiEsKVgvBd9A.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;A Tree rooted at ‘A’ with its height and the corresponding path highlighted.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;dc81&quot; id=&quot;dc81&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Let’s define what we mean by the height of the binary tree.&lt;/p&gt;&lt;blockquote name=&quot;6c50&quot; id=&quot;6c50&quot; class=&quot;graf graf--pullquote graf-after--p&quot;&gt;Height of the tree would be the length of the longest root to leaf path in the tree.&lt;/blockquote&gt;&lt;p name=&quot;48a9&quot; id=&quot;48a9&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;So, for the example diagram displayed above, considering that the node labelled as &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A&lt;/code&gt; as the root of the tree, the longest root to leaf path is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A → C → E → G → I &lt;/code&gt;. Essentially, the height of this tree is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;5&lt;/code&gt; if we count the number of nodes and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt; if we just count the number of edges on the longest path.&lt;/p&gt;&lt;p name=&quot;a47e&quot; id=&quot;a47e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now, forget about the entire tree and just focus on the portions highlighted in the diagram below.&lt;/p&gt;&lt;figure name=&quot;45ab&quot; id=&quot;45ab&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 574px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 82.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*h0454CLOXfyvp_u02F4-fQ.png&quot; data-width=&quot;1372&quot; data-height=&quot;1126&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*h0454CLOXfyvp_u02F4-fQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Tree rooted at node A and it’s two subtrees with their respective heights.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;cf72&quot; id=&quot;cf72&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The above figure shows us that we can represent a tree in the form of its subtrees. Essentially, the structure to the left of node A and the structure to the right of A is also a binary tree in itself, just smaller and with different root nodes. But, they are binary trees nonetheless.&lt;/p&gt;&lt;p name=&quot;f67a&quot; id=&quot;f67a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What information can we get from these two subtrees that would help us find the height of the main tree rooted at A ?&lt;/p&gt;&lt;p name=&quot;65cb&quot; id=&quot;65cb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If we knew the height of the left subtree, say &lt;code class=&quot;markup--code markup--p-code&quot;&gt;h1&lt;/code&gt;, and the height of the right subtree, say &lt;code class=&quot;markup--code markup--p-code&quot;&gt;h2&lt;/code&gt;, then we can simply say that the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;maximum of the two + 1&lt;/code&gt; for the node A would give us the height of our tree. Isn’t that right?&lt;/p&gt;&lt;p name=&quot;63f1&quot; id=&quot;63f1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Formalizing this recursive relation,&lt;/p&gt;&lt;pre name=&quot;3102&quot; id=&quot;3102&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;height(root) = max(height(root.left), height(root.right)) + 1&lt;/pre&gt;&lt;p name=&quot;4a7f&quot; id=&quot;4a7f&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;So, that’s the recursive definition of the height of a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;binary&lt;/strong&gt; tree. The focus is on binary here, because we used just two children of the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;root &lt;/code&gt;represented by &lt;code class=&quot;markup--code markup--p-code&quot;&gt;root.left &lt;/code&gt;and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;root.right.&lt;/code&gt; But, it is easy to extend this recursive relation to an n-ary tree. Let’s take a look at this in code.&lt;/p&gt;&lt;figure name=&quot;b738&quot; id=&quot;b738&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/87de419cc4c84cb7c48a7c44b2c8ebf0.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;9b9a&quot; id=&quot;9b9a&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The problem here was greatly simplified because we let recursion do all the heavy lifting for us. We simply used &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;optimal&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;answers for our subproblems to find a solution to our original problem.&lt;/p&gt;&lt;p name=&quot;b8a4&quot; id=&quot;b8a4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at another example that can be solved on similar lines.&lt;/p&gt;&lt;h3 name=&quot;b460&quot; id=&quot;b460&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Number of Nodes in a Tree&lt;/h3&gt;&lt;p name=&quot;2780&quot; id=&quot;2780&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Here again, we will consider a binary tree for simplicity, but the algorithm and the approach can be extended to any kind of tree essentially.&lt;/p&gt;&lt;p name=&quot;2880&quot; id=&quot;2880&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The problem is itself very self explanatory. Given the root of a binary tree, we need to determine the total number of nodes in the tree. This question and the approach we will come up with here are very similar to the previous one. We just have to make minuscule changes and we will have the number of nodes in the binary tree.&lt;/p&gt;&lt;p name=&quot;8384&quot; id=&quot;8384&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Take a look at the diagram below.&lt;/p&gt;&lt;figure name=&quot;cdca&quot; id=&quot;cdca&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 583px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 83.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Fu_K_bkWs5ECzVwFnuakhA.png&quot; data-width=&quot;1316&quot; data-height=&quot;1096&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Fu_K_bkWs5ECzVwFnuakhA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;1984&quot; id=&quot;1984&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The diagram says it all. We already know that a tree can be broken down into smaller subtrees. Here again, we can ask ourselves,&lt;/p&gt;&lt;blockquote name=&quot;f68d&quot; id=&quot;f68d&quot; class=&quot;graf graf--pullquote graf-after--p&quot;&gt;What information can we get from these two subtrees that would help us find the number of nodes in the tree rooted at A?&lt;/blockquote&gt;&lt;p name=&quot;2d15&quot; id=&quot;2d15&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Well, if we knew the number of nodes in the left subtree and the number of nodes in the right subtree, we can simply add them up and add one for the root node and that would give us the total number of nodes.&lt;/p&gt;&lt;p name=&quot;a41b&quot; id=&quot;a41b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Formalizing this we get,&lt;/p&gt;&lt;pre name=&quot;78c8&quot; id=&quot;78c8&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;number_of_nodes(root) = number_of_nodes(root.left) + number_of_nodes(right) + 1&lt;/pre&gt;&lt;p name=&quot;c64c&quot; id=&quot;c64c&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;If you look at this recursion and the previous one, you will find that they are extremely similar. The only thing that is varying is what we do with the information we obtained from our subproblems and how we combined them to get some answer.&lt;/p&gt;&lt;figure name=&quot;a155&quot; id=&quot;a155&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/97cfaa0d09e9139c0710dae50c895b2e.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;3621&quot; id=&quot;3621&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now that we have seen a couple of easy examples with a binary tree, let’s move onto something less trivial.&lt;/p&gt;&lt;h3 name=&quot;5044&quot; id=&quot;5044&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Merge Sort&lt;/h3&gt;&lt;p name=&quot;cd2c&quot; id=&quot;cd2c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Given an array of numbers like&lt;/p&gt;&lt;pre name=&quot;5a70&quot; id=&quot;5a70&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 2 8 9 1 5 2&lt;/pre&gt;&lt;p name=&quot;50ac&quot; id=&quot;50ac&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;we need to come up with a sorting technique that sorts them either in ascending or descending order. There are a lot of famous sorting techniques out there for this like &lt;a href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot; data-href=&quot;https://en.wikipedia.org/wiki/Quicksort&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Quick Sort&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Heapsort&quot; data-href=&quot;https://en.wikipedia.org/wiki/Heapsort&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Heap Sort&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Radix_sort&quot; data-href=&quot;https://en.wikipedia.org/wiki/Radix_sort&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Radix Sort&lt;/a&gt; and so on. But we are specifically going to look at a technique called the Merge Sort.&lt;/p&gt;&lt;p name=&quot;d755&quot; id=&quot;d755&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It’s possible that a lot of you are familiar with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Divide_and_conquer_algorithm&quot; data-href=&quot;https://en.wikipedia.org/wiki/Divide_and_conquer_algorithm&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Divide and Conquer paradigm&lt;/a&gt;, and this might feel redundant. But bear with me and read on!&lt;/p&gt;&lt;p name=&quot;e4c7&quot; id=&quot;e4c7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The idea here is to break it down into subproblems.&lt;/p&gt;&lt;figure name=&quot;0c05&quot; id=&quot;0c05&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;iframe src=&quot;https://giphy.com/embed/26gsaLkUSO6uNiXsc/twitter/iframe&quot; width=&quot;435&quot; height=&quot;277&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;https://giphy.com/gifs/latelateshow-clapping-james-corden-26gsaLkUSO6uNiXsc&quot; data-href=&quot;https://giphy.com/gifs/latelateshow-clapping-james-corden-26gsaLkUSO6uNiXsc&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://giphy.com/gifs/latelateshow-clapping-james-corden-26gsaLkUSO6uNiXsc&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;1d23&quot; id=&quot;1d23&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;That’s what the article is about right ? 😛&lt;/p&gt;&lt;p name=&quot;0865&quot; id=&quot;0865&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What if we had two sorted halves of the original array. Can we use them somehow to sort the entire array?&lt;/p&gt;&lt;p name=&quot;1162&quot; id=&quot;1162&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That’s the main idea here. The task of sorting an array can be broken down into two smaller subtasks:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;8e83&quot; id=&quot;8e83&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;sorting two different halves of the array&lt;/li&gt;&lt;li name=&quot;12a4&quot; id=&quot;12a4&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;then using those sorted halves to obtain the original sorted array&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;6bc6&quot; id=&quot;6bc6&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Now, the beauty about recursion is, you don’t need to worry about how we will get two sorted halves and what logic will go into that. Since this is recursion, the same method call to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;merge_sort&lt;/code&gt; would sort the two halves for us. All we need to do is focus on what we need to do once we have the sorted haves with us.&lt;/p&gt;&lt;p name=&quot;34f4&quot; id=&quot;34f4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s go through the code:&lt;/p&gt;&lt;figure name=&quot;6567&quot; id=&quot;6567&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/35a3f34c1c13e736d717eb92c4c7073e.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;6686&quot; id=&quot;6686&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;At this point, we trusted and relied on our good friend recursion and assumed that &lt;code class=&quot;markup--code markup--p-code&quot;&gt;left_sorted_half&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;right_sorted_half&lt;/code&gt; would in fact contain the two sorted halves of the original array.&lt;/p&gt;&lt;p name=&quot;7a39&quot; id=&quot;7a39&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, what next?&lt;/p&gt;&lt;p name=&quot;4e24&quot; id=&quot;4e24&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The question is how to combine them somehow to give the entire array.&lt;/p&gt;&lt;p name=&quot;b06c&quot; id=&quot;b06c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The problem now simply boils down to merging two sorted arrays into one. This is a pretty standard problem and can be solved by what is known as the “two finger approach”.&lt;/p&gt;&lt;p name=&quot;2fe8&quot; id=&quot;2fe8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Take a look at the pseudo code for better understanding.&lt;/p&gt;&lt;pre name=&quot;ed8a&quot; id=&quot;ed8a&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;let L and R be our two sorted halves. &lt;br&gt;let ans be the combined, sorted array &lt;br&gt;l = 0 // The pointer for the left half&lt;br&gt;r = 0 // The pointer for the right half&lt;br&gt;a = 0 // The pointer for the array ans &lt;br&gt;while l &amp;lt; L.length and r &amp;lt; R.length {&lt;br&gt;      if L[l] &amp;lt; R[r] {&lt;br&gt;           ans[a] = L[l]&lt;br&gt;           l++&lt;br&gt;       } else {&lt;br&gt;           ans[a] = R[r]&lt;br&gt;           r++&lt;br&gt;      }&lt;br&gt;} &lt;br&gt;copy remaining array portion of L or R, whichever was longer, into ans.&lt;/pre&gt;&lt;p name=&quot;0eb6&quot; id=&quot;0eb6&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Here we have two pointers (fingers), and we position them at the start of the individual halves. We check which one is smaller (that is, which value pointed at by the finger is smaller), and we add that value to our sorted combined array. We then advance the respective pointer (finger) forward. In the end we copy the remaining portion of the longer array and add it to the back of the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;ans&lt;/code&gt; array.&lt;/p&gt;&lt;p name=&quot;6a90&quot; id=&quot;6a90&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, the combined code for merge-sort is as follows:&lt;/p&gt;&lt;figure name=&quot;36ad&quot; id=&quot;36ad&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/2ddf8ef17df8c6d1b54d2d6973cbacec.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;a8f7&quot; id=&quot;a8f7&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We will do one final question using recursion and trust me, it’s a tough one and a pretty confusing one. But before moving onto that, I will iterate the steps I follow whenever I have to think of a recursive solution to a problem.&lt;/p&gt;&lt;h3 name=&quot;5225&quot; id=&quot;5225&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Steps to come up with a Recursive Solution&lt;/h3&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;33cf&quot; id=&quot;33cf&quot; class=&quot;graf graf--li graf-after--h3&quot;&gt;Try and break down the problem into subproblems.&lt;/li&gt;&lt;/ol&gt;&lt;figure name=&quot;9acd&quot; id=&quot;9acd&quot; class=&quot;graf graf--figure graf-after--li&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 600px; max-height: 399px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 66.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*aak-cm8casUG2vyVhlBVIw.png&quot; data-width=&quot;600&quot; data-height=&quot;399&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*aak-cm8casUG2vyVhlBVIw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://www.weheartswift.com/compute-2-power-n/&quot; data-href=&quot;https://www.weheartswift.com/compute-2-power-n/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.weheartswift.com/compute-2-power-n/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;082a&quot; id=&quot;082a&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;2. Once you have the subproblems figured out, think about what information from the call to the subproblems can you use to solve the task at hand. For example, the factorial of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;N — 1&lt;/code&gt; to find the factorial of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;N&lt;/code&gt; , height of the left and right subtrees to find the height of the main tree, and so on.&lt;/p&gt;&lt;figure name=&quot;f19e&quot; id=&quot;f19e&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 671px; max-height: 588px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 87.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*deig5GtZ71owj63KcdEJcg.png&quot; data-width=&quot;671&quot; data-height=&quot;588&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*deig5GtZ71owj63KcdEJcg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;72e4&quot; id=&quot;72e4&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;3. Keep calm and trust recursion! Assume that your recursive calls to the subproblems will return the information you need in the most optimal fashion.&lt;/p&gt;&lt;figure name=&quot;7534&quot; id=&quot;7534&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 525px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 75%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*ViEEM9XNagm79MAW5GR2mw.png&quot; data-width=&quot;1600&quot; data-height=&quot;1200&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*ViEEM9XNagm79MAW5GR2mw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://neildanson.files.wordpress.com/2014/02/keep-calm-it-just-works.png&quot; data-href=&quot;https://neildanson.files.wordpress.com/2014/02/keep-calm-it-just-works.png&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://neildanson.files.wordpress.com/2014/02/keep-calm-it-just-works.png&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;8d2c&quot; id=&quot;8d2c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;4. The final step in this process is actually using information we just got from the subproblems to find the solution to the main problem. Once you have that, you’re ready to code up your recursive solution.&lt;/p&gt;&lt;p name=&quot;b715&quot; id=&quot;b715&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we have all the steps lined up, let’s move on to our final problem in this article. It’s called &lt;a href=&quot;https://leetcode.com/problems/sum-of-distances-in-tree/description/&quot; data-href=&quot;https://leetcode.com/problems/sum-of-distances-in-tree/description/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Sum of Distances in a Tree.&lt;/a&gt;&lt;/p&gt;&lt;h3 name=&quot;792e&quot; id=&quot;792e&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Sum of Distances in a Tree&lt;/h3&gt;&lt;p name=&quot;3ae9&quot; id=&quot;3ae9&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let’s look at what the question is asking us to do here. Consider the following tree.&lt;/p&gt;&lt;figure name=&quot;563b&quot; id=&quot;563b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 714px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 102%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*U3An6J_vH3b2Ej0SO_XpUw.png&quot; data-width=&quot;1328&quot; data-height=&quot;1354&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*U3An6J_vH3b2Ej0SO_XpUw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Example tree showing the expected output of our program for the various nodes.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;2639&quot; id=&quot;2639&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In the example above, the sum of paths for the node A (the number of nodes on &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;each path&lt;/strong&gt; from &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A&lt;/code&gt; to every other vertex in the tree) is 9. The individual paths are mentioned in the diagram itself with their respective lengths.&lt;/p&gt;&lt;p name=&quot;ca6d&quot; id=&quot;ca6d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Similarly, consider the sum of distances for the node C.&lt;/p&gt;&lt;pre name=&quot;5291&quot; id=&quot;5291&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;C --&amp;gt; A --&amp;gt; B (Length 2)&lt;br&gt;C --&amp;gt; A (Length 1)&lt;br&gt;C --&amp;gt; D (Length 1)&lt;br&gt;C --&amp;gt; E (Length 1)&lt;br&gt;C --&amp;gt; D --&amp;gt; F (Length 2)&lt;br&gt;Sum of distances (C) = 2 + 1 + 1 + 1 + 2 = 7&lt;/pre&gt;&lt;p name=&quot;1065&quot; id=&quot;1065&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This is known as the sum of distances as defined for just a single node A or C. We need to calculate these distances for each of the nodes in the tree.&lt;/p&gt;&lt;p name=&quot;65cc&quot; id=&quot;65cc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before actually solving this generic problem, let us consider a simplified version of the same problem. It says that we just need to calculate the sum of distances for a given node, but we will only consider the tree rooted at the given node for calculations.&lt;/p&gt;&lt;p name=&quot;5752&quot; id=&quot;5752&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, for the node C, this simplified version of the problem would ask us to calculate:&lt;/p&gt;&lt;pre name=&quot;71e3&quot; id=&quot;71e3&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;C --&amp;gt; D (Length 1)&lt;br&gt;C --&amp;gt; E (Length 1)&lt;br&gt;C --&amp;gt; D --&amp;gt; F (Length 2)&lt;br&gt;Simplified Sum of Distances (C) = 1 + 1 + 2 = 4&lt;/pre&gt;&lt;p name=&quot;2705&quot; id=&quot;2705&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This is a much simpler problem to tackle recursively and would prove to be useful in solving the original problem.&lt;/p&gt;&lt;p name=&quot;8ac3&quot; id=&quot;8ac3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Consider the following simple tree.&lt;/p&gt;&lt;figure name=&quot;e268&quot; id=&quot;e268&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 779px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 111.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*bomBBwkaLxNXqUGno7rD6Q.png&quot; data-width=&quot;1346&quot; data-height=&quot;1498&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*bomBBwkaLxNXqUGno7rD6Q.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;The simple tree we would consider for now. Also mentioned are two values we would be computing for every node.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;1a21&quot; id=&quot;1a21&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The nodes B and C are the children of the root (that is, A).&lt;/p&gt;&lt;p name=&quot;408b&quot; id=&quot;408b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We are trying to see what information can we use from subproblems (the children) to compute the answer for the root &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A&lt;/code&gt; .&lt;/p&gt;&lt;p name=&quot;cedf&quot; id=&quot;cedf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Note&lt;/strong&gt;: here we simply want to calculate the sum of paths for a given node X to all its successors in its own subtree (the tree rooted at the node X).&lt;/p&gt;&lt;p name=&quot;9843&quot; id=&quot;9843&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There are no downwards going paths from the node B, and so the sum of paths is 0 for the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;B&lt;/code&gt; in this tree. Let’s look at the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;C&lt;/code&gt; . So this node has 3 different successors in &lt;code class=&quot;markup--code markup--p-code&quot;&gt;F, D and E&lt;/code&gt; . The sum of distances are as follows:&lt;/p&gt;&lt;pre name=&quot;2cbf&quot; id=&quot;2cbf&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;C --&amp;gt; D (Path containing just 1 edge, hence sum of distances = 1)&lt;br&gt;C --&amp;gt; D --&amp;gt; F (Path containing 2 edges, hence sum of distances = 2)&lt;br&gt;C --&amp;gt; E (Path containing just 1 edge, hence sum of distances = 1)&lt;/pre&gt;&lt;p name=&quot;dbf4&quot; id=&quot;dbf4&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The sum of all the paths from the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;C&lt;/code&gt; to all of its decedents is 4, and number of such paths going down is 3.&lt;/p&gt;&lt;p name=&quot;259c&quot; id=&quot;259c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Note the difference here. The &lt;code class=&quot;markup--code markup--p-code&quot;&gt;sum_of_distances&lt;/code&gt; here counts the number of edges in each path — with each edge repeating multiple times, probably because of their occurrence on different paths — unlike &lt;code class=&quot;markup--code markup--p-code&quot;&gt;number_of_paths&lt;/code&gt; , which counts, well, the number of paths 😝.&lt;/p&gt;&lt;p name=&quot;735a&quot; id=&quot;735a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you look closely, you will realize that the number of paths going down is always going to be the number of nodes in the tree we are considering (except the root). So, for the tree rooted at C, we have 3 paths, one for the node D, one for E, and one for F. This means that the number of paths from a given node to the successor nodes is simply the total number of descendent nodes since this is a tree. So, no cycles or multiple edges.&lt;/p&gt;&lt;p name=&quot;58b0&quot; id=&quot;58b0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now, consider the node A. Let us look at all the new paths that are being introduced because of this node A. Forget the node B for now and just focus on the child node C corresponding to A. The new sets of paths that we have are:&lt;/p&gt;&lt;pre name=&quot;98cd&quot; id=&quot;98cd&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;A --&amp;gt; C (Path containing just 1 edge, hence sum of distances = 1)&lt;br&gt;A --&amp;gt; (C --&amp;gt; D)    (Path containing 2 edges, hence sum of distances = 2)&lt;br&gt;A --&amp;gt; (C --&amp;gt; E)    (Path containing 2 edges, hence sum of distances = 2)&lt;br&gt;A --&amp;gt; (C --&amp;gt; D --&amp;gt; F) (Path containing 3 edges, hence sum of distances = 3)&lt;/pre&gt;&lt;p name=&quot;eee0&quot; id=&quot;eee0&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Except for the first path &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A → C&lt;/code&gt;, all the others are the same as the ones for the node C, except that we have simply changed all of them and incorporated one extra node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A&lt;/code&gt;.&lt;/p&gt;&lt;figure name=&quot;c559&quot; id=&quot;c559&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 535px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 76.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Q4kSg7rwJMxc4Ca17YdzBw.png&quot; data-width=&quot;1452&quot; data-height=&quot;1110&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Q4kSg7rwJMxc4Ca17YdzBw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Sum of distances for the node A along with contribution from the node C.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;7020&quot; id=&quot;7020&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;If you look at the diagram above you will see a tuple of values next to each of the nodes A, B, and C.&lt;/p&gt;&lt;pre name=&quot;39f6&quot; id=&quot;39f6&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;(X, Y) where &lt;br&gt;X is the number of paths originating at that node and going down to the decedents. &lt;br&gt;Y is the sum of distances for the tree rooted at the given node. &lt;/pre&gt;&lt;p name=&quot;0aba&quot; id=&quot;0aba&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Since the node B doesn’t have any further children, the only path it is contributing to is the path &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A --&amp;gt; B&lt;/code&gt; to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A&amp;#39;s&lt;/code&gt; tuple of (5, 9) above. So let’s talk about C.&lt;/p&gt;&lt;p name=&quot;442a&quot; id=&quot;442a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;C had three paths going to its successors. Those three paths (extended by one more node for A) also become three paths from A to its successors, among others.&lt;/p&gt;&lt;pre name=&quot;ad6b&quot; id=&quot;ad6b&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;N-Paths[A] = (N-Paths[C] + 1) + (N-Paths[B] + 1)&lt;/pre&gt;&lt;p name=&quot;7e6e&quot; id=&quot;7e6e&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;That is the exact relation we are looking for as far as the number of paths (= number of successor nodes in the tree) are concerned. The 1 is because of the new path from the root to it’s child, that is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A --&amp;gt; C&lt;/code&gt; in our case.&lt;/p&gt;&lt;pre name=&quot;9ffa&quot; id=&quot;9ffa&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;N-Paths[A] = 3 + 1 + 0 + 1 = 5&lt;/pre&gt;&lt;p name=&quot;a0ef&quot; id=&quot;a0ef&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;As far as the sum of distances is concerned, take a look at the diagram and the equations we just wrote. The following formula becomes very clear:&lt;/p&gt;&lt;pre name=&quot;d180&quot; id=&quot;d180&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;Sum-Dist[A] = (N-Paths[C] + 1 + Sum-Dist[C]) + (N-Paths[B] + 1 + Sum-Dist[B]) Sum-Dist[A] = (3 + 1 + 4 + 0 + 1 + 0) = 9&lt;/pre&gt;&lt;p name=&quot;3d9e&quot; id=&quot;3d9e&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The main thing here is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;N-Paths[C] + Sum-Dist[C]&lt;/code&gt; . We sum these up because all of the paths from C to its descendants ultimately become the paths from A to its descendants — except that they originate at A and go through C, and so each of the path lengths are increased by 1. There are &lt;code class=&quot;markup--code markup--p-code&quot;&gt;N-Paths[C]&lt;/code&gt; paths in all originating from C and their total length is given by &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Sum-Dist[C]&lt;/code&gt; .&lt;/p&gt;&lt;p name=&quot;9101&quot; id=&quot;9101&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Hence the tuple corresponding to A = (5, 9). The Python code for the algorithm we discussed above is as follows:&lt;/p&gt;&lt;figure name=&quot;7f39&quot; id=&quot;7f39&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/f89850fc7353c7662fac133ebd49c793.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;h4 name=&quot;3e82&quot; id=&quot;3e82&quot; class=&quot;graf graf--h4 graf-after--figure&quot;&gt;The Curious Case of the Visited Dictionary :/&lt;/h4&gt;&lt;p name=&quot;45ac&quot; id=&quot;45ac&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;If you look at the code above closely, you’ll see this:&lt;/p&gt;&lt;pre name=&quot;7481&quot; id=&quot;7481&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;# Prevents the recursion from going into a cycle.        self.visited[vertex] = 1&lt;/pre&gt;&lt;p name=&quot;2aef&quot; id=&quot;2aef&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The comment says that this &lt;code class=&quot;markup--code markup--p-code&quot;&gt;visited&lt;/code&gt; dictionary is for preventing the recursion from entering a cycle.&lt;/p&gt;&lt;p name=&quot;3fea&quot; id=&quot;3fea&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you’ve paid attention til now, you know that we are dealing with a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;tree&lt;/code&gt; here.&lt;/p&gt;&lt;p name=&quot;827a&quot; id=&quot;827a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The definition of a tree data structure doesn’t allow cycles to exist. If a cycle exists in the structure, then it is no longer a tree, it becomes a graph. In a tree, there is exactly one path between any two pair of vertices. A cycle would mean there is more than one path between a pair of vertices. Look at the figures below.&lt;/p&gt;&lt;figure name=&quot;b477&quot; id=&quot;b477&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 479px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 68.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*vtO_LgKcmR19kzmCgSrSYw.png&quot; data-width=&quot;2144&quot; data-height=&quot;1466&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*vtO_LgKcmR19kzmCgSrSYw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Tree vs Graph. Showing the cycle.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;52e3&quot; id=&quot;52e3&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The structure on the left is a tree. It has no cycles in it. There is a unique path between any two vertices.&lt;/p&gt;&lt;p name=&quot;9fae&quot; id=&quot;9fae&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The structure on the right is a graph, there exists a cycle in the graph and hence there are multiple paths between any pair of vertices. For this graph, it so happens that any pair of vertices have more than one path. This is not necessary for every graph.&lt;/p&gt;&lt;p name=&quot;aaf2&quot; id=&quot;aaf2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Almost always, we are given the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;root&lt;/code&gt; node of the tree. We can use the root node to traverse the entire tree &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;without having to worry about any cycles as such&lt;em class=&quot;markup--em markup--p-em&quot;&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;148b&quot; id=&quot;148b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, if you’ve read the problem statement clearly, it does not state anything about root of the tree.&lt;/p&gt;&lt;p name=&quot;229a&quot; id=&quot;229a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That means that there is no designated root for the tree given in the question. This could mean that a given tree can be visualized and processed in so many different ways depending upon what we consider as the root. Have a look at multiple structures for the same tree but with different root nodes.&lt;/p&gt;&lt;figure name=&quot;3ae8&quot; id=&quot;3ae8&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 625px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 89.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*DR9CZIanW-su89jiCPDtVg.png&quot; data-width=&quot;1416&quot; data-height=&quot;1264&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*DR9CZIanW-su89jiCPDtVg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Multiple orientations of the same tree with different roots.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;1a8f&quot; id=&quot;1a8f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So many different interpretations and parent child relationships are possible for a given &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;unrooted tree&lt;em class=&quot;markup--em markup--p-em&quot;&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;4cf3&quot; id=&quot;4cf3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, we start with the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;0&lt;/code&gt; and do a DFS traversal of the given structure. In the process we fix the parent child relationships. Given the edges in the problem, we construct an undirected graph-like structure which we convert to the tree structure. Taking a look at the code should clear up some of your doubts:&lt;/p&gt;&lt;figure name=&quot;5a68&quot; id=&quot;5a68&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/ecbea2efcb9a3c87249e4444f35e68fb.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;362c&quot; id=&quot;362c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Every node would have one parent. The root won’t have any parent, and the way this logic is, the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;0&lt;/code&gt; would become the root of our tree. Note that we are not doing this process separately and then calculating the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;sum of distances downwards&lt;/code&gt;. Given a tree, we were trying to find, for every node, the simplified sum of distances for the tree rooted at that node.&lt;/p&gt;&lt;p name=&quot;792d&quot; id=&quot;792d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, the conversion from the graph to the tree happens in one single iteration along with finding out the sum of distances downwards for each and every node.&lt;/p&gt;&lt;figure name=&quot;aff1&quot; id=&quot;aff1&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/f89850fc7353c7662fac133ebd49c793.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;4eb9&quot; id=&quot;4eb9&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I posted the code again so that the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;visited&lt;/code&gt; dictionary makes much more sense now. So, one single recursion doing all that for us. Nice!&lt;/p&gt;&lt;h4 name=&quot;1765&quot; id=&quot;1765&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Bringing it all together&lt;/h4&gt;&lt;p name=&quot;d0b6&quot; id=&quot;d0b6&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Now that we have our tree structure defined, and also the values of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;sum of distances going downward&lt;/code&gt; defined for us, we can use all of this information to solve the original problem of &lt;a href=&quot;https://leetcode.com/problems/sum-of-distances-in-tree/description/&quot; data-href=&quot;https://leetcode.com/problems/sum-of-distances-in-tree/description/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Sum of Distances in a Tree.&lt;/a&gt;&lt;/p&gt;&lt;p name=&quot;81b6&quot; id=&quot;81b6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;How do we do that? It’s best to explain this algorithm with the help of an example. So we will consider the tree below and we will dry run the algorithm for a single node. Let’s have a look at the tree we will be considering.&lt;/p&gt;&lt;figure name=&quot;8b78&quot; id=&quot;8b78&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 687px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 98.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_X74YieQAGUCmZvBXwIgWQ.png&quot; data-width=&quot;1270&quot; data-height=&quot;1246&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*_X74YieQAGUCmZvBXwIgWQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;The tree we will be considering for our explanation moving on.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;97b1&quot; id=&quot;97b1&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The node for which we want to find the sum of distances is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt;. Now, if you remember the simpler problem we were trying to solve earlier, you know that we already have two values associated with each of the nodes:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;2d60&quot; id=&quot;2d60&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;distances_down&lt;/code&gt; Which is the sum of distances for this node &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;while only considering the tree beneath&lt;em class=&quot;markup--em markup--li-em&quot;&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;&lt;li name=&quot;2250&quot; id=&quot;2250&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;number_of_paths_down&lt;/code&gt; which is the number of paths / nodes in the tree rooted at the node under consideration.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;a414&quot; id=&quot;a414&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Let’s look at the annotated version of the above tree. The tree is annotated with tuples &lt;code class=&quot;markup--code markup--p-code&quot;&gt;(distances_down, number_of_paths_down)&lt;/code&gt; .&lt;/p&gt;&lt;figure name=&quot;6b05&quot; id=&quot;6b05&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 653px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 93.30000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*8O6xTkG84fkHB3og3rXtzA.png&quot; data-width=&quot;1496&quot; data-height=&quot;1396&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*8O6xTkG84fkHB3og3rXtzA.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Example tree with annotated values for all nodes.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;4f15&quot; id=&quot;4f15&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Let’s call the value we want to compute for each node as &lt;code class=&quot;markup--code markup--p-code&quot;&gt;sod&lt;/code&gt; which means sum of distances, which is what the question originally asks us to compute.&lt;/p&gt;&lt;p name=&quot;7d92&quot; id=&quot;7d92&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let us assume that we have already computed the answer for the parent node of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt; in the diagram above. So, we now have the following information for the node labelled &lt;code class=&quot;markup--code markup--p-code&quot;&gt;2&lt;/code&gt; (the parent node) available:&lt;/p&gt;&lt;p name=&quot;ead4&quot; id=&quot;ead4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;(sod, distances_down, number_of_paths_down)&lt;/code&gt; = &lt;code class=&quot;markup--code markup--p-code&quot;&gt;(13, 4, 3)&lt;/code&gt;&lt;/p&gt;&lt;p name=&quot;59b7&quot; id=&quot;59b7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s rotate the given tree and visualize it in a way where &lt;code class=&quot;markup--code markup--p-code&quot;&gt;2&lt;/code&gt; is the root of the tree essentially.&lt;/p&gt;&lt;figure name=&quot;9f2b&quot; id=&quot;9f2b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 566px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 80.80000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*TmKowuiShc8NCwxP-9VvOg.png&quot; data-width=&quot;1500&quot; data-height=&quot;1212&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*TmKowuiShc8NCwxP-9VvOg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Rotated tree showing the tree rooted at 4 should be removed.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;1f96&quot; id=&quot;1f96&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now, we want to remove the contribution of the tree rooted at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt; from &lt;code class=&quot;markup--code markup--p-code&quot;&gt;sod(2)&lt;/code&gt;. Let us consider all of the paths from the parent node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;2&lt;/code&gt; to all other nodes except the ones in the tree rooted at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt; .&lt;/p&gt;&lt;pre name=&quot;f5f8&quot; id=&quot;f5f8&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;2 --&amp;gt; 5 (1 edge)&lt;br&gt;2 --&amp;gt; 1 (1 edge)&lt;br&gt;2 --&amp;gt; 1 --&amp;gt;7 (2 edges)&lt;br&gt;2 --&amp;gt; 1 --&amp;gt; 7 --&amp;gt; 9 (3 edges)&lt;br&gt;2 --&amp;gt; 1 --&amp;gt; 7 --&amp;gt; 10 (3 edges) &lt;br&gt; Number of nodes considered = 6&lt;br&gt;Sum of paths remaining i.e. sod(2) rem = 1 + 1 + 2 + 3 + 3 = 10&lt;/pre&gt;&lt;p name=&quot;9144&quot; id=&quot;9144&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Let’s see how we can use the values we already have calculated to get these updated values.&lt;/p&gt;&lt;pre name=&quot;d045&quot; id=&quot;d045&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;* N = 8 (Total number of nodes in the tree. This will remain the same for every node.)&lt;br&gt;&lt;br&gt;* sod(2) = 13 &lt;br&gt;&lt;br&gt;* distances_down[4] = 1&lt;br&gt;&lt;br&gt;* number_of_paths_down[4] = 1 &lt;br&gt;&lt;br&gt;* (distances_down[4] does not include the node 4 itself) &lt;br&gt;&lt;br&gt;N - 1 - distances_down[4] = 8 - 1 - 1 = 6 &lt;br&gt;&lt;br&gt;* sod(2) - 1 - distances_down[4] - number_of_paths_down[4] = 13 - 1 - 1 - 1 = 10&lt;/pre&gt;&lt;p name=&quot;37f4&quot; id=&quot;37f4&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;If you remember this from the function we defined earlier, you will notice that the contribution of a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;child&lt;/code&gt; node to the two values &lt;code class=&quot;markup--code markup--p-code&quot;&gt;distances_down and number_of_paths_down&lt;/code&gt; is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;n_paths + 1&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;n_paths + s_paths + 1&lt;/code&gt; respectively. Naturally, that is what we subtract to obtain the remaining tree.&lt;/p&gt;&lt;figure name=&quot;a4a3&quot; id=&quot;a4a3&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/b7076f6f2cda42a672c8c8e75531e0d0.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;831a&quot; id=&quot;831a&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;sod(4)&lt;/code&gt; represents the sum of edges on all the paths originating at the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt; in the tree above. Let’s see how we can find this out using the information we have calculated till now.&lt;/p&gt;&lt;p name=&quot;8c22&quot; id=&quot;8c22&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;distances_down[4]&lt;/code&gt; represents the answer for the tree rooted at the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt; but it only considers paths going to its successors, that is all the nodes in the tree rooted at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt;. For our example, the successor of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4&lt;/code&gt; is the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;6&lt;/code&gt;. So, that will directly add to the final answer. Let’s call this value &lt;code class=&quot;markup--code markup--p-code&quot;&gt;own_answer&lt;/code&gt; . Now, let’s account for all the other paths.&lt;/p&gt;&lt;pre name=&quot;0cb0&quot; id=&quot;0cb0&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 --&amp;gt; 2 (1 edge)&lt;br&gt;4 --&amp;gt; 2 --&amp;gt; 5 (1 + 1 edge)&lt;br&gt;4 --&amp;gt; 2 --&amp;gt; 1 (1 + 1 edge)&lt;br&gt;4 --&amp;gt; 2 --&amp;gt; 1 --&amp;gt;7 (1 + 2 edges)&lt;br&gt;4 --&amp;gt; 2 --&amp;gt; 1 --&amp;gt; 7 --&amp;gt; 9 (1 + 3 edges)&lt;br&gt;4 --&amp;gt; 2 --&amp;gt; 1 --&amp;gt; 7 --&amp;gt; 10 (1 + 3 edges)&lt;br&gt;own_answer = 1 &lt;br&gt;&lt;br&gt;sod(4) = 1 + 1 + 2 + 2 + 3 + 4 + 4 = 17 &lt;br&gt;&lt;br&gt;sod(4) = own_answer + (N - 1 - &lt;code class=&quot;markup--code markup--pre-code&quot;&gt;distances_down[4]) + (&lt;/code&gt;sod(2) - 1 - &lt;code class=&quot;markup--code markup--pre-code&quot;&gt;distances_down[4] - number_of_paths_down[4]) = 1 + 6 + 10 = 17&lt;/code&gt;&lt;/pre&gt;&lt;figure name=&quot;bb11&quot; id=&quot;bb11&quot; class=&quot;graf graf--figure graf--iframe graf-after--pre&quot;&gt;&lt;iframe src=&quot;https://giphy.com/embed/FX1ZGci9qPM3u/twitter/iframe&quot; width=&quot;435&quot; height=&quot;568&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://giphy.com/gifs/angry-confused-love-life-FX1ZGci9qPM3u&quot; data-href=&quot;https://giphy.com/gifs/angry-confused-love-life-FX1ZGci9qPM3u&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://giphy.com/gifs/angry-confused-love-life-FX1ZGci9qPM3u&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;fdc6&quot; id=&quot;fdc6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Before you go bonkers and start doing this, let’s look at the code and bring together all of the things we discussed in the example above.&lt;/p&gt;&lt;figure name=&quot;3627&quot; id=&quot;3627&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/99d8fcffc5fbdd7957e488096ddfd59b.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;c0ef&quot; id=&quot;c0ef&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The recursive relation for this portion is as follows:&lt;/p&gt;&lt;figure name=&quot;ef9d&quot; id=&quot;ef9d&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 590px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 84.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*sKrK7VgF8dHvYMoiIjZtSA.png&quot; data-width=&quot;1468&quot; data-height=&quot;1238&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*sKrK7VgF8dHvYMoiIjZtSA.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Recursive relation for Sum of Distances, in its totality.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 name=&quot;55ef&quot; id=&quot;55ef&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Did I just see “MEMOIZATION” in the code?&lt;/h3&gt;&lt;p name=&quot;464c&quot; id=&quot;464c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Yes, indeed you did!&lt;/p&gt;&lt;p name=&quot;97be&quot; id=&quot;97be&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Consider the following example tree:&lt;/p&gt;&lt;figure name=&quot;5f8a&quot; id=&quot;5f8a&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 665px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 95%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*SkgBwbCP1O6-wrS4u2WlZg.png&quot; data-width=&quot;1398&quot; data-height=&quot;1328&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*SkgBwbCP1O6-wrS4u2WlZg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Example of a skewed tree, also recursive calls for the vertex 5&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;f86c&quot; id=&quot;f86c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The question asks us to find the sum of distances for all the nodes in the given tree. So, we would do something like this:&lt;/p&gt;&lt;pre name=&quot;8cbc&quot; id=&quot;8cbc&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;for i in range(N):&lt;br&gt;    ans.append(find_distances(N))&lt;/pre&gt;&lt;p name=&quot;6a1b&quot; id=&quot;6a1b&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;But, if you look at the tree above, the recursive call for the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;5&lt;/code&gt; would end up calculating the answers for all the nodes in the tree. So, we don’t need to recalculate the answers for the other nodes again and again.&lt;/p&gt;&lt;p name=&quot;6d29&quot; id=&quot;6d29&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Hence, we end up storing the already calculated values in a dictionary and use that in further calculations.&lt;/p&gt;&lt;p name=&quot;0bd1&quot; id=&quot;0bd1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Essentially, the recursion is based on the parent of a node, and multiple nodes can have the same parent. So, the answer for the parent should only be calculated once and then be used again and again.&lt;/p&gt;&lt;p name=&quot;9e13&quot; id=&quot;9e13&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you’ve managed to read the article this far (not necessarily in one stretch 😛), you’re awesome 😃.&lt;/p&gt;&lt;figure name=&quot;eeb6&quot; id=&quot;eeb6&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 864px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 123.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*3vTs6DvYvHOIG_l2aeiRHw.jpeg&quot; data-width=&quot;900&quot; data-height=&quot;1111&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*3vTs6DvYvHOIG_l2aeiRHw.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;http://doodlecats.com/youre-awesome&quot; data-href=&quot;http://doodlecats.com/youre-awesome&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://doodlecats.com/youre-awesome&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;5895&quot; id=&quot;5895&quot; class=&quot;graf graf--p graf-after--figure graf--trailing&quot;&gt;If you found this article helpful, share as much as possible and spread the 💛. Cheers!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Breadth First Search and its application to shortest paths in weighted graphs</title>
   <link href="http://localhost:4000/2018/07/12/Explore-the-applications-and-limits-of-Breadth-First-Search-to-the-shortest-paths-in-a-weighted-1e7b28b3307/"/>
   <updated>2018-07-12T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/07/12/Explore-the-applications-and-limits-of-Breadth-First-Search-to-the-shortest-paths-in-a-weighted--1e7b28b3307</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Explore the applications and limits of Breadth First Search to the shortest paths in a weighted…&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Explore the applications and limits of Breadth First Search to the shortest paths in a weighted…&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
Do you know the amount of global air traffic in 2017? Do you know what the rise has been for air traffic over the past several years …
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;998b&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;3be3&quot; id=&quot;3be3&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;1fed&quot; id=&quot;1fed&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 1111px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 111.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Dn4pxbJWrya6g1h0NNhaHw.png&quot; data-width=&quot;1768&quot; data-height=&quot;1964&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*Dn4pxbJWrya6g1h0NNhaHw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;b3eb&quot; id=&quot;b3eb&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Do you know the amount of global air traffic in 2017? Do you know what the rise has been for air traffic over the past several years ? Well, lets look at some statistics.&lt;/p&gt;&lt;figure name=&quot;c998&quot; id=&quot;c998&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 462px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 66.10000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*-YOA5JTQ68fJCixUUBYQ2A.png&quot; data-width=&quot;1444&quot; data-height=&quot;954&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*-YOA5JTQ68fJCixUUBYQ2A.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://www.statista.com/statistics/564769/airline-industry-number-of-flights/&quot; data-href=&quot;https://www.statista.com/statistics/564769/airline-industry-number-of-flights/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.statista.com/statistics/564769/airline-industry-number-of-flights/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;7616&quot; id=&quot;7616&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;According to the &lt;a href=&quot;https://www.icao.int/Pages/default.aspx&quot; data-href=&quot;https://www.icao.int/Pages/default.aspx&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;International Civil Aviation Organization&lt;/a&gt; (ICAO), a record 4.1 billion passengers were carried by the aviation industry on scheduled services in 2017. And, the number of flights rose to 37 million globally in 2017.&lt;/p&gt;&lt;p name=&quot;6b4b&quot; id=&quot;6b4b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That’s a lot of passengers and a lot of flights occupying the air space on a daily basis across the world. Since there are hundreds and thousands of these flights all around the globe, there are bound to be different routes with multiple stops in between from one place to another.&lt;/p&gt;&lt;p name=&quot;ae31&quot; id=&quot;ae31&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Every flight has a source and destination of its own and a standard economy seat price associated with it. Let’s leave out the fancy business class tickets and extra leg room and what not!&lt;/p&gt;&lt;p name=&quot;f8e0&quot; id=&quot;f8e0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In such a scenario, it is too confusing to choose what flight would be the best one if we want to go from one place to another.&lt;/p&gt;&lt;p name=&quot;723a&quot; id=&quot;723a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s see the number of flight options &lt;a href=&quot;https://www.studentuniverse.com/?noMoreRedirect=true&quot; data-href=&quot;https://www.studentuniverse.com/?noMoreRedirect=true&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;StudentUniverse&lt;/a&gt; (provides discounts for students 😜) gives me from Los Angeles to New Delhi.&lt;/p&gt;&lt;figure name=&quot;251c&quot; id=&quot;251c&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 644px; max-height: 110px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 17.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*ws_g1WoN2gol45O7xgUf9g.png&quot; data-width=&quot;644&quot; data-height=&quot;110&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*ws_g1WoN2gol45O7xgUf9g.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Every flight has a Details hyperlink with it, so we searched for that and found 119 total flights.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;693c&quot; id=&quot;693c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;119 total flights are being offered. Then there appears a pop up on the website saying that there are other websites that might be offering similar flights at even cheaper rates. 😩&lt;/p&gt;&lt;p name=&quot;6cae&quot; id=&quot;6cae&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So many websites and uncountable flights for just a single source and destination.&lt;/p&gt;&lt;p name=&quot;a366&quot; id=&quot;a366&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As a developer, if I want to solve this problem, I would build a system to efficiently address the following queries:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;2ad8&quot; id=&quot;2ad8&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Total number of destinations reachable (with a max number of stops) from my current location, and also list those destinations.&lt;br&gt;One should keep their options open when they want to travel 😃.&lt;/li&gt;&lt;li name=&quot;6c12&quot; id=&quot;6c12&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;It is a known fact (IMO 😉) that a route with multiple stops tends to be a cheaper alternative to direct flights.&lt;br&gt;So, given a source and a destination, we may want to find routes with at least 2 or 3 stops.&lt;/li&gt;&lt;li name=&quot;3f2b&quot; id=&quot;3f2b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Most importantly: What is the cheapest route from a given source to a given destination?&lt;/li&gt;&lt;li name=&quot;aff4&quot; id=&quot;aff4&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;And…. We’ll come to this one in the end 🙈.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;f5a0&quot; id=&quot;f5a0&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;As you might guess, there would be potentially thousands of flights as the output of the first two queries. But we can certainly reduce that by providing some other criteria to lessen the output size. For the scope of this article, let us focus on these original queries themselves.&lt;/p&gt;&lt;h3 name=&quot;b6ca&quot; id=&quot;b6ca&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Modeling the Flight Network as a Graph&lt;/h3&gt;&lt;p name=&quot;0465&quot; id=&quot;0465&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;It’s pretty clear from the headline of this article that graphs would be involved somewhere, isn’t it?&lt;/p&gt;&lt;p name=&quot;c5f3&quot; id=&quot;c5f3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Modeling this problem as a graph traversal problem greatly simplifies it and makes the problem much more tractable. So, as a first step, let us define our graph.&lt;/p&gt;&lt;p name=&quot;bf72&quot; id=&quot;bf72&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We model the air traffic as a:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;10a8&quot; id=&quot;10a8&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;directed&lt;/li&gt;&lt;li name=&quot;e571&quot; id=&quot;e571&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;possibly cyclic&lt;/li&gt;&lt;li name=&quot;e3f8&quot; id=&quot;e3f8&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;weighted&lt;/li&gt;&lt;li name=&quot;e032&quot; id=&quot;e032&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;forest. &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;G (V, E)&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;07f2&quot; id=&quot;07f2&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Directed&lt;/strong&gt; because every flight will have a designated source and a destination. These carry a lot of meaning.&lt;/p&gt;&lt;p name=&quot;bce3&quot; id=&quot;bce3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Cyclic&lt;/strong&gt; because it is very possible to follow a bunch of flights starting from a given location and ending back at the same location.&lt;/p&gt;&lt;p name=&quot;1bd7&quot; id=&quot;1bd7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Weighted&lt;/strong&gt; because every flight has a cost associated with it which would be the economy class flight ticket for this article.&lt;/p&gt;&lt;p name=&quot;4794&quot; id=&quot;4794&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;And finally, a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;forest&lt;/strong&gt; because we might have multiple connected components. It is not necessary that all the cities in the world have some sort of flight network between them. So, the graph can be disconnected, and hence a forest.&lt;/p&gt;&lt;p name=&quot;f2a0&quot; id=&quot;f2a0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The vertices, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;V&lt;/strong&gt;, would be the locations all over the world wherever there are working airports.&lt;/p&gt;&lt;p name=&quot;f4dc&quot; id=&quot;f4dc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The edges, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;E&lt;/strong&gt;, would be representative of all the flights constituting the air traffic. An edge from &lt;code class=&quot;markup--code markup--p-code&quot;&gt;u --&amp;gt; v&lt;/code&gt; simply means you have a directed flight from the location / node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;u&lt;/code&gt; to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;v&lt;/code&gt; .&lt;/p&gt;&lt;figure name=&quot;d8fd&quot; id=&quot;d8fd&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 1142px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 163.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*EVmPCv1BmJ7A1WMl5P2urQ.png&quot; data-width=&quot;1064&quot; data-height=&quot;1736&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*EVmPCv1BmJ7A1WMl5P2urQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Sample flight network with the cost labelling for different flights.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;2a1f&quot; id=&quot;2a1f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now that we have an idea about how to model the flight network as a graph, let us move on and solve the first common query that a user might have.&lt;/p&gt;&lt;h3 name=&quot;b16d&quot; id=&quot;b16d&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Total Number of Destinations Reachable&lt;/h3&gt;&lt;p name=&quot;f79b&quot; id=&quot;f79b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Who doesn’t like to travel?&lt;/p&gt;&lt;p name=&quot;d09c&quot; id=&quot;d09c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As someone who likes to explore different places, you would want to know what all destinations are reachable from your local airport. Again, there would be additional criteria here to reduce the results of this query. But to keep things simple, we will simply try and find all the locations reachable from our local airport.&lt;/p&gt;&lt;p name=&quot;f5c8&quot; id=&quot;f5c8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we have a well defined graph, we can apply traversal algorithms to process it.&lt;/p&gt;&lt;p name=&quot;8a59&quot; id=&quot;8a59&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Starting off from a given point, we can use either &lt;a href=&quot;https://en.wikipedia.org/wiki/Breadth-first_search&quot; data-href=&quot;https://en.wikipedia.org/wiki/Breadth-first_search&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Breadth First Search&lt;/a&gt; (BFS) or &lt;a href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot; data-href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Depth First Search&lt;/a&gt; (DFS) to explore the graph or the locations reachable from the starting location &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;within a maximum number of stops.&lt;/strong&gt; Since this article is all about the breadth first search algorithm, let’s look at how we can use the famous BFS to accomplish this task.&lt;/p&gt;&lt;p name=&quot;7b2e&quot; id=&quot;7b2e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We will initialize the BFS queue with the given location as the starting point. We then perform the breadth first traversal, and keep going until the queue is empty or until the maximum number of stops have been exhausted.&lt;/p&gt;&lt;p name=&quot;3d23&quot; id=&quot;3d23&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Note: &lt;/strong&gt;If you are not familiar with the breadth first search or depth first search, I would recommend going through &lt;a href=&quot;https://medium.freecodecamp.org/deep-dive-into-graph-traversals-227a90c6a261&quot; data-href=&quot;https://medium.freecodecamp.org/deep-dive-into-graph-traversals-227a90c6a261&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;this article&lt;/a&gt; before continuing.&lt;/p&gt;&lt;p name=&quot;94b0&quot; id=&quot;94b0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at the code to initialize our graph data structure. We also need to look at how the BFS algorithm would end up giving us all the destinations reachable from a given source.&lt;/p&gt;&lt;figure name=&quot;ffe4&quot; id=&quot;ffe4&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/c0ac66eefc34c3d011c9d5d2ea292716.js&quot;&gt;&lt;/script&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Some Random set of flights with source, destination and their prices.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;d5b0&quot; id=&quot;d5b0&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now that we have a good idea about how the graph is to be initialized, let’s look at the code for the BFS algorithm.&lt;/p&gt;&lt;figure name=&quot;0fff&quot; id=&quot;0fff&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/61d9089e3b7da91c4c528b3bcc736be9.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;7aee&quot; id=&quot;7aee&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Performing &lt;code class=&quot;markup--code markup--p-code&quot;&gt;bfs&lt;/code&gt; on the city of Los Angeles would give us the following destinations which are reachable:&lt;/p&gt;&lt;pre name=&quot;436b&quot; id=&quot;436b&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;{&amp;#39;Chicago&amp;#39;, &amp;#39;France&amp;#39;, &amp;#39;Ireland&amp;#39;, &amp;#39;Italy&amp;#39;, &amp;#39;Japan&amp;#39;, &amp;#39;New Delhi&amp;#39;, &amp;#39;Norway&amp;#39;}&lt;/pre&gt;&lt;p name=&quot;99ac&quot; id=&quot;99ac&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;That was simple, wasn’t it?&lt;/p&gt;&lt;p name=&quot;c34e&quot; id=&quot;c34e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We will look at how we can limit the BFS to a maximum number of stops later on in the article.&lt;/p&gt;&lt;p name=&quot;6fc3&quot; id=&quot;6fc3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In case we have a humongous flight network, which we would have in a production scenario, then we would not ideally want to explore all the reachable destinations from a given starting point.&lt;/p&gt;&lt;p name=&quot;b214&quot; id=&quot;b214&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is a use case if the flight network is very small or pertains only to a few regions in the United States.&lt;/p&gt;&lt;p name=&quot;62d3&quot; id=&quot;62d3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But, for a large network, a more realistic use case would be to find all the flight routes with multiple stops. Let us look at this problem in some more detail and see how we can solve it.&lt;/p&gt;&lt;h3 name=&quot;4906&quot; id=&quot;4906&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Routes with multiple stops&lt;/h3&gt;&lt;p name=&quot;790b&quot; id=&quot;790b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;It is a well known fact that more often than not, for a given source and destination, a multi stop trip is cheaper than a direct, non-stop flight.&lt;/p&gt;&lt;p name=&quot;50cb&quot; id=&quot;50cb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A lot of times we prefer the direct flight to avoid the layovers. Also because the multi-stop flights do tend to take a lot of time — which we don’t have.&lt;/p&gt;&lt;p name=&quot;129f&quot; id=&quot;129f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, if you don’t have any deadlines approaching and you want to save some bucks (and are comfortable with the multi-stop route that a lot of airlines suggest), then you might actually benefit a lot from something like this.&lt;/p&gt;&lt;p name=&quot;460a&quot; id=&quot;460a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, you might get to pass through some of the most beautiful locations in the world with some of the most advanced airports which you can enjoy. So, that’s enough motivation as it is.&lt;/p&gt;&lt;p name=&quot;d1f6&quot; id=&quot;d1f6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In terms of the graph model that we have been talking about, given a source and a destination, we need to come up with routes with 2 or more stops for a given source and destination.&lt;/p&gt;&lt;p name=&quot;afe9&quot; id=&quot;afe9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As an end user, we might not want to see flights in this order for this query:&lt;/p&gt;&lt;pre name=&quot;d2c8&quot; id=&quot;d2c8&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;[A, C, D, B], 2 stops, $X&lt;br&gt;[A, E, D, C, F, W, G, T, B], 8 stops, $M&lt;br&gt;[A, R, E, G, B], 3 stops, $K&lt;br&gt;[A, Z, X, C, V, B, N, S, D, F, G, H, B, 11 stops, $P&lt;/pre&gt;&lt;p name=&quot;ac18&quot; id=&quot;ac18&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;I know. Nobody in their right minds would want to go for a flight route with 11 stops. But the point I’m trying to make is that an end user would want symmetry. Meaning that they would want to see all the flights with 2 stops first, then all the flights with 3 stops and so on till maybe a max of, say, 5 stops.&lt;/p&gt;&lt;p name=&quot;3c79&quot; id=&quot;3c79&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But, all the flight routes with the same number of stops in between should be displayed together. That is a requirement we need to satisfy.&lt;/p&gt;&lt;p name=&quot;4348&quot; id=&quot;4348&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at how we can solve this. So, given the graph of flight networks, a source &lt;code class=&quot;markup--code markup--p-code&quot;&gt;S&lt;/code&gt; and a destination &lt;code class=&quot;markup--code markup--p-code&quot;&gt;D&lt;/code&gt;, we have to perform a level order traversal and report flight routes from &lt;code class=&quot;markup--code markup--p-code&quot;&gt;S --&amp;gt; D&lt;/code&gt; with at least 2 and at most 5 stops in between. This means we have to do a level order traversal until a depth of 7 from the start node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;S&lt;/code&gt; .&lt;/p&gt;&lt;p name=&quot;c933&quot; id=&quot;c933&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Have a look at the code for solving this problem:&lt;/p&gt;&lt;figure name=&quot;5c38&quot; id=&quot;5c38&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/ce915542048558003d4395954ae5aa87.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;af57&quot; id=&quot;af57&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This might not be the best way to go about solving this problem at scale — the largest memory constraint would be due to the nodes currently present in the queue.&lt;/p&gt;&lt;p name=&quot;ac62&quot; id=&quot;ac62&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Since every node or location can have thousands of flights to other destinations in the world, the queue could be humongous if we store actual flight data like this. This is just to demonstrate one of the use cases of the breadth first search algorithm.&lt;/p&gt;&lt;p name=&quot;0365&quot; id=&quot;0365&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now, let us just focus on the traversal and look at the way it is done. The traversal algorithm is simple as it is. However, the entire space complexity of the level order traversal comes from the elements in the queue and the size of each element.&lt;/p&gt;&lt;p name=&quot;8978&quot; id=&quot;8978&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There are multiple ways to implement the algorithm. Also, each of them varies in terms of maximum memory consumed at any given time by the elements in the queue.&lt;/p&gt;&lt;p name=&quot;50ec&quot; id=&quot;50ec&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We want to see the maximum memory consumed by the queue at any point in time during the level order traversal. Before that, let’s construct a random flight network with random prices.&lt;/p&gt;&lt;figure name=&quot;8dd5&quot; id=&quot;8dd5&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/12e604c3328ddfb8544ffbbeeb14349b.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;fe98&quot; id=&quot;fe98&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now let us look at the implementation of level order traversal.&lt;/p&gt;&lt;figure name=&quot;4559&quot; id=&quot;4559&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/713b7dc200b6cfb614b96cde4b01a4d1.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;4f33&quot; id=&quot;4f33&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This above is the easiest and most straightforward implementation of the level order traversal algorithm.&lt;/p&gt;&lt;p name=&quot;f25b&quot; id=&quot;f25b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;With every node we add to the queue, we also store the level information and we push a tuple of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;(node, level)&lt;/code&gt; into the queue. So every time we pop an element from the queue, we have the level information attached with the node itself.&lt;/p&gt;&lt;p name=&quot;104f&quot; id=&quot;104f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The level information for our use case would mean the number of stops from the source to this location in the flight route.&lt;/p&gt;&lt;p name=&quot;945a&quot; id=&quot;945a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It turns out that we can do better as far as memory consumption of the program is concerned. Let us look at a slightly better approach to doing level order traversal.&lt;/p&gt;&lt;figure name=&quot;ffe2&quot; id=&quot;ffe2&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/752ccbd0cd09818967ca8643874a1ea4.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;a63c&quot; id=&quot;a63c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The idea here is that we don’t store any additional information with the nodes being pushed into the queue. We use a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;None&lt;/code&gt; object to mark the end of a given level. We don’t know the size of any level before hand except for the first level, which just has our &lt;code class=&quot;markup--code markup--p-code&quot;&gt;source&lt;/code&gt; node.&lt;/p&gt;&lt;p name=&quot;af52&quot; id=&quot;af52&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, we start the queue with &lt;code class=&quot;markup--code markup--p-code&quot;&gt;[source, None]&lt;/code&gt; and we keep popping elements. Every time we encounter a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;None&lt;/code&gt; element, we know that a level has ended and a new one has started. We push another &lt;code class=&quot;markup--code markup--p-code&quot;&gt;None&lt;/code&gt; to mark the end of this new level.&lt;/p&gt;&lt;p name=&quot;5d28&quot; id=&quot;5d28&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Consider a very simple graph here, and then we will dry run this through the graph.&lt;/p&gt;&lt;figure name=&quot;566e&quot; id=&quot;566e&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 759px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 108.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*TYLcK8LGHr2CfeNZ1CBg7w.png&quot; data-width=&quot;1336&quot; data-height=&quot;1448&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*TYLcK8LGHr2CfeNZ1CBg7w.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;pre name=&quot;6769&quot; id=&quot;6769&quot; class=&quot;graf graf--pre graf-after--figure&quot;&gt;**************************************************** LEVEL 0 begins&lt;br&gt;level = 0, queue = [A, None]&lt;br&gt;level = 0, pop, A, push, B, C, queue = [None, B, C]&lt;br&gt;pop None ******************************************* LEVEL 1 begins&lt;br&gt;push None&lt;br&gt;level = 1, queue = [B, C, None]&lt;br&gt;level = 1, pop, B, push, C, D, F, queue = [C, None, C, D, F]&lt;br&gt;level = 1, pop, C, push, D, D (lol!), queue = [None, C, D, F, D, D]&lt;br&gt;pop None ******************************************* LEVEL 2 begins&lt;br&gt;push None&lt;br&gt;level = 2, queue = [C, D, F, D, D, None] .... and so on&lt;/pre&gt;&lt;p name=&quot;6714&quot; id=&quot;6714&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;I hope this sums up the algorithm pretty well. This certainly is a neat trick to do level order traversal, keep track of the levels, and not encounter too much of a memory concern. This certainly reduces the memory footprint of the code.&lt;/p&gt;&lt;p name=&quot;cc40&quot; id=&quot;cc40&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Don’t get complacent now thinking this is a great improvement.&lt;/p&gt;&lt;p name=&quot;c7ab&quot; id=&quot;c7ab&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It is, but you should be asking two questions:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;37cc&quot; id=&quot;37cc&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;How big of an improvement is this?&lt;/li&gt;&lt;li name=&quot;dff9&quot; id=&quot;dff9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Can we do better?&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;37ed&quot; id=&quot;37ed&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;I will answer both of these questions now starting with the second question. The answer to that is Yes!&lt;/p&gt;&lt;p name=&quot;c688&quot; id=&quot;c688&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We can do one better here and completely do away with the need for the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;None&lt;/code&gt; in the queue. The motivation for this approach comes from the previous approach itself.&lt;/p&gt;&lt;p name=&quot;f833&quot; id=&quot;f833&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you look closely at the dry run above, you can see that every time we pop a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;None&lt;/code&gt;, one level is finished and the other one is ready for processing. The important thing is that an entire next level exists in the queue at the time of popping of a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;None&lt;/code&gt; . We can make use of this idea of considering the queue size into the traversal logic.&lt;/p&gt;&lt;p name=&quot;d75b&quot; id=&quot;d75b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Here is the pseudo code for this improved algorithm:&lt;/p&gt;&lt;pre name=&quot;04b2&quot; id=&quot;04b2&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;queue = Queue()&lt;br&gt;queue.push(S)&lt;br&gt;level = 0&lt;br&gt;while queue is not empty {&lt;br&gt;      size = queue.size()&lt;br&gt;      // size represents the number of elements in the current level&lt;br&gt;      for i in 1..size {&lt;br&gt;          element = queue.pop()&lt;br&gt;          // Process element here&lt;br&gt;          // Perform a series of queue.push() operations here&lt;/pre&gt;&lt;pre name=&quot;4057&quot; id=&quot;4057&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;      level += 1&lt;/pre&gt;&lt;p name=&quot;16b4&quot; id=&quot;16b4&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;And here is the code for the same.&lt;/p&gt;&lt;figure name=&quot;b9e6&quot; id=&quot;b9e6&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/c656c837cfa21115e8f05aaaef0056e9.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;8c97&quot; id=&quot;8c97&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The pseudo code is self explanatory. We essentially do away with the need for an extra &lt;code class=&quot;markup--code markup--p-code&quot;&gt;None&lt;/code&gt; element per level and instead make use of the queue’s size to change levels. This would also lead to improvement over the last method, but how much?&lt;/p&gt;&lt;p name=&quot;f0a6&quot; id=&quot;f0a6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Have a look at the following Jupyter Notebook to see the memory difference between the three methods.&lt;/p&gt;&lt;figure name=&quot;106a&quot; id=&quot;106a&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/34dbb527af37ba4d9da8076d9039767c.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;2b06&quot; id=&quot;2b06&quot; class=&quot;graf graf--li graf-after--figure&quot;&gt;We track the maximum size of the queue at any time by considering the sum of sizes of individual queue elements.&lt;/li&gt;&lt;li name=&quot;fcd8&quot; id=&quot;fcd8&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;According to Python’s documentation, &lt;code class=&quot;markup--code markup--li-code&quot;&gt;sys.getsizeof&lt;/code&gt; returns the object’s pointer or reference’s size in bytes. So, we saved almost 4.4Kb space &lt;code class=&quot;markup--code markup--li-code&quot;&gt;(20224 — 15800 bytes)&lt;/code&gt; by switching to the &lt;code class=&quot;markup--code markup--li-code&quot;&gt;None&lt;/code&gt; method from the original level order traversal method. This is just the memory savings for this random example, and we went only until the 5th level in the traversal.&lt;/li&gt;&lt;li name=&quot;e30f&quot; id=&quot;e30f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The final method only gives an improvement of 16 bytes over the &lt;code class=&quot;markup--code markup--li-code&quot;&gt;None&lt;/code&gt; method. This is because we got rid of just 4 &lt;code class=&quot;markup--code markup--li-code&quot;&gt;None&lt;/code&gt; objects which were being used to mark the 4 levels (apart from the first one) that we processed. Each pointer’s size (pointer to an object) is 4 bytes in Python on a 32 bit system.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;82a9&quot; id=&quot;82a9&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Now that we have all these interesting multi-path routes from our source to our destination and highly efficient level order traversal algorithms to solve it, we can look at a more lucrative problem to solve using our very own BFS.&lt;/p&gt;&lt;p name=&quot;eb69&quot; id=&quot;eb69&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What’s the cheapest flight route from my source to a given destination? This is something everybody would be instantly interested in. I mean who doesn’t want to save some bucks?&lt;/p&gt;&lt;h3 name=&quot;c5b7&quot; id=&quot;c5b7&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Shortest Path from a given source to destination&lt;/h3&gt;&lt;p name=&quot;d7cc&quot; id=&quot;d7cc&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;There’s not much description to give for the problem statement. We just need to find the shortest path and make the end user happy.&lt;/p&gt;&lt;p name=&quot;b25d&quot; id=&quot;b25d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Algorithmically, given a weighted directed graph, we need to find the shortest path from source to destination. Shortest or cheapest would be one and the same thing from the point of the view of the algorithm.&lt;/p&gt;&lt;p name=&quot;e1ea&quot; id=&quot;e1ea&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We will not go into describing a possible BFS solution to this problem because such a solution would be intractable. Let us look at the graph below to understand why that is the case.&lt;/p&gt;&lt;figure name=&quot;e200&quot; id=&quot;e200&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 1032px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 147.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*ZaqHLSc9r19WVqSE_YLAPg.png&quot; data-width=&quot;1158&quot; data-height=&quot;1708&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*ZaqHLSc9r19WVqSE_YLAPg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;da53&quot; id=&quot;da53&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We say that BFS is the algorithm to use if we want to find the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;shortest path&lt;/strong&gt; in an &lt;a href=&quot;https://medium.freecodecamp.org/deep-dive-into-graph-traversals-227a90c6a261&quot; data-href=&quot;https://medium.freecodecamp.org/deep-dive-into-graph-traversals-227a90c6a261&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;undirected, unweighted graph&lt;/a&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;. &lt;/em&gt;&lt;/strong&gt;The claim for BFS is that the first time a node is discovered during the traversal, that distance from the source would give us the shortest path.&lt;/p&gt;&lt;p name=&quot;28ee&quot; id=&quot;28ee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The same cannot be said for a weighted graph. Consider the graph above. If say we were to find the shortest path from the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A&lt;/code&gt; to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;B&lt;/code&gt; in the undirected version of the graph, then the shortest path would be the direct link between A and B. So, the shortest path would be of length &lt;code class=&quot;markup--code markup--p-code&quot;&gt;1&lt;/code&gt; and BFS would correctly find this for us.&lt;/p&gt;&lt;p name=&quot;b91f&quot; id=&quot;b91f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, we are dealing with a weighted graph here. So, the first discovery of a node during traversal &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;does not guarantee&lt;/strong&gt; the shortest path for that node. For example, in the diagram above, the node &lt;code class=&quot;markup--code markup--p-code&quot;&gt;B&lt;/code&gt; would be discovered initially because it is the neighbor of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A&lt;/code&gt; and the cost associated with this path (an edge in this case) would be &lt;code class=&quot;markup--code markup--p-code&quot;&gt;25&lt;/code&gt; . But, this is not the shortest path. The shortest path is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;A --&amp;gt; M --&amp;gt; E --&amp;gt; B&lt;/code&gt; of length &lt;code class=&quot;markup--code markup--p-code&quot;&gt;10&lt;/code&gt;.&lt;/p&gt;&lt;p name=&quot;4e90&quot; id=&quot;4e90&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Breadth first search has no way of knowing if a particular discovery of a node would give us the shortest path to that node. And so, the only possible way for BFS (or DFS) to find the shortest path in a weighted graph is to search the entire graph and keep recording the minimum distance from source to the destination vertex.&lt;/p&gt;&lt;p name=&quot;a88b&quot; id=&quot;a88b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This solution is not feasible for a huge network like our flight network that would have potentially thousands of nodes.&lt;/p&gt;&lt;p name=&quot;9441&quot; id=&quot;9441&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We won’t go into the details of how we can solve this. That is out of scope for this article.&lt;/p&gt;&lt;p name=&quot;6cc2&quot; id=&quot;6cc2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What if I told you that BFS is just the right algorithm to find the shortest path in a weighted graph &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;with a slight constraint&lt;/strong&gt; ?&lt;/p&gt;&lt;figure name=&quot;f3e3&quot; id=&quot;f3e3&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;iframe src=&quot;https://giphy.com/embed/a5viI92PAF89q/twitter/iframe&quot; width=&quot;435&quot; height=&quot;300&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://giphy.com/gifs/reaction-a5viI92PAF89q&quot; data-href=&quot;https://giphy.com/gifs/reaction-a5viI92PAF89q&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://giphy.com/gifs/reaction-a5viI92PAF89q&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 name=&quot;c3c6&quot; id=&quot;c3c6&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Constrained Shortest Paths&lt;/h3&gt;&lt;p name=&quot;b293&quot; id=&quot;b293&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Since the graph we would have for the flight network is humongous, we know that exploring it completely is not really a possibility.&lt;/p&gt;&lt;p name=&quot;46da&quot; id=&quot;46da&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Consider the problem of shortest paths from the customer’s perspective. When you want to book a flight, these are the following options you ideally consider:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;c75b&quot; id=&quot;c75b&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;It shouldn’t be too long a flight.&lt;/li&gt;&lt;li name=&quot;32cd&quot; id=&quot;32cd&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;It should be under your budget (Very Important).&lt;/li&gt;&lt;li name=&quot;ab5b&quot; id=&quot;ab5b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;It may have multiple stops but not more than &lt;code class=&quot;markup--code markup--li-code&quot;&gt;K&lt;/code&gt; where &lt;code class=&quot;markup--code markup--li-code&quot;&gt;K&lt;/code&gt; can vary from person to person.&lt;/li&gt;&lt;li name=&quot;a964&quot; id=&quot;a964&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Finally we have personal preferences which involve things like lounge access, food quality, layover locations, and average leg room.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;002e&quot; id=&quot;002e&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;The important point to consider here is the third one above: it may have multiple stops, but not more than &lt;code class=&quot;markup--code markup--p-code&quot;&gt;K&lt;/code&gt; where &lt;code class=&quot;markup--code markup--p-code&quot;&gt;K&lt;/code&gt; can vary from person to person.&lt;/p&gt;&lt;p name=&quot;24be&quot; id=&quot;24be&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A customer wants the cheapest flight route, but they also don’t want say 20 stops in between their source and destination. A customer might be okay with a maximum of 3 stops, or in extreme cases maybe even 4 — but not more than that.&lt;/p&gt;&lt;p name=&quot;7a50&quot; id=&quot;7a50&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We would want an application that would find out the cheapest flight route with &lt;a href=&quot;https://leetcode.com/problems/cheapest-flights-within-k-stops/description/&quot; data-href=&quot;https://leetcode.com/problems/cheapest-flights-within-k-stops/description/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;at most K stops&lt;/a&gt; for a given source and destination.&lt;/p&gt;&lt;figure name=&quot;a46b&quot; id=&quot;a46b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 412px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 58.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*4_xEqai9idr89T1L6bHfeQ.png&quot; data-width=&quot;2176&quot; data-height=&quot;1280&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*4_xEqai9idr89T1L6bHfeQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: Leetcode.com&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;fb2d&quot; id=&quot;fb2d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This question from LeetCode has been the primary motivation for me to write this article. I strongly recommend going through the question once and not only relying on the snapshot above.&lt;/p&gt;&lt;p name=&quot;c64f&quot; id=&quot;c64f&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Why would BFS work here?” one might ask. “This is also a weighted graph and the same reason for the failure of BFS that we discussed in the previous section should apply here.” NO!&lt;/p&gt;&lt;p name=&quot;5b01&quot; id=&quot;5b01&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The number of levels that the search would go to is limited by the value &lt;code class=&quot;markup--code markup--p-code&quot;&gt;K&lt;/code&gt; in the question or in the description provided at the start of section. So, essentially, we would be trying to find the shortest path, but we won’t have to explore the entire graph as such. We will just go up to the level &lt;code class=&quot;markup--code markup--p-code&quot;&gt;K&lt;/code&gt;.&lt;/p&gt;&lt;p name=&quot;2532&quot; id=&quot;2532&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;From a real life scenario, the value of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;K&lt;/code&gt; would be under 5 for any sane traveler 😝.&lt;/p&gt;&lt;p name=&quot;f0ee&quot; id=&quot;f0ee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let us look at the pseudo-code for the algorithm:&lt;/p&gt;&lt;pre name=&quot;5d09&quot; id=&quot;5d09&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;def bfs(source, destination, K):&lt;br&gt;      min_cost = dictionary representing min cost under K stops for each node reachable from source. &lt;/pre&gt;&lt;pre name=&quot;0b6b&quot; id=&quot;0b6b&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;      set min_cost of source to be 0&lt;/pre&gt;&lt;pre name=&quot;9c6b&quot; id=&quot;9c6b&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;      Q = queue()&lt;br&gt;      Q.push(source)&lt;br&gt;      stops = 0&lt;br&gt;      while Q is not empty {&lt;/pre&gt;&lt;pre name=&quot;a8ee&quot; id=&quot;a8ee&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;           size = Q.size&lt;br&gt;           for i in range 1..size {&lt;br&gt;                 element = Q.pop() &lt;/pre&gt;&lt;pre name=&quot;78d5&quot; id=&quot;78d5&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;                 if element == destination then continue&lt;/pre&gt;&lt;pre name=&quot;fe6c&quot; id=&quot;fe6c&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;                 for neighbor in adjacency list of element {&lt;br&gt;                        if stops == K and neighbor != destination        then continue  &lt;/pre&gt;&lt;pre name=&quot;d1d6&quot; id=&quot;d1d6&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;                        if min_cost of neighbor improves, update and add back to the queue.&lt;br&gt;                }&lt;br&gt;           }    &lt;br&gt;           stops ++ &lt;br&gt;      }&lt;/pre&gt;&lt;p name=&quot;4c7a&quot; id=&quot;4c7a&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This again is level order traversal and the approach being used here is the one that makes use of the queue’s size at every level. Let us look at a commented version of the code to solve this problem.&lt;/p&gt;&lt;figure name=&quot;6046&quot; id=&quot;6046&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/4655b45ae1d93e95390f5bcee80116cf.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;fae8&quot; id=&quot;fae8&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Essentially, we keep track of the minimum distance of every node from the given source. The minimum distance for the source would be 0 and +inf for all others initially.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;7d18&quot; id=&quot;7d18&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Whenever we encounter a node, we check if the current minimum path length can be improved or not. If it can be improved, that means that we have found an alternate path from source to this vertex with cheaper cost — a cheaper flight route until this vertex. We queue this vertex again so that locations and nodes reachable from this vertex on are updated (may or may not be) as well.&lt;/p&gt;&lt;p name=&quot;6bfa&quot; id=&quot;6bfa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The key thing is this:&lt;/p&gt;&lt;pre name=&quot;96b5&quot; id=&quot;96b5&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;# No need to update the minimum cost if we have already exhausted our K stops. &lt;br&gt;if stops == K and neighbor != dst:&lt;br&gt;    continue&lt;/pre&gt;&lt;p name=&quot;3a15&quot; id=&quot;3a15&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;So we just popped the a node represented by &lt;code class=&quot;markup--code markup--p-code&quot;&gt;element&lt;/code&gt; in the code and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;neighbor&lt;/code&gt; can either be a destination or a random other node. If we have already exhausted our &lt;code class=&quot;markup--code markup--p-code&quot;&gt;K&lt;/code&gt; stops with the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;element&lt;/code&gt; being the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Kth&lt;/code&gt; stop, then we shouldn’t process and update (possibly) the minimum distance for &lt;code class=&quot;markup--code markup--p-code&quot;&gt;neighbor&lt;/code&gt;. This would violate our maximum &lt;code class=&quot;markup--code markup--p-code&quot;&gt;K&lt;/code&gt; stops condition in that case.&lt;/p&gt;&lt;p name=&quot;4518&quot; id=&quot;4518&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As it turns out, I solved this problem originally using Dynamic Programming and it took around 165ms to run on the LeetCode platform. I ran using BFS and it was blazing fast with just 45ms to execute. Motivation enough to write this article for you guys.&lt;/p&gt;&lt;p name=&quot;5fbd&quot; id=&quot;5fbd&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;I hope you were able to derive some benefit from this article on Breadth First Search and some of its applications. The major focus was to showcase its application to shortest paths in a weighted graph under some constraints 😃.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;
</content>
 </entry>
 
 <entry>
   <title>A deep dive into part-of-speech tagging using the Viterbi algorithm</title>
   <link href="http://localhost:4000/2018/06/08/A-deep-dive-into-part-of-speech-tagging-using-the-Viterbi-algorithm-17c8de32e8bc/"/>
   <updated>2018-06-08T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/06/08/A-deep-dive-into-part-of-speech-tagging-using-the-Viterbi-algorithm-17c8de32e8bc</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;A deep dive into part-of-speech tagging using the Viterbi algorithm&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;A deep dive into part-of-speech tagging using the Viterbi algorithm&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
by Sachin Malhotra and Divya Godayal
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;fd85&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;74a2&quot; id=&quot;74a2&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;div name=&quot;cc82&quot; id=&quot;cc82&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;by &lt;/em&gt;&lt;a href=&quot;https://medium.com/@sachinmalhotra&quot; data-href=&quot;https://medium.com/@sachinmalhotra&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Sachin Malhotra&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; and &lt;/em&gt;&lt;a href=&quot;https://medium.com/@divyagodayal&quot; data-href=&quot;https://medium.com/@divyagodayal&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Divya Godayal&lt;/em&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;6d36&quot; id=&quot;6d36&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 59.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*x-5ZBtUvlD78BOMuMnMAbg.png&quot; data-width=&quot;2894&quot; data-height=&quot;1730&quot; data-is-featured=&quot;true&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*x-5ZBtUvlD78BOMuMnMAbg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://www.vocal.com/echo-cancellation/viterbi-algorithm-in-speech-enhancement-and-hmm/&quot; data-href=&quot;https://www.vocal.com/echo-cancellation/viterbi-algorithm-in-speech-enhancement-and-hmm/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.vocal.com/echo-cancellation/viterbi-algorithm-in-speech-enhancement-and-hmm/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;230d&quot; id=&quot;230d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Welcome back, Caretaker!&lt;/p&gt;&lt;p name=&quot;c33b&quot; id=&quot;c33b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In case you’ve forgotten the &lt;a href=&quot;https://medium.freecodecamp.org/an-introduction-to-part-of-speech-tagging-and-the-hidden-markov-model-953d45338f24&quot; data-href=&quot;https://medium.freecodecamp.org/an-introduction-to-part-of-speech-tagging-and-the-hidden-markov-model-953d45338f24&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;problem&lt;/a&gt; we were trying to tackle in the previous article, let us revise it for you.&lt;/p&gt;&lt;p name=&quot;921f&quot; id=&quot;921f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So there’s this naughty kid Peter and he’s going to pester his new caretaker, you!&lt;/p&gt;&lt;p name=&quot;c485&quot; id=&quot;c485&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As a caretaker, one of the most important tasks for you is to tuck Peter in bed and make sure he is sound asleep. Once you’ve tucked him in, you want to make sure that he’s actually asleep and not up to some mischief.&lt;/p&gt;&lt;p name=&quot;238d&quot; id=&quot;238d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You cannot, however, enter the room again, as that would surely wake Peter up. All you can hear are the noises that might come from the room.&lt;/p&gt;&lt;p name=&quot;b336&quot; id=&quot;b336&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Either the room is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;quiet&lt;/strong&gt; or there is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;noise&lt;/strong&gt; coming from the room. These are your states.&lt;/p&gt;&lt;p name=&quot;2422&quot; id=&quot;2422&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;All you have as the caretaker are:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;d043&quot; id=&quot;d043&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;a set of observations, which is basically a sequence containing &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;noise&lt;em class=&quot;markup--em markup--li-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;or &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;quiet&lt;/strong&gt; over time, and&lt;/li&gt;&lt;li name=&quot;c16c&quot; id=&quot;c16c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;A state diagram provided by Peter’s mom — who happens to be a neurological scientist — that contains all the different sets of probabilities that you can use to solve the problem defined below.&lt;/li&gt;&lt;/ul&gt;&lt;h3 name=&quot;5e58&quot; id=&quot;5e58&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;The problem&lt;/h3&gt;&lt;p name=&quot;da1b&quot; id=&quot;da1b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Given the state diagram and a sequence of N observations over time, we need to tell the state of the baby at the current point in time. Mathematically, we have N observations over times &lt;code class=&quot;markup--code markup--p-code&quot;&gt;t0, t1, t2 .... tN&lt;/code&gt; . We want to find out if Peter would be awake or asleep, or rather which state is more probable at time &lt;code class=&quot;markup--code markup--p-code&quot;&gt;tN+1&lt;/code&gt; .&lt;/p&gt;&lt;p name=&quot;0d5a&quot; id=&quot;0d5a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In case any of this seems like Greek to you, go read the &lt;a href=&quot;https://medium.com/@divyagodayal/part-of-speech-tagging-hmms-part-1-953d45338f24&quot; data-href=&quot;https://medium.com/@divyagodayal/part-of-speech-tagging-hmms-part-1-953d45338f24&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;previous article&lt;/a&gt; to brush up on the Markov Chain Model, Hidden Markov Models, and Part of Speech Tagging.&lt;/p&gt;&lt;figure name=&quot;ea8f&quot; id=&quot;ea8f&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 331px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 47.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;0*_i4JqwAZ9DdjO5Kt.&quot; data-width=&quot;748&quot; data-height=&quot;354&quot; src=&quot;https://cdn-images-1.medium.com/max/800/0*_i4JqwAZ9DdjO5Kt.&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;The state diagram that Peter’s mom gave you before leaving.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;ab7f&quot; id=&quot;ab7f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In that &lt;a href=&quot;https://medium.com/@divyagodayal/part-of-speech-tagging-hmms-part-1-953d45338f24&quot; data-href=&quot;https://medium.com/@divyagodayal/part-of-speech-tagging-hmms-part-1-953d45338f24&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;previous article&lt;/a&gt;, we had briefly modeled the problem of Part of Speech tagging using the Hidden Markov Model.&lt;/p&gt;&lt;p name=&quot;031c&quot; id=&quot;031c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The problem of Peter being asleep or not is just an example problem taken up for a better understanding of some of the core concepts involved in these two articles. At the core, the articles deal with solving the Part of Speech tagging problem using the Hidden Markov Models.&lt;/p&gt;&lt;p name=&quot;1b34&quot; id=&quot;1b34&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, before moving on to the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Viterbi Algorithm&lt;/strong&gt;, let’s first look at a much more detailed explanation of how the tagging problem can be modeled using HMMs.&lt;/p&gt;&lt;h3 name=&quot;19a7&quot; id=&quot;19a7&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Generative Models and the Noisy Channel Model&lt;/h3&gt;&lt;p name=&quot;55cb&quot; id=&quot;55cb&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;A lot of problems in Natural Language Processing are solved using a supervised learning approach.&lt;/p&gt;&lt;p name=&quot;0b53&quot; id=&quot;0b53&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Supervised problems in machine learning are defined as follows. We assume training examples &lt;code class=&quot;markup--code markup--p-code&quot;&gt;(x(1), y(1))&lt;/code&gt;. . .&lt;code class=&quot;markup--code markup--p-code&quot;&gt;(x(m) , y(m))&lt;/code&gt;, where each example consists of an input x(i) paired with a label y(i) . We use X to refer to the set of possible inputs, and Y to refer to the set of possible labels. Our task is to learn a function f : X → Y that maps any input x to a label f(x).&lt;/p&gt;&lt;p name=&quot;cb85&quot; id=&quot;cb85&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In tagging problems, each x(i) would be a sequence of words &lt;code class=&quot;markup--code markup--p-code&quot;&gt;X1 X2 X3 …. Xn(i)&lt;/code&gt;, and each y(i) would be a sequence of tags &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Y1 Y2 Y3 … Yn(i)&lt;/code&gt;(we use n(i)to refer to the length of the i’th training example). X would refer to the set of all sequences x1 . . . xn, and Y would be the set of all tag sequences y1 . . . yn. Our task would be to learn a function f : X → Y that maps sentences to tag sequences.&lt;/p&gt;&lt;p name=&quot;19dd&quot; id=&quot;19dd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;An intuitive approach to get an estimate for this problem is to use conditional probabilities. &lt;code class=&quot;markup--code markup--p-code&quot;&gt;p(y | x)&lt;/code&gt; which is the probability of the output y given an input x. The parameters of the model would be estimated using the training samples. Finally, given an unknown input &lt;code class=&quot;markup--code markup--p-code&quot;&gt;x&lt;/code&gt; we would like to find&lt;/p&gt;&lt;p name=&quot;78b5&quot; id=&quot;78b5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;f(x) = arg max(p(y | x)) ∀y ∊ Y&lt;/code&gt;&lt;/p&gt;&lt;p name=&quot;f448&quot; id=&quot;f448&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This here is the conditional model to solve this generic problem given the training data. Another approach that is mostly adopted in machine learning and natural language processing is to use a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;generative model&lt;em class=&quot;markup--em markup--p-em&quot;&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;b341&quot; id=&quot;b341&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Rather than directly estimating the conditional distribution &lt;code class=&quot;markup--code markup--p-code&quot;&gt;p(y|x)&lt;/code&gt;, in generative models we instead model the joint probability &lt;code class=&quot;markup--code markup--p-code&quot;&gt;p(x, y)&lt;/code&gt; over all the (x, y) pairs.&lt;/p&gt;&lt;p name=&quot;3565&quot; id=&quot;3565&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We can further decompose the joint probability into simpler values using Bayes’ rule:&lt;/p&gt;&lt;figure name=&quot;b560&quot; id=&quot;b560&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 158px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 22.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*vqr5JCpC4lkhva03gtTLIg.png&quot; data-width=&quot;778&quot; data-height=&quot;176&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*vqr5JCpC4lkhva03gtTLIg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;c03e&quot; id=&quot;c03e&quot; class=&quot;graf graf--li graf-after--figure&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;p(y)&lt;/code&gt; is the prior probability of any input belonging to the label y.&lt;/li&gt;&lt;li name=&quot;9b27&quot; id=&quot;9b27&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;p(x | y)&lt;/code&gt; is the conditional probability of input x given the label y.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;7b91&quot; id=&quot;7b91&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;We can use this decomposition and the Bayes rule to determine the conditional probability.&lt;/p&gt;&lt;figure name=&quot;c2ee&quot; id=&quot;c2ee&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 205px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 29.299999999999997%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*omTbvXw1CsMe6EywVZ9TUg.png&quot; data-width=&quot;1002&quot; data-height=&quot;294&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*omTbvXw1CsMe6EywVZ9TUg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;4787&quot; id=&quot;4787&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Remember, we wanted to estimate the function&lt;/p&gt;&lt;pre name=&quot;4fb3&quot; id=&quot;4fb3&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;f(x) = arg max( p(y|x) ) &lt;code class=&quot;markup--code markup--pre-code&quot;&gt;∀y ∊ Y&lt;/code&gt;&lt;/pre&gt;&lt;pre name=&quot;94cc&quot; id=&quot;94cc&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;f(x) = arg max( p(y) * p(x | y) )&lt;/pre&gt;&lt;p name=&quot;0f0c&quot; id=&quot;0f0c&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The reason we skipped the denominator here is because the probability &lt;code class=&quot;markup--code markup--p-code&quot;&gt;p(x)&lt;/code&gt; remains the same no matter what the output label being considered. And so, from a computational perspective, it is treated as a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;normalization constant and is normally ignored.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;3731&quot; id=&quot;3731&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Models that decompose a joint probability into terms &lt;code class=&quot;markup--code markup--p-code&quot;&gt;p(y)&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;p(x|y) &lt;/code&gt;are often called &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;noisy-channel models&lt;/strong&gt;. Intuitively, when we see a test example x, we assume that it has been generated in two steps:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;3398&quot; id=&quot;3398&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;first, a label y has been chosen with probability p(y)&lt;/li&gt;&lt;li name=&quot;9a04&quot; id=&quot;9a04&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;second, the example x has been generated from the distribution p(x|y). The model p(x|y) can be interpreted as a &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;“channel” &lt;/strong&gt;which takes a label y as its input, and corrupts it to produce x as its output.&lt;/li&gt;&lt;/ol&gt;&lt;h3 name=&quot;56be&quot; id=&quot;56be&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;Generative Part of Speech Tagging Model&lt;/h3&gt;&lt;p name=&quot;601d&quot; id=&quot;601d&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let us assume a finite set of words V and a finite sequence of tags K. Then the set S will be the set of all sequence, tags pairs &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&amp;lt;x1, x2, x3 ... xn, y1, y2, y3, ..., yn&amp;gt;&lt;/code&gt; such that n &amp;gt; 0 &lt;code class=&quot;markup--code markup--p-code&quot;&gt;∀x ∊ V&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;∀y ∊ K&lt;/code&gt; .&lt;/p&gt;&lt;p name=&quot;edd4&quot; id=&quot;edd4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A generative tagging model is then the one where&lt;/p&gt;&lt;figure name=&quot;c5ef&quot; id=&quot;c5ef&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 140px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 20%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*uYnEH6xCNZN2tumL9gx10Q.png&quot; data-width=&quot;1460&quot; data-height=&quot;292&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*uYnEH6xCNZN2tumL9gx10Q.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;3f28&quot; id=&quot;3f28&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;2.&lt;/p&gt;&lt;figure name=&quot;a670&quot; id=&quot;a670&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 181px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 25.900000000000002%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*AO6n9RB0drLb9jbrHPIKDQ.png&quot; data-width=&quot;1408&quot; data-height=&quot;364&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*AO6n9RB0drLb9jbrHPIKDQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;56f5&quot; id=&quot;56f5&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Given a generative tagging model, the function that we talked about earlier from input to output becomes&lt;/p&gt;&lt;figure name=&quot;c69e&quot; id=&quot;c69e&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 89px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 12.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*vlACvd9qk5twIw6NORx10A.png&quot; data-width=&quot;1554&quot; data-height=&quot;198&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*vlACvd9qk5twIw6NORx10A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;51e2&quot; id=&quot;51e2&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Thus for any given input sequence of words, the output is the highest probability tag sequence from the model. Having defined the generative model, we need to figure out three different things:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;42a7&quot; id=&quot;42a7&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;How exactly do we define the generative model probability &lt;code class=&quot;markup--code markup--li-code&quot;&gt;p(&amp;lt;x1, x2, x3 ... xn, y1, y2, y3, ..., yn&amp;gt;)&lt;/code&gt;&lt;/li&gt;&lt;li name=&quot;81fe&quot; id=&quot;81fe&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;How do we estimate the parameters of the model, and&lt;/li&gt;&lt;li name=&quot;8979&quot; id=&quot;8979&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;How do we efficiently calculate&lt;/li&gt;&lt;/ol&gt;&lt;figure name=&quot;fc69&quot; id=&quot;fc69&quot; class=&quot;graf graf--figure graf-after--li&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 89px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 12.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*vlACvd9qk5twIw6NORx10A.png&quot; data-width=&quot;1554&quot; data-height=&quot;198&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*vlACvd9qk5twIw6NORx10A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;b92d&quot; id=&quot;b92d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Let us look at how we can answer these three questions side by side, once for our example problem and then for the actual problem at hand: part of speech tagging.&lt;/p&gt;&lt;h3 name=&quot;e5c2&quot; id=&quot;e5c2&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Defining the Generative Model&lt;/h3&gt;&lt;p name=&quot;8aa0&quot; id=&quot;8aa0&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let us first look at how we can estimate the probability &lt;code class=&quot;markup--code markup--p-code&quot;&gt;p(x1 .. xn, y1 .. yn)&lt;/code&gt; using the HMM.&lt;/p&gt;&lt;p name=&quot;6395&quot; id=&quot;6395&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We can have any N-gram HMM which considers events in the previous window of size N.&lt;/p&gt;&lt;p name=&quot;4c6e&quot; id=&quot;4c6e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The formulas provided hereafter are corresponding to a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Trigram &lt;/strong&gt;Hidden Markov Model.&lt;/p&gt;&lt;h4 name=&quot;5ebc&quot; id=&quot;5ebc&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Trigram Hidden Markov Model&lt;/h4&gt;&lt;p name=&quot;b6b6&quot; id=&quot;b6b6&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;A trigram Hidden Markov Model can be defined using&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;29ee&quot; id=&quot;29ee&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;A finite set of states.&lt;/li&gt;&lt;li name=&quot;82bd&quot; id=&quot;82bd&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;A sequence of observations.&lt;/li&gt;&lt;li name=&quot;370a&quot; id=&quot;370a&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;q(s|u, v)&lt;br&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Transition probability&lt;/strong&gt; defined as the probability of a state “s” appearing right after observing “u” and “v” in the sequence of observations.&lt;/li&gt;&lt;li name=&quot;03e5&quot; id=&quot;03e5&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;e(x|s)&lt;br&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Emission probability&lt;/strong&gt; defined as the probability of making an observation x given that the state was s.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;e9a6&quot; id=&quot;e9a6&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Then, the generative model probability would be estimated as&lt;/p&gt;&lt;figure name=&quot;5ef3&quot; id=&quot;5ef3&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 98px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 14.000000000000002%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*T_g39RuOYYway6_mFvp70Q.png&quot; data-width=&quot;1998&quot; data-height=&quot;280&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*T_g39RuOYYway6_mFvp70Q.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;0583&quot; id=&quot;0583&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;As for the baby sleeping problem that we are considering, we will have only two possible states: that the baby is either awake or he is asleep. The caretaker can make only two observations over time. Either there is noise coming in from the room or the room is absolutely quiet. The sequence of observations and states can be represented as follows:&lt;/p&gt;&lt;figure name=&quot;0730&quot; id=&quot;0730&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 365px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 52.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*BRQINXla9wqwjh8KyIpgOg.png&quot; data-width=&quot;1576&quot; data-height=&quot;822&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*BRQINXla9wqwjh8KyIpgOg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Observations and States over time for the baby sleeping problem&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;4f70&quot; id=&quot;4f70&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Coming on to the part of speech tagging problem, the states would be represented by the actual tags assigned to the words. The words would be our observations. The reason we say that the tags are our states is because in a Hidden Markov Model, the states are always hidden and all we have are the set of observations that are visible to us. Along similar lines, the sequence of states and observations for the part of speech tagging problem would be&lt;/p&gt;&lt;figure name=&quot;10ea&quot; id=&quot;10ea&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 299px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 42.699999999999996%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*GrNSK8Jtgh2_ABHYS9lbdA.png&quot; data-width=&quot;1574&quot; data-height=&quot;672&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*GrNSK8Jtgh2_ABHYS9lbdA.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Observations and States over time for the POS tagging problem&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 name=&quot;cad2&quot; id=&quot;cad2&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Estimating the model’s parameters&lt;/h3&gt;&lt;p name=&quot;9759&quot; id=&quot;9759&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We will assume that we have access to some training data. The training data consists of a set of examples where each example is a sequence consisting of the observations, every observation being associated with a state. Given this data, how do we estimate the parameters of the model?&lt;/p&gt;&lt;p name=&quot;2860&quot; id=&quot;2860&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Estimating the model’s parameters is done by reading various counts off of the training corpus we have, and then computing maximum likelihood estimates:&lt;/p&gt;&lt;figure name=&quot;69ce&quot; id=&quot;69ce&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 306px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 43.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*VgexfYbchSAZJ5fCwQqFOQ.png&quot; data-width=&quot;1226&quot; data-height=&quot;536&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*VgexfYbchSAZJ5fCwQqFOQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Transition probability and Emission probability for a Trigram HMM&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;26d1&quot; id=&quot;26d1&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We already know that the first term represents transition probability and the second term represents the emission probability. Let us look at what the four different counts mean in the terms above.&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;0c53&quot; id=&quot;0c53&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;c(u, v, s)&lt;/strong&gt; represents the trigram count of states u, v and s. Meaning it represents the number of times the three states u, v and s occurred together in that order in the training corpus.&lt;/li&gt;&lt;li name=&quot;c095&quot; id=&quot;c095&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;c(u, v)&lt;/strong&gt; following along similar lines as that of the trigram count, this is the bigram count of states u and v given the training corpus.&lt;/li&gt;&lt;li name=&quot;9ed4&quot; id=&quot;9ed4&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;c(s → x)&lt;/strong&gt; is the number of times in the training set that the state s and observation x are paired with each other. And finally,&lt;/li&gt;&lt;li name=&quot;12ef&quot; id=&quot;12ef&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;c(s)&lt;/strong&gt; is the prior probability of an observation being labelled as the state s.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;7f73&quot; id=&quot;7f73&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Let us look at a sample training set for the toy problem first and see the calculations for transition and emission probabilities using the same.&lt;/p&gt;&lt;p name=&quot;c34b&quot; id=&quot;c34b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The BLUE markings represent the transition probability, and RED is for emission probability calculations.&lt;/p&gt;&lt;p name=&quot;96e2&quot; id=&quot;96e2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Note that since the example problem only has two distinct states and two distinct observations, and given that the training set is very small, the calculations shown below for the example problem are using a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;bigram&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;HMM&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;instead of a trigram HMM.&lt;/p&gt;&lt;p name=&quot;a836&quot; id=&quot;a836&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Peter’s mother was maintaining a record of observations and states. And thus she even provided you with a training corpus to help you get the transition and emission probabilities.&lt;/p&gt;&lt;h4 name=&quot;361a&quot; id=&quot;361a&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Transition Probability Example:&lt;/h4&gt;&lt;figure name=&quot;94f5&quot; id=&quot;94f5&quot; class=&quot;graf graf--figure graf-after--h4&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 60px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 8.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*1KKb9HiSws-068YBfWjhgw.png&quot; data-width=&quot;1518&quot; data-height=&quot;130&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*1KKb9HiSws-068YBfWjhgw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Training Corpus&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure name=&quot;3dc7&quot; id=&quot;3dc7&quot; class=&quot;graf graf--figure graf-after--figure&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 336px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 48%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*VemATVV5YgmBZZZGxjzEQA.png&quot; data-width=&quot;1216&quot; data-height=&quot;584&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*VemATVV5YgmBZZZGxjzEQA.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Calculations for Awake appearing after Awake&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 name=&quot;dafd&quot; id=&quot;dafd&quot; class=&quot;graf graf--h4 graf-after--figure&quot;&gt;Emission Probability Example:&lt;/h4&gt;&lt;figure name=&quot;6834&quot; id=&quot;6834&quot; class=&quot;graf graf--figure graf-after--h4&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 60px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 8.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*aCPlU-ApNX0umWin7U3PBQ.png&quot; data-width=&quot;1518&quot; data-height=&quot;130&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*aCPlU-ApNX0umWin7U3PBQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Training corpus&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure name=&quot;2f00&quot; id=&quot;2f00&quot; class=&quot;graf graf--figure graf-after--figure&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 298px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 42.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*0umDSsoG676H66LkyHiM_Q.png&quot; data-width=&quot;1602&quot; data-height=&quot;682&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*0umDSsoG676H66LkyHiM_Q.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Calculations for observing ‘Quiet’ when the state is ‘Awake’&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;264a&quot; id=&quot;264a&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;That was quite simple, since the training set was very small. Let us look at a sample training set for our actual problem of part of speech tagging. Here we can consider a trigram HMM, and we will show the calculations accordingly.&lt;/p&gt;&lt;p name=&quot;8b49&quot; id=&quot;8b49&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We will use the following sentences as a corpus of training data (the notation word/TAG means word tagged with a specific part-of-speech tag).&lt;/p&gt;&lt;figure name=&quot;d335&quot; id=&quot;d335&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 479px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 68.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*E95LGOKw2YVumuZqk_uAJw.png&quot; data-width=&quot;1296&quot; data-height=&quot;886&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*E95LGOKw2YVumuZqk_uAJw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;c1f9&quot; id=&quot;c1f9&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The training set that we have is a tagged corpus of sentences. Every sentence consists of words tagged with their corresponding part of speech tags. eg:- eat/VB means that the word is “eat” and the part of speech tag in this sentence in this very context is “VB” i.e. Verb Phrase. Let us look at a sample calculation for transition probability and emission probability just like we saw for the baby sleeping problem.&lt;/p&gt;&lt;h4 name=&quot;a01c&quot; id=&quot;a01c&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h4-strong&quot;&gt;Transition Probability&lt;/strong&gt;&lt;/h4&gt;&lt;p name=&quot;18ea&quot; id=&quot;18ea&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Let’s say we want to calculate the transition probability q(IN | VB, NN). For this, we see how many times we see a trigram (VB,NN,IN) in the training corpus in that specific order. We then divide it by the total number of times we see the bigram (VB,NN) in the corpus.&lt;/p&gt;&lt;h4 name=&quot;12bc&quot; id=&quot;12bc&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h4-strong&quot;&gt;Emission Probability&lt;/strong&gt;&lt;/h4&gt;&lt;p name=&quot;1dcb&quot; id=&quot;1dcb&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Let’s say we want to find out the emission probability e(an | DT). For this, we see how many times the word “an” is tagged as “DT” in the corpus and divide it by the total number of times we see the tag “DT” in the corpus.&lt;/p&gt;&lt;figure name=&quot;9096&quot; id=&quot;9096&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 494px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 70.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*QLaaoZ1WPdWgWsPb7CFoSA.png&quot; data-width=&quot;1422&quot; data-height=&quot;1004&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*QLaaoZ1WPdWgWsPb7CFoSA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;d9a6&quot; id=&quot;d9a6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So if you look at these calculations, it shows that calculating the model’s parameters is not computationally expensive. That is, we don’t have to do multiple passes over the training data to calculate these parameters. All we need are a bunch of different counts, and a single pass over the training corpus should provide us with that.&lt;/p&gt;&lt;p name=&quot;c159&quot; id=&quot;c159&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s move on and look at the final step that we need to look at given a generative model. That step is efficiently calculating&lt;/p&gt;&lt;figure name=&quot;1385&quot; id=&quot;1385&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 89px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 12.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*vlACvd9qk5twIw6NORx10A.png&quot; data-width=&quot;1554&quot; data-height=&quot;198&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*vlACvd9qk5twIw6NORx10A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;cbbc&quot; id=&quot;cbbc&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We will be looking at the famous Viterbi Algorithm for this calculation.&lt;/p&gt;&lt;h3 name=&quot;fc2a&quot; id=&quot;fc2a&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Finding the most probable sequence — Viterbi Algorithm&lt;/h3&gt;&lt;p name=&quot;e7a7&quot; id=&quot;e7a7&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Finally, we are going to solve the problem of finding the most likely sequence of labels given a set of observations x1 … xn. That is, we are to find out&lt;/p&gt;&lt;figure name=&quot;3068&quot; id=&quot;3068&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 110px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 15.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*YjdFBbrDymwoCdf_wgfOFA.png&quot; data-width=&quot;700&quot; data-height=&quot;110&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*YjdFBbrDymwoCdf_wgfOFA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;9705&quot; id=&quot;9705&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The probability here is expressed in terms of the transition and emission probabilities that we learned how to calculate in the previous section of the article. Just to remind you, the formula for the probability of a sequence of labels given a sequence of observations over “n” time steps is&lt;/p&gt;&lt;figure name=&quot;9636&quot; id=&quot;9636&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 93px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 13.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*k3LxXJs2vmw5YT1dGlvMLw.png&quot; data-width=&quot;1160&quot; data-height=&quot;154&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*k3LxXJs2vmw5YT1dGlvMLw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;65da&quot; id=&quot;65da&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Before looking at an optimized algorithm to solve this problem, let us first look at a simple brute force approach to this problem. Basically, we need to find out the most probable label sequence given a set of observations out of a finite set of possible sequences of labels. Let’s look at the total possible number of sequences for a small example for our example problem and also for a part of speech tagging problem.&lt;/p&gt;&lt;p name=&quot;1480&quot; id=&quot;1480&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Say we have the following set of observations for the example problem.&lt;/p&gt;&lt;pre name=&quot;ce00&quot; id=&quot;ce00&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;Noise     Quiet     Noise&lt;/pre&gt;&lt;p name=&quot;9608&quot; id=&quot;9608&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;We have two possible labels {Asleep and Awake}. Some of the possible sequence of labels for the observations above are:&lt;/p&gt;&lt;pre name=&quot;1866&quot; id=&quot;1866&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;Awake      Awake     Awake&lt;/pre&gt;&lt;pre name=&quot;f50f&quot; id=&quot;f50f&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;Awake      Awake     Asleep&lt;/pre&gt;&lt;pre name=&quot;32c4&quot; id=&quot;32c4&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;Awake      Asleep    Awake&lt;/pre&gt;&lt;pre name=&quot;580f&quot; id=&quot;580f&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;Awake      Asleep    Asleep&lt;/pre&gt;&lt;p name=&quot;bacd&quot; id=&quot;bacd&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;In all we can have ²³ = 8 possible sequences. This might not seem like very many, but if we increase the number of observations over time, the number of sequences would increase exponentially. This is the case when we only had two possible labels. What if we have more? As is the case with part of speech tagging.&lt;/p&gt;&lt;p name=&quot;a3b5&quot; id=&quot;a3b5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For example, consider the sentence&lt;/p&gt;&lt;pre name=&quot;bf95&quot; id=&quot;bf95&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;the dog barks&lt;/pre&gt;&lt;p name=&quot;a6c4&quot; id=&quot;a6c4&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;and assuming that the set of possible tags are {D, N, V}, let us look at some of the possible tag sequences:&lt;/p&gt;&lt;pre name=&quot;f977&quot; id=&quot;f977&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;D     D     D&lt;br&gt;D     D     N&lt;br&gt;D     D     V&lt;br&gt;D     N     D&lt;br&gt;D     N     N&lt;br&gt;D     N     V ... etc&lt;/pre&gt;&lt;p name=&quot;c800&quot; id=&quot;c800&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Here, we would have ³³ = 27 possible tag sequences. And as you can see, the sentence was extremely short and the number of tags weren’t very many. In practice, we can have sentences that might be much larger than just three words. Then the number of unique labels at our disposal would also be too high to follow this enumeration approach and find the best possible tag sequence this way.&lt;/p&gt;&lt;p name=&quot;d340&quot; id=&quot;d340&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So the exponential growth in the number of sequences implies that for any reasonable length sentence, the brute force approach would not work out as it would take too much time to execute.&lt;/p&gt;&lt;p name=&quot;08d9&quot; id=&quot;08d9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead of this brute force approach, we will see that we can find the highest probable tag sequence efficiently using a dynamic programming algorithm known as the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Viterbi Algorithm.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;c823&quot; id=&quot;c823&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let us first define some terms that would be useful in defining the algorithm itself. We already know that the probability of a label sequence given a set of observations can be defined in terms of the transition probability and the emission probability. Mathematically, it is&lt;/p&gt;&lt;figure name=&quot;8a48&quot; id=&quot;8a48&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 91px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 13%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*JIqZ2wCdNB4FeTgd1Uz6yw.png&quot; data-width=&quot;1142&quot; data-height=&quot;148&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*JIqZ2wCdNB4FeTgd1Uz6yw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;5327&quot; id=&quot;5327&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Let us look at a truncated version of this which is&lt;/p&gt;&lt;figure name=&quot;3864&quot; id=&quot;3864&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 113px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 16.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*i8qSInkAqmK9deXrLTKw8g.png&quot; data-width=&quot;928&quot; data-height=&quot;150&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*i8qSInkAqmK9deXrLTKw8g.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;89ac&quot; id=&quot;89ac&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;and let us call this the cost of a sequence of length k.&lt;/p&gt;&lt;p name=&quot;3787&quot; id=&quot;3787&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So the definition of “r” is simply considering the first k terms off of the definition of probability where k ∊ {1..n} and for any label sequence y1…yk.&lt;/p&gt;&lt;p name=&quot;8af1&quot; id=&quot;8af1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Next we have the set S(k, u, v) which is basically the set of all label sequences of length k that end with the bigram (u, v) i.e.&lt;/p&gt;&lt;figure name=&quot;e4c9&quot; id=&quot;e4c9&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 43px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 6.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*VnH7pFyjnoBLPMc34RWD7Q.png&quot; data-width=&quot;1010&quot; data-height=&quot;62&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*VnH7pFyjnoBLPMc34RWD7Q.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;b841&quot; id=&quot;b841&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Finally, we define the term π(k, u, v) which is basically the sequence with the maximum cost.&lt;/p&gt;&lt;figure name=&quot;68a0&quot; id=&quot;68a0&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 100px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 14.299999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Mq4QjRUI5lVkVBdVjzDcGQ.png&quot; data-width=&quot;810&quot; data-height=&quot;116&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Mq4QjRUI5lVkVBdVjzDcGQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;412c&quot; id=&quot;412c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The main idea behind the Viterbi Algorithm is that we can calculate the values of the term π(k, u, v) efficiently in a recursive, memoized fashion. In order to define the algorithm recursively, let us look at the base cases for the recursion.&lt;/p&gt;&lt;pre name=&quot;2a54&quot; id=&quot;2a54&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;π(0, *, *) = 1&lt;/pre&gt;&lt;pre name=&quot;0f7d&quot; id=&quot;0f7d&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;π(0, u, v) = 0&lt;/pre&gt;&lt;p name=&quot;5145&quot; id=&quot;5145&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Since we are considering a trigram HMM, we would be considering all of the trigrams as a part of the execution of the Viterbi Algorithm.&lt;/p&gt;&lt;p name=&quot;309c&quot; id=&quot;309c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now, we can start the first trigram window from the first three words of the sentence but then the model would miss out on those trigrams where the first word or the first two words occurred independently. For that reason, we consider two special start symbols as &lt;code class=&quot;markup--code markup--p-code&quot;&gt;*&lt;/code&gt; and so our sentence becomes&lt;/p&gt;&lt;pre name=&quot;3d6a&quot; id=&quot;3d6a&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;*    *    x1   x2   x3   ......         xn&lt;/pre&gt;&lt;p name=&quot;f009&quot; id=&quot;f009&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;And the first trigram we consider then would be (*, *, x1) and the second one would be (*, x1, x2).&lt;/p&gt;&lt;p name=&quot;d26c&quot; id=&quot;d26c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we have all our terms in place, we can finally look at the recursive definition of the algorithm which is basically the heart of the algorithm.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;81ec&quot; id=&quot;81ec&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 514px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 51.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*OcNkv1g-V0s_YZR76D79sw.png&quot; data-width=&quot;2224&quot; data-height=&quot;1144&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*OcNkv1g-V0s_YZR76D79sw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;460f&quot; id=&quot;460f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This definition is clearly recursive, because we are trying to calculate one π term and we are using another one with a lower value of k in the recurrence relation for it.&lt;/p&gt;&lt;figure name=&quot;f4bd&quot; id=&quot;f4bd&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 55px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 7.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_AbNeEabGTVYBq4VbnbAQg.png&quot; data-width=&quot;1766&quot; data-height=&quot;138&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*_AbNeEabGTVYBq4VbnbAQg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;5999&quot; id=&quot;5999&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Every sequence would end with a special STOP symbol. For the trigram model, we would also have two special start symbols “*” in the beginning.&lt;/p&gt;&lt;p name=&quot;edf6&quot; id=&quot;edf6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Have a look at the pseudo-code for the entire algorithm.&lt;/p&gt;&lt;figure name=&quot;2f93&quot; id=&quot;2f93&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 330px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 47.199999999999996%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Vex29pOqTVPdtc7Wdz9tlw.png&quot; data-width=&quot;1852&quot; data-height=&quot;874&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Vex29pOqTVPdtc7Wdz9tlw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;d500&quot; id=&quot;d500&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The algorithm first fills in the π(k, u, v) values in using the recursive&lt;br&gt;definition. It then uses the identity described before to calculate the highest probability for any sequence.&lt;/p&gt;&lt;p name=&quot;3362&quot; id=&quot;3362&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The running time for the algorithm is O(n|K|³), hence it is linear in the length of the sequence, and cubic in the number of tags.&lt;/p&gt;&lt;p name=&quot;91d7&quot; id=&quot;91d7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;NOTE: We would be showing calculations for the baby sleeping problem and the part of speech tagging problem based off a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;bigram HMM only. &lt;/strong&gt;The calculations for the trigram are left to the reader to do themselves. But the code that is attached at the end of this article is based on a trigram HMM. It’s just that the calculations are easier to explain and portray for the Viterbi algorithm when considering a bigram HMM instead of a trigram HMM.&lt;/p&gt;&lt;p name=&quot;d00f&quot; id=&quot;d00f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Therefore, before showing the calculations for the Viterbi Algorithm, let us look at the recursive formula based on a bigram HMM.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;636c&quot; id=&quot;636c&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 721px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 72.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*XmRwVbO0yHq8bsXO7jgCGA.png&quot; data-width=&quot;1996&quot; data-height=&quot;1440&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*XmRwVbO0yHq8bsXO7jgCGA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;21bd&quot; id=&quot;21bd&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This one is extremely similar to the one we saw before for the trigram model, except that now we are only concerning ourselves with the current label and the one before, instead of two before. The complexity of the algorithm now becomes O(n|K|²).&lt;/p&gt;&lt;h4 name=&quot;aa4f&quot; id=&quot;aa4f&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Calculations for Baby Sleeping Problem&lt;/h4&gt;&lt;p name=&quot;5604&quot; id=&quot;5604&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Now that we have the recursive formula ready for the Viterbi Algorithm, let us see a sample calculation of the same firstly for the example problem that we had, that is, the baby sleeping problem, and then for the part of speech tagging version.&lt;/p&gt;&lt;p name=&quot;e3ba&quot; id=&quot;e3ba&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Note that when we are at this step, that is, the calculations for the Viterbi Algorithm to find the most likely tag sequence given a set of observations over a series of time steps, we assume that transition and emission probabilities have already been calculated from the given corpus. Let’s have a look at a sample of transition and emission probabilities for the baby sleeping problem that we would use for our calculations of the algorithm.&lt;/p&gt;&lt;figure name=&quot;ab6a&quot; id=&quot;ab6a&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 314px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 44.800000000000004%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*I8XENfbYguOXxWgeHwFKJw.png&quot; data-width=&quot;1076&quot; data-height=&quot;482&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*I8XENfbYguOXxWgeHwFKJw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;a8dc&quot; id=&quot;a8dc&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The baby starts by being awake, and remains in the room for three time points, t1 . . . t3 (three iterations of the Markov chain). The observations are: quiet, quiet, noise. Have a look at the following diagram that shows the calculations for up to two time-steps. The complete diagram with all the final set of values will be shown afterwards.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;76f1&quot; id=&quot;76f1&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 827px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 82.69999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*65f7qx2216umw5c4J-EByA.png&quot; data-width=&quot;1588&quot; data-height=&quot;1314&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*65f7qx2216umw5c4J-EByA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;d0d1&quot; id=&quot;d0d1&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We have not shown the calculations for the state of “asleep” at k = 2 and the calculations for k = 3 in the above diagram to keep things simple.&lt;/p&gt;&lt;p name=&quot;1d62&quot; id=&quot;1d62&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we have all these calculations in place, we want to calculate the most likely sequence of states that the baby can be in over the different given time steps. So, for k = 2 and the state of Awake, we want to know the most likely state at k = 1 that transitioned to Awake at k = 2. (k = 2 represents a sequence of states of length 3 starting off from 0 and t = 2 would mean the state at time-step 2. We are given the state at t = 0 i.e. Awake).&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;643a&quot; id=&quot;643a&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 782px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 78.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Qs1Y0xm5aQDKWTO_783qCA.png&quot; data-width=&quot;1780&quot; data-height=&quot;1392&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*Qs1Y0xm5aQDKWTO_783qCA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;0706&quot; id=&quot;0706&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Clearly, if the state at time-step 2 was AWAKE, then the state at time-step 1 would have been AWAKE as well, as the calculations point out. So, the Viterbi Algorithm not only helps us find the π(k) values, that is the cost values for all the sequences using the concept of dynamic programming, but it also helps us to find the most likely tag sequence given a start state and a sequence of observations. The algorithm, along with the pseudo-code for storing the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;back-pointers&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;is given below.&lt;/p&gt;&lt;figure name=&quot;15a0&quot; id=&quot;15a0&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 523px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 74.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*FJkk8r9KxAZsOZXzFznnzQ.png&quot; data-width=&quot;1082&quot; data-height=&quot;808&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*FJkk8r9KxAZsOZXzFznnzQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;h4 name=&quot;dda8&quot; id=&quot;dda8&quot; class=&quot;graf graf--h4 graf-after--figure&quot;&gt;Calculations for the Part of Speech Tagging Problem&lt;/h4&gt;&lt;p name=&quot;2052&quot; id=&quot;2052&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Let us look at a slightly bigger corpus for the part of speech tagging and the corresponding Viterbi graph showing the calculations and back-pointers for the Viterbi Algorithm.&lt;/p&gt;&lt;p name=&quot;e355&quot; id=&quot;e355&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Here is the corpus that we will consider:&lt;/p&gt;&lt;figure name=&quot;b75b&quot; id=&quot;b75b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 412px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 58.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Kk1RzSbVGDW4aJ8zmiSliA.png&quot; data-width=&quot;938&quot; data-height=&quot;552&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Kk1RzSbVGDW4aJ8zmiSliA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;f10a&quot; id=&quot;f10a&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now take a look at the transition probabilities calculated from this corpus.&lt;/p&gt;&lt;figure name=&quot;2bac&quot; id=&quot;2bac&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 682px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 97.39999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*PIMy_sW7sMz7RXgewMgrkA.png&quot; data-width=&quot;1366&quot; data-height=&quot;1330&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*PIMy_sW7sMz7RXgewMgrkA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;a08f&quot; id=&quot;a08f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Here, q0 → VB represents the probability of a sentence starting off with the tag VB, that is the first word of a sentence being tagged as VB. Similarly, q0 → NN represents the probability of a sentence starting with the tag NN. Notice that out of 10 sentences in the corpus, 8 start with NN and 2 with VB and hence the corresponding transition probabilities.&lt;/p&gt;&lt;p name=&quot;d906&quot; id=&quot;d906&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As for the emission probabilities, ideally we should be looking at all the combinations of tags and words in the corpus. Since that would be too much, we will only consider emission probabilities for the sentence that would be used in the calculations for the Viterbi Algorithm.&lt;/p&gt;&lt;pre name=&quot;c38f&quot; id=&quot;c38f&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;Time flies like an arrow&lt;/pre&gt;&lt;p name=&quot;59ea&quot; id=&quot;59ea&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The emission probabilities for the sentence above are:&lt;/p&gt;&lt;figure name=&quot;59ae&quot; id=&quot;59ae&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 184px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 26.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*QeTkU4PaCo4yon8LfBbtDg.png&quot; data-width=&quot;1590&quot; data-height=&quot;418&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*QeTkU4PaCo4yon8LfBbtDg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;083e&quot; id=&quot;083e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Finally, we are ready to see the calculations for the given sentence, transition probabilities, emission probabilities, and the given corpus.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;9646&quot; id=&quot;9646&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 501px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 50.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*rpRFFEmVLE1PBUc4OwpWgg.png&quot; data-width=&quot;1990&quot; data-height=&quot;996&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*rpRFFEmVLE1PBUc4OwpWgg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;c32d&quot; id=&quot;c32d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So, is that all there is to the Viterbi Algorithm ?&lt;/p&gt;&lt;p name=&quot;6c6a&quot; id=&quot;6c6a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Take a look at the example below.&lt;/p&gt;&lt;p name=&quot;1738&quot; id=&quot;1738&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The bucket below each word is filled with the possible tags seen next to the word in the training corpus. The given sentence can have the combinations of tags depending on which path we take. But there is a catch. Can you figure out what that is?&lt;/p&gt;&lt;figure name=&quot;f550&quot; id=&quot;f550&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 287px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 41%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*7DVGrmTkEW7wS2DxrS0B5g.png&quot; data-width=&quot;2590&quot; data-height=&quot;1062&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*7DVGrmTkEW7wS2DxrS0B5g.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;All combinations of sequence paths&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;6573&quot; id=&quot;6573&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Were you able to figure it out?&lt;/p&gt;&lt;p name=&quot;7fb6&quot; id=&quot;7fb6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;No??&lt;/p&gt;&lt;p name=&quot;e511&quot; id=&quot;e511&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let me tell you what it is.&lt;/p&gt;&lt;p name=&quot;edee&quot; id=&quot;edee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There might be some path in the computation graph for which we do not have a transition probability. So our algorithm can just discard that path and take the other path.&lt;/p&gt;&lt;figure name=&quot;eca8&quot; id=&quot;eca8&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 266px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 38%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*lXoyPV31HXNROE8wrvk_PQ.png&quot; data-width=&quot;1562&quot; data-height=&quot;594&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*lXoyPV31HXNROE8wrvk_PQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;aa68&quot; id=&quot;aa68&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In the above diagram, we discard the path marked in red since we do not have q(VB|VB). The training corpus never has a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;VB&lt;/strong&gt; followed by &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;VB&lt;/strong&gt;. So in the Viterbi calculations, we end up taking q(VB|VB) = 0. And if you’ve been following the algorithm along closely, you would find that a single 0 in the calculations would make the entire probability or the maximum cost for a sequence of tags / labels to be 0.&lt;/p&gt;&lt;p name=&quot;4874&quot; id=&quot;4874&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This however means that we are ignoring the combinations which are not seen in the training corpus.&lt;/p&gt;&lt;p name=&quot;cb69&quot; id=&quot;cb69&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Is that the right way to approach the real world examples?&lt;/p&gt;&lt;p name=&quot;8680&quot; id=&quot;8680&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Consider a small tweak in the above sentence.&lt;/p&gt;&lt;figure name=&quot;d621&quot; id=&quot;d621&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 292px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 41.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_WJT4hUD6VIbDwwaeC0bYA.png&quot; data-width=&quot;2620&quot; data-height=&quot;1094&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*_WJT4hUD6VIbDwwaeC0bYA.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Time flies like &lt;strong class=&quot;markup--strong markup--figure-strong&quot;&gt;take&lt;/strong&gt; arrow&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;066c&quot; id=&quot;066c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In this sentence we do not have any alternative path. Even if we have Viterbi probability until we reach the word “like”, we cannot proceed further. Since both q(VB|VB) = 0 and q(VB|IN) = 0. What do we do now?&lt;/p&gt;&lt;p name=&quot;232d&quot; id=&quot;232d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The corpus that we considered here was very small. Consider any reasonably sized corpus with a lot of words and we have a major problem of sparsity of data. Take a look below.&lt;/p&gt;&lt;figure name=&quot;fc2b&quot; id=&quot;fc2b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 593px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 84.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*TbMxaow_H3ZUbkHuSorhqQ.png&quot; data-width=&quot;1084&quot; data-height=&quot;918&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*TbMxaow_H3ZUbkHuSorhqQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;http://www.cs.pomona.edu/~kim/CSC181S08/lectures/Lec6/Lec6.pdf&quot; data-href=&quot;http://www.cs.pomona.edu/~kim/CSC181S08/lectures/Lec6/Lec6.pdf&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;http://www.cs.pomona.edu/~kim/CSC181S08/lectures/Lec6/Lec6.pdf&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;b900&quot; id=&quot;b900&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;That means that we can have a potential 68 billion bigrams but the number of words in the corpus are just under a billion. That is a huge number of zero transition probabilities to fill up. The problem of sparsity of data is even more elaborate in case we are considering trigrams.&lt;/p&gt;&lt;p name=&quot;ce9e&quot; id=&quot;ce9e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To solve this problem of data sparsity, we resort to a solution called Smoothing.&lt;/p&gt;&lt;h3 name=&quot;383d&quot; id=&quot;383d&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Smoothing&lt;/h3&gt;&lt;p name=&quot;a514&quot; id=&quot;a514&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The idea behind Smoothing is just this:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;b3a4&quot; id=&quot;b3a4&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Discount &lt;/strong&gt;— the existing probability values somewhat and&lt;/li&gt;&lt;li name=&quot;6ea4&quot; id=&quot;6ea4&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Reallocate &lt;/strong&gt;— this probability to the zeroes&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;91a8&quot; id=&quot;91a8&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;In this way, we redistribute the non zero probability values to compensate for the unseen transition combinations. Let us consider a very simple type of smoothing technique known as Laplace Smoothing.&lt;/p&gt;&lt;p name=&quot;4fa7&quot; id=&quot;4fa7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Laplace smoothing is also known as one count smoothing. You will understand exactly why it goes by that name in a moment. Let’s revise how the parameters for a trigram HMM model are calculated given a training corpus.&lt;/p&gt;&lt;figure name=&quot;38b4&quot; id=&quot;38b4&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 473px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 67.60000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*xQpIu7eeclDRbdxM-mcAiA.png&quot; data-width=&quot;1352&quot; data-height=&quot;914&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*xQpIu7eeclDRbdxM-mcAiA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;37fa&quot; id=&quot;37fa&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The possible values that can go wrong here are&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;b5d6&quot; id=&quot;b5d6&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;c(u, v, s)&lt;/code&gt; is 0&lt;/li&gt;&lt;li name=&quot;6dd7&quot; id=&quot;6dd7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;c(u, v)&lt;/code&gt; is 0&lt;/li&gt;&lt;li name=&quot;ff51&quot; id=&quot;ff51&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;We get an unknown word in the test sentence, and we don’t have any training tags associated with it.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;2695&quot; id=&quot;2695&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;All these can be solved via smoothing. So the Laplace smoothing counts would become&lt;/p&gt;&lt;figure name=&quot;d068&quot; id=&quot;d068&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 423px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 60.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*H8f_RnB22MxVlIjr_edSJg.png&quot; data-width=&quot;1432&quot; data-height=&quot;866&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*H8f_RnB22MxVlIjr_edSJg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;d7db&quot; id=&quot;d7db&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Here V is the total number of tags in our corpus and λ is basically a real value between 0 and 1. It acts like a discounting factor. A λ = 1 value would give us &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;too much of a redistribution of values of probabilities. &lt;/strong&gt;For example:&lt;/p&gt;&lt;figure name=&quot;d503&quot; id=&quot;d503&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 282px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 40.300000000000004%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*YRPm8NS-Fk5d6MB_3VHsqg.png&quot; data-width=&quot;1166&quot; data-height=&quot;470&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*YRPm8NS-Fk5d6MB_3VHsqg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;669b&quot; id=&quot;669b&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Too much of a weight is given to unseen trigrams for λ = 1 and that is why the above mentioned modified version of Laplace Smoothing is considered for all practical applications. The value of the discounting factor is to be varied from one application to another.&lt;/p&gt;&lt;p name=&quot;17df&quot; id=&quot;17df&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Note that λ = 1 would only create a problem if the vocabulary size is too large. For a smaller corpus, λ = 1 would give us a good performance to start off with.&lt;/p&gt;&lt;p name=&quot;3f0e&quot; id=&quot;3f0e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A thing to note about Laplace Smoothing is that it is a uniform redistribution, that is, all the trigrams that were previously unseen would have equal probabilities. So, suppose we are given some data and we observe that&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;a1d1&quot; id=&quot;a1d1&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Frequency of trigram &amp;lt;gave, the, thing&amp;gt; is zero&lt;/li&gt;&lt;li name=&quot;ecb2&quot; id=&quot;ecb2&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Frequency of trigram &amp;lt;gave, the, think&amp;gt; is also zero&lt;/li&gt;&lt;li name=&quot;f240&quot; id=&quot;f240&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Uniform distribution over unseen events means: &lt;br&gt;P(thing|gave, the) = P(think|gave, the)&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;6c6b&quot; id=&quot;6c6b&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Does that reflect our knowledge about English use?&lt;br&gt;P(thing|gave, the) &amp;gt; P(think|gave, the) ideally, but uniform distribution using Laplace smoothing will not consider this.&lt;/p&gt;&lt;p name=&quot;bf16&quot; id=&quot;bf16&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This means that millions of unseen trigrams in a huge corpus would have equal probabilities when they are being considered in our calculations. That is probably not the right thing to do. However, it is better than to consider the 0 probabilities which would lead to these trigrams and eventually some paths in the Viterbi graph getting completely ignored. But this still needs to be worked upon and made better.&lt;/p&gt;&lt;p name=&quot;1e8d&quot; id=&quot;1e8d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There are, however, a lot of different types of smoothing techniques that improve upon the basic Laplace Smoothing technique and help overcome this problem of uniform distribution of probabilities. Some of these techniques are:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;f121&quot; id=&quot;f121&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Good-Turing estimate&lt;/li&gt;&lt;li name=&quot;63ce&quot; id=&quot;63ce&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Jelinek-Mercer smoothing (interpolation)&lt;/li&gt;&lt;li name=&quot;ab88&quot; id=&quot;ab88&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Katz smoothing (backoff)&lt;/li&gt;&lt;li name=&quot;e300&quot; id=&quot;e300&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Witten-Bell smoothing&lt;/li&gt;&lt;li name=&quot;c00a&quot; id=&quot;c00a&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Absolute discounting&lt;/li&gt;&lt;li name=&quot;0b2c&quot; id=&quot;0b2c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Kneser-Ney smoothing&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;15a9&quot; id=&quot;15a9&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;To read more on these different types of smoothing techniques in more detail, refer to &lt;a href=&quot;https://nlp.stanford.edu/~wcmac/papers/20050421-smoothing-tutorial.pdf&quot; data-href=&quot;https://nlp.stanford.edu/~wcmac/papers/20050421-smoothing-tutorial.pdf&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;this&lt;/a&gt; tutorial. Which smoothing technique to choose highly depends upon the type of application at hand, the type of data being considered, and also on the size of the data set.&lt;/p&gt;&lt;p name=&quot;538c&quot; id=&quot;538c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you have been following along this lengthy article, then I must say&lt;/p&gt;&lt;figure name=&quot;97f2&quot; id=&quot;97f2&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 906px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 129.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*R1pwNm3-Ju-9E4LdvYak1A.jpeg&quot; data-width=&quot;900&quot; data-height=&quot;1165&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*R1pwNm3-Ju-9E4LdvYak1A.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://sebreg.deviantart.com/art/You-re-Kind-of-Awesome-289166787&quot; data-href=&quot;https://sebreg.deviantart.com/art/You-re-Kind-of-Awesome-289166787&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;https://sebreg.deviantart.com/art/You-re-Kind-of-Awesome-289166787&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;5ced&quot; id=&quot;5ced&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Let’s move on and look at a slight optimization that we can do to the Viterbi algorithm that can reduce the number of computations and that also makes sense for a lot of data sets out there.&lt;/p&gt;&lt;p name=&quot;d97d&quot; id=&quot;d97d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before that, however, look at the pseudo-code for the algorithm once again.&lt;/p&gt;&lt;figure name=&quot;a057&quot; id=&quot;a057&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 330px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 47.199999999999996%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Vex29pOqTVPdtc7Wdz9tlw.png&quot; data-width=&quot;1852&quot; data-height=&quot;874&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Vex29pOqTVPdtc7Wdz9tlw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;8d29&quot; id=&quot;8d29&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;If we look closely, we can see that &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;for every trigram of words, we are considering all possible set of tags. &lt;/strong&gt;That is, if the number of tags are V, then we are considering |V|³ number of combinations for every trigram of the test sentence.&lt;/p&gt;&lt;p name=&quot;ce1f&quot; id=&quot;ce1f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Ignore the trigram for now and just consider a single word. We would be considering all of the unique tags for a given word in the above mentioned algorithm. Consider a corpus where we have the word “kick” which is associated with only two tags, say {NN, VB} and the total number of unique tags in the training corpus are around 500 (it’s a huge corpus).&lt;/p&gt;&lt;figure name=&quot;01c6&quot; id=&quot;01c6&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 601px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 85.9%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*P1fkUUTMSTgBneCNqV4sgw.png&quot; data-width=&quot;1654&quot; data-height=&quot;1420&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*P1fkUUTMSTgBneCNqV4sgw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;c4f4&quot; id=&quot;c4f4&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now the problem here is apparent. We might end up assigning a tag that doesn’t make sense with the word under consideration, simply because the transition probability of the trigram ending at the tag was very high, like in the example shown above. Also, it would be computationally inefficient to consider all 500 tags for the word “kick” if it only ever occurs with two unique tags in the entire corpus.&lt;/p&gt;&lt;p name=&quot;9f5e&quot; id=&quot;9f5e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, the optimization we do is that for every word, instead of considering all the unique tags in the corpus, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;we just consider the tags that it occurred with in the corpus&lt;/strong&gt;.&lt;/p&gt;&lt;p name=&quot;c3bf&quot; id=&quot;c3bf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This would work because, for a reasonably large corpus, a given word would ideally occur with all the various set of tags with which it can occur (most of them at-least). Then it would be reasonable to simply consider just those tags for the Viterbi algorithm.&lt;/p&gt;&lt;p name=&quot;9466&quot; id=&quot;9466&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As far as the Viterbi decoding algorithm is concerned, the complexity still remains the same because we are always concerned with the worst case complexity. In the worst case, every word occurs with every unique tag in the corpus, and so the complexity remains at O(n|V|³) for the trigram model and O(n|V|²) for the bigram model.&lt;/p&gt;&lt;p name=&quot;bd23&quot; id=&quot;bd23&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For the recursive implementation of the code, please refer to&lt;/p&gt;&lt;div name=&quot;a7d2&quot; id=&quot;a7d2&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://github.com/DivyaGodayal/HMM-POS-Tagger&quot; data-href=&quot;https://github.com/DivyaGodayal/HMM-POS-Tagger&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://github.com/DivyaGodayal/HMM-POS-Tagger&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;DivyaGodayal/HMM-POS-Tagger&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;HMM-POS-Tagger — An HMM based Part of Speech Tagger implementation using Laplace Smoothing and Trigram HMMs&lt;/em&gt;github.com&lt;/a&gt;&lt;a href=&quot;https://github.com/DivyaGodayal/HMM-POS-Tagger&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;6eae171144a70b8b97d1899f9d7c65ec&quot; data-thumbnail-img-id=&quot;0*5agih_ZSjxgNTkve.&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*5agih_ZSjxgNTkve.);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;13ad&quot; id=&quot;13ad&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;The recursive implementation is done along with Laplace Smoothing.&lt;/p&gt;&lt;p name=&quot;8c6c&quot; id=&quot;8c6c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For the iterative implementation, refer to&lt;/p&gt;&lt;div name=&quot;1154&quot; id=&quot;1154&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://github.com/edorado93/HMM-Part-of-Speech-Tagger&quot; data-href=&quot;https://github.com/edorado93/HMM-Part-of-Speech-Tagger&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://github.com/edorado93/HMM-Part-of-Speech-Tagger&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;edorado93/HMM-Part-of-Speech-Tagger&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;HMM-Part-of-Speech-Tagger — An HMM based Part of Speech Tagger&lt;/em&gt;github.com&lt;/a&gt;&lt;a href=&quot;https://github.com/edorado93/HMM-Part-of-Speech-Tagger&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;067b589fcee6fada5537444c30b62ca1&quot; data-thumbnail-img-id=&quot;0*trBIckExX_4bdurZ.&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*trBIckExX_4bdurZ.);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;cba1&quot; id=&quot;cba1&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;This implementation is done with One-Count Smoothing technique which leads to better accuracy as compared to the Laplace Smoothing.&lt;/p&gt;&lt;p name=&quot;80d4&quot; id=&quot;80d4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A lot of snapshots of formulas and calculations in the two articles are derived from &lt;a href=&quot;http://1.%20http://www.cs.columbia.edu/~mcollins/courses/nlp2011/notes/hmms.pdf&quot; data-href=&quot;http://1. http://www.cs.columbia.edu/~mcollins/courses/nlp2011/notes/hmms.pdf&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p name=&quot;5851&quot; id=&quot;5851&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Do let us know how this blog post helped you, and point out the mistakes if you find some while reading the article in the comments section below. Also, please recommend (by clapping) and spread the love as much as possible for this post if you think this might be useful for someone.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Change the signs: how to use dynamic programming to solve a competitive programming question</title>
   <link href="http://localhost:4000/2018/06/01/Change-the-signs-how-to-use-dynamic-programming-to-solve-a-competitive-programming-question-f9730e8f04a9/"/>
   <updated>2018-06-01T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/06/01/Change-the-signs--how-to-use-dynamic-programming-to-solve-a-competitive-programming-question-f9730e8f04a9</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Change the signs: how to use dynamic programming to solve a competitive programming question&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Change the signs: how to use dynamic programming to solve a competitive programming question&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
If you’re a competitive programmer like I am, one of the best feelings in the world is seeing your program getting accepted on first try on…
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;b4c0&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;3e6d&quot; id=&quot;3e6d&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;8d9d&quot; id=&quot;8d9d&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 78.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*kdC2W2WKEjPIG1pRCk0qmg.png&quot; data-width=&quot;2046&quot; data-height=&quot;1604&quot; data-is-featured=&quot;true&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*kdC2W2WKEjPIG1pRCk0qmg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;2645&quot; id=&quot;2645&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;If you’re a competitive programmer like I am, one of the best feelings in the world is seeing your program getting accepted on first try on one of the most famous programming platforms, &lt;a href=&quot;https://www.codechef.com/&quot; data-href=&quot;https://www.codechef.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;CodeChef&lt;/a&gt;.&lt;/p&gt;&lt;p name=&quot;86b0&quot; id=&quot;86b0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I was an avid competitive programmer during undergrad, and then lost touch with it when working as a developer @Hike. However, I recently started out into this adventurous world of programming again, all thanks to my friend &lt;a href=&quot;https://medium.com/u/842b783318b8&quot; data-href=&quot;https://medium.com/u/842b783318b8&quot; data-anchor-type=&quot;2&quot; data-user-id=&quot;842b783318b8&quot; data-action-value=&quot;842b783318b8&quot; data-action=&quot;show-user-card&quot; data-action-type=&quot;hover&quot; class=&quot;markup--user markup--p-user&quot; target=&quot;_blank&quot;&gt;Divya Godayal&lt;/a&gt;.&lt;/p&gt;&lt;p name=&quot;d398&quot; id=&quot;d398&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The &lt;a href=&quot;https://www.codechef.com/MAY18&quot; data-href=&quot;https://www.codechef.com/MAY18&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;CodeChef May 2018 Long Challenge&lt;/a&gt; ended about an hour ago, and I decided to write this article as a post describing one of the questions in the competition.&lt;/p&gt;&lt;p name=&quot;87dc&quot; id=&quot;87dc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Without wasting any more time, let’s get to it.&lt;/p&gt;&lt;figure name=&quot;d04c&quot; id=&quot;d04c&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 955px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 136.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*bY14HmJRTsQME9jEE3RH6Q.png&quot; data-width=&quot;1284&quot; data-height=&quot;1752&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*bY14HmJRTsQME9jEE3RH6Q.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;h3 name=&quot;0135&quot; id=&quot;0135&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Unravelling the Problem Statement&lt;/h3&gt;&lt;p name=&quot;c48a&quot; id=&quot;c48a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let’s look at some examples to better understand what the problem statement is asking for.&lt;/p&gt;&lt;p name=&quot;918d&quot; id=&quot;918d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Consider the following number sequence.&lt;/p&gt;&lt;pre name=&quot;2089&quot; id=&quot;2089&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 3 1 2&lt;/pre&gt;&lt;p name=&quot;7c43&quot; id=&quot;7c43&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Now the question asks us to perform a certain operation (possibly 0 times, leaving the sequence unchanged). We can negate a certain subsequence of numbers and get a new sequence.&lt;/p&gt;&lt;pre name=&quot;e795&quot; id=&quot;e795&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;-4 3 1 2&lt;br&gt;4 -3 1 -2&lt;br&gt;4 3 -1 2&lt;br&gt;4 3 1 -2&lt;br&gt;-4 -3 1 2 etc.&lt;/pre&gt;&lt;p name=&quot;ad56&quot; id=&quot;ad56&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The question says that the resulting sequence should satisfy the following constraint:&lt;/p&gt;&lt;p name=&quot;3130&quot; id=&quot;3130&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;The sum of elements of any substring with length greater than 1 is strictly positive.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;d600&quot; id=&quot;d600&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Clearly, the following sequences are not valid:&lt;/p&gt;&lt;pre name=&quot;3029&quot; id=&quot;3029&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;-4 3 1 2&lt;br&gt;4 -3 1 -2 &lt;br&gt;4 3 1 -2 &lt;br&gt;-4 -3 1 2 &lt;br&gt;-4 -3 -1 -2&lt;br&gt;4 3 -1 -2&lt;/pre&gt;&lt;p name=&quot;b53d&quot; id=&quot;b53d&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;We only have 2 valid subsequences that can be obtained by performing the operation mentioned above. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Note:&lt;/strong&gt; we haven’t written down all the possible subsequences. That would be 2^n, that is 16 in this case, because for every number we have two options. Either to negate it, or not.&lt;/p&gt;&lt;p name=&quot;e93e&quot; id=&quot;e93e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So the two valid sequences are:&lt;/p&gt;&lt;pre name=&quot;2e78&quot; id=&quot;2e78&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 3 1 2&lt;/pre&gt;&lt;p name=&quot;80d5&quot; id=&quot;80d5&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;and&lt;/p&gt;&lt;pre name=&quot;55db&quot; id=&quot;55db&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 3 -1 2&lt;/pre&gt;&lt;p name=&quot;22d4&quot; id=&quot;22d4&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The original sequence would always be one of the valid sequences as all the numbers in it are positive.&lt;/p&gt;&lt;p name=&quot;681f&quot; id=&quot;681f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now the question asks us to find the sequence with the minimum sum. So for the example we have considered, the sequence required would be &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4 3 -1 2&lt;/code&gt; .&lt;/p&gt;&lt;h3 name=&quot;dafc&quot; id=&quot;dafc&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Would Greedy Work?&lt;/h3&gt;&lt;p name=&quot;12da&quot; id=&quot;12da&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;A greedy approach in this question would be that if it is possible to negate a number while satisfying the given constraints, then we should negate that number. This approach however, would not always give the right results. Consider the following example.&lt;/p&gt;&lt;pre name=&quot;4710&quot; id=&quot;4710&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 1 3 2&lt;/pre&gt;&lt;p name=&quot;7099&quot; id=&quot;7099&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Here, it is possible to have these three valid sets of numbers:&lt;/p&gt;&lt;pre name=&quot;ae90&quot; id=&quot;ae90&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 1 3 2           4 -1 3 2           4 1 3 -2&lt;/pre&gt;&lt;p name=&quot;7b1a&quot; id=&quot;7b1a&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Clearly, both the numbers 2 and 1 can be negated. But not both of them at the same time. If we negate a number greedily — that is, if a number can be negated, then we negate it — then it is possible that we might end up negating the number 1. Then you won’t be able to negate the number 2. This would give us a suboptimal solution.&lt;/p&gt;&lt;p name=&quot;616b&quot; id=&quot;616b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So this Greedy approach would not work here. We have to &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;“try out a specific choice of whether to negate or not for a number and see what choice gives us the optimal solution”&lt;em class=&quot;markup--em markup--p-em&quot;&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;1730&quot; id=&quot;1730&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This smells like Dynamic Programming.&lt;/p&gt;&lt;h3 name=&quot;175d&quot; id=&quot;175d&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Good ol’ Dynamic Programming&lt;/h3&gt;&lt;p name=&quot;5daa&quot; id=&quot;5daa&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;One of the most interesting algorithmic techniques out there, and possibly one of the most dreaded, is dynamic programming. This is the technique we are going to use to solve this particular problem.&lt;/p&gt;&lt;p name=&quot;9611&quot; id=&quot;9611&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Two of the most important steps in any dynamic programming problem are:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;5259&quot; id=&quot;5259&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Identifying the recurrent relation.&lt;/li&gt;&lt;li name=&quot;5101&quot; id=&quot;5101&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Figuring out what to &lt;a href=&quot;https://www.interviewcake.com/concept/java/memoization&quot; data-href=&quot;https://www.interviewcake.com/concept/java/memoization&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;memoize&lt;/strong&gt;&lt;/a&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;. (not memoRize :P)&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;acc3&quot; id=&quot;acc3&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;The DP-based approach here is divided into two basic parts.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;5016&quot; id=&quot;5016&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;One is the main recursion that we use to find out the &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;minimum sum of the final set&lt;/strong&gt;. Note, the dynamic programming is not directly used to obtain the final set, just the sum of the final set of numbers. So our dynamic programming approach would correctly find out the sum for the example given above as 8. &lt;code class=&quot;markup--code markup--li-code&quot;&gt;4 + 3 + (-1) + 2 = 8&lt;/code&gt; .&lt;/li&gt;&lt;li name=&quot;87c5&quot; id=&quot;87c5&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;What we actually need is the final modified set of numbers where some (possibly none) of the numbers are negated. We use the concept of a &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;parent pointer&lt;/strong&gt; and &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;backtracking&lt;/strong&gt; to find out the actual set of numbers.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;0200&quot; id=&quot;0200&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Let’s move onto our recursion relation for our dynamic programming approach.&lt;/p&gt;&lt;p name=&quot;a109&quot; id=&quot;a109&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before describing the recursive relation an important observation to make here is that if a number has been negated, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;then any adjacent number to it can not be negative&lt;/strong&gt;. That is,&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt; &lt;/strong&gt;two adjacent numbers cannot be negative as that would give a substring of length 2 whose sum is negative, and that is not allowed according to the question.&lt;/p&gt;&lt;p name=&quot;4f80&quot; id=&quot;4f80&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For the recurrence relation, we need two variables. One is the index number of where we are in the array, and one is a boolean value that tells us if the previous number (one left to the previous number) is negated or not. So if the current index is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt;, then the boolean value would tell us if the number at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i — 2 &lt;/code&gt;was negated or not. You will know the importance of this boolean variable in the next paragraph.&lt;/p&gt;&lt;p name=&quot;481e&quot; id=&quot;481e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We need to know in &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(1)&lt;/code&gt; if a number &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;can&lt;/strong&gt; be negated or not. Since we are following a recursion with memoization-based solution, whenever we are at an index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i &lt;/code&gt;in the recursion, we are sure that the numbers to the right (&lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+ 1&lt;/code&gt; onwards) have not been processed up to this point. This means that all of them are still positive.&lt;/p&gt;&lt;p name=&quot;0b53&quot; id=&quot;0b53&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The choice of whether the number at index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i &lt;/code&gt;can be negated is dependent upon the right hand side (if there is one) and the left hand side (if there is one). The right hand side is easy. All we need to check is if&lt;/p&gt;&lt;pre name=&quot;a0cf&quot; id=&quot;a0cf&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;number[i] &amp;lt; number[i + 1]&lt;/pre&gt;&lt;p name=&quot;2a43&quot; id=&quot;2a43&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;because if this is not true, then adding these two would give a negative value for the substring &lt;code class=&quot;markup--code markup--p-code&quot;&gt;[i, i + 1]&lt;/code&gt; thus making it an invalid operation.&lt;/p&gt;&lt;p name=&quot;9678&quot; id=&quot;9678&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now comes the tricky part. We need to see if negating the number at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i &lt;/code&gt;will cause a substring of negative sum to the left or not. When we reach the index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i &lt;/code&gt;in our recursion, we have already processed the numbers before it, and some might have been negated as well.&lt;/p&gt;&lt;p name=&quot;1942&quot; id=&quot;1942&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So say we have this set of numbers &lt;code class=&quot;markup--code markup--p-code&quot;&gt;4 1 2 1&lt;/code&gt; and we had negated the first &lt;code class=&quot;markup--code markup--p-code&quot;&gt;1&lt;/code&gt; and we are now processing the last number ( &lt;code class=&quot;markup--code markup--p-code&quot;&gt;1&lt;/code&gt; ).&lt;/p&gt;&lt;pre name=&quot;94c4&quot; id=&quot;94c4&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;4 -1 2 [1]&lt;/pre&gt;&lt;p name=&quot;a361&quot; id=&quot;a361&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The last number in square brackets is the one we are processing right now. As far as the right hand side is concerned, since there is none, we can negate it. We need to check if negating this 1 at index 3 (0 based indexing) would cause any substring to the left of ≤ 0 sum. As you can see, it will produce such a substring.&lt;/p&gt;&lt;pre name=&quot;73ed&quot; id=&quot;73ed&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;-1 2 -1&lt;/pre&gt;&lt;p name=&quot;c6d2&quot; id=&quot;c6d2&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This substring would have a 0 sum, and that is invalid according to the question. After negating a subsequence of numbers, the substrings in the final set should have a sum which is strictly positive. All the substrings of length &amp;gt; 1.&lt;/p&gt;&lt;p name=&quot;6932&quot; id=&quot;6932&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We cannot apply the following approach here directly:&lt;/p&gt;&lt;pre name=&quot;1698&quot; id=&quot;1698&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;if number[i] &amp;lt; number[i - 1], then it is good to go on negation.&lt;/pre&gt;&lt;p name=&quot;0d94&quot; id=&quot;0d94&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;because, although &lt;code class=&quot;markup--code markup--p-code&quot;&gt;1 &amp;lt; 2&lt;/code&gt; , if we negate that last 1 as well we will have an invalid set of numbers as seen above. So this simple approach or check won’t work here.&lt;/p&gt;&lt;p name=&quot;e3ec&quot; id=&quot;e3ec&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Here comes the boolean variable which tells us if, given an index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt;, the number at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i — 2 &lt;/code&gt;was negated or not. Consider the two scenarios.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;cfc9&quot; id=&quot;cfc9&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Yes, the number at index &lt;code class=&quot;markup--code markup--li-code&quot;&gt;i — 2&lt;/code&gt; was negated like in the example just showcased. In that case, negation of the number at &lt;code class=&quot;markup--code markup--li-code&quot;&gt;i — 2&lt;/code&gt; would have a capacity reduction for number at &lt;code class=&quot;markup--code markup--li-code&quot;&gt;i — 1&lt;/code&gt;. In the example &lt;code class=&quot;markup--code markup--li-code&quot;&gt;4 1 2 1&lt;/code&gt; , negating the 1 at index 1(0 based indexing) would reduce the capacity of the number 2 (at index 2) by 1. We refer to remaining values of numbers as capacities here. We need to consider this reduced capacity when performing the check to see if a number can be negated or not.&lt;/li&gt;&lt;/ul&gt;&lt;pre name=&quot;28d5&quot; id=&quot;28d5&quot; class=&quot;graf graf--pre graf-after--li&quot;&gt;number[i] &amp;lt; reducedCapacityOfNumberAt(i - 1)&lt;/pre&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;a228&quot; id=&quot;a228&quot; class=&quot;graf graf--li graf-after--pre&quot;&gt;In case the number at index &lt;code class=&quot;markup--code markup--li-code&quot;&gt;i — 2&lt;/code&gt; wasn’t negated, the number at &lt;code class=&quot;markup--code markup--li-code&quot;&gt;i — 1&lt;/code&gt; is at it’s full capacity. The simple check&lt;/li&gt;&lt;/ul&gt;&lt;pre name=&quot;267b&quot; id=&quot;267b&quot; class=&quot;graf graf--pre graf-after--li&quot;&gt;number[i] &amp;lt; number[i - 1]&lt;/pre&gt;&lt;p name=&quot;72ce&quot; id=&quot;72ce&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;would be enough to see if we can negate the number at index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt; .&lt;/p&gt;&lt;p name=&quot;54cc&quot; id=&quot;54cc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at the code for the recursion containing all the ideas discussed above.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;2ef6&quot; id=&quot;2ef6&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 810px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 81%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Ng2Sul4EQstOGK91DEfFHw.png&quot; data-width=&quot;2424&quot; data-height=&quot;1964&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*Ng2Sul4EQstOGK91DEfFHw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;944e&quot; id=&quot;944e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;That’s all nice and dandy. But, this is just recursion, and the heading says dynamic programming. That means there would be overlapping subproblems. Let us look at the recursion tree to see if there are any.&lt;/p&gt;&lt;figure name=&quot;6d09&quot; id=&quot;6d09&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 602px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 85.9%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*LI4UwrN7wA-ep0k-mUUtpQ.png&quot; data-width=&quot;1436&quot; data-height=&quot;1234&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*LI4UwrN7wA-ep0k-mUUtpQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;819a&quot; id=&quot;819a&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;As you can see, there are overlapping subproblems in the recursion tree. That is why we can use memoization.&lt;/p&gt;&lt;p name=&quot;3953&quot; id=&quot;3953&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The memoization is as simple as:&lt;/p&gt;&lt;pre name=&quot;dc55&quot; id=&quot;dc55&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;&amp;quot;&amp;quot;&amp;quot; This comes at the top. We check if the state represented by the tuple of the index and the boolean variable is already cached &amp;quot;&amp;quot;&amp;quot;&lt;/pre&gt;&lt;pre name=&quot;ef08&quot; id=&quot;ef08&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;if(memo[i][is_prev_negated] != INF) &lt;br&gt;{&lt;br&gt;    return memo[i][is_prev_negated];&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre name=&quot;4df0&quot; id=&quot;4df0&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;...... CODE&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;pre name=&quot;67be&quot; id=&quot;67be&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;# Cache the minimum sum from this index onwards.&lt;br&gt;memo[i][is_prev_negated] = min(pos, neg);&lt;/pre&gt;&lt;pre name=&quot;6dc5&quot; id=&quot;6dc5&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;# The parent pointer is used for finding out the final set of #s&lt;br&gt;parent[i][is_prev_negated] = min(pos, neg) == pos ? 1 : -1;&lt;/pre&gt;&lt;p name=&quot;9afc&quot; id=&quot;9afc&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;As pointed out earlier, this recursive approach would return the minimum sum of the set of numbers possible after making the valid set of modifications to them.&lt;/p&gt;&lt;p name=&quot;ef07&quot; id=&quot;ef07&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The question, however, asks us to actually print the final set of numbers that gives the minimum sum after making such modifications. For that, we need to use a parent pointer that would tell us at every index and boolean variable &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is_prev_negated &lt;/code&gt;’s value as to what optimal action was taken.&lt;/p&gt;&lt;pre name=&quot;08d7&quot; id=&quot;08d7&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;parent[i][is_prev_negated] = min(pos, neg) == pos ? 1 : -1;&lt;/pre&gt;&lt;p name=&quot;6be5&quot; id=&quot;6be5&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;So we simply store 1 or -1 depending upon if negating the number at index i (if possible!) gave us the minimum sum or if choosing to ignore it gave the minimum sum.&lt;/p&gt;&lt;h3 name=&quot;bc60&quot; id=&quot;bc60&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Backtracking&lt;/h3&gt;&lt;p name=&quot;7a88&quot; id=&quot;7a88&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Now comes the part where we backtrack to find the solution to our original problem. Note that the decision for the very first number is what propagates the recursion further. If the first number was negated, the second number would be positive and the third number’s decision can be found using &lt;code class=&quot;markup--code markup--p-code&quot;&gt;parent[2][true]&lt;/code&gt;. Similarly, if the first number wasn’t negated, then we move onto the second number and it’s decision can be found using &lt;code class=&quot;markup--code markup--p-code&quot;&gt;parent[1][false]&lt;/code&gt; and so on. Let’s look at the code.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;cc4a&quot; id=&quot;cc4a&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 739px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 73.9%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*mhMeHj4y986IB_-Xce5Q2A.png&quot; data-width=&quot;2610&quot; data-height=&quot;1930&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*mhMeHj4y986IB_-Xce5Q2A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;a053&quot; id=&quot;a053&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;A Better Approach&lt;/h3&gt;&lt;p name=&quot;48fa&quot; id=&quot;48fa&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;If you take a look at the space complexity of the solution suggested, you will see that it’s a 2 dimensional dynamic programming solution because the state of the recursion is represented by two variables i.e. the index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i &lt;/code&gt;representing what number of the array we are considering and then the boolean variable &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is_prev_negated&lt;/code&gt; . So the space complexity and the time complexity would be O(n*2) which is essentially O(n).&lt;/p&gt;&lt;p name=&quot;ff62&quot; id=&quot;ff62&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, there is a slightly better approach as well to solving this problem as suggested by &lt;a href=&quot;https://medium.com/u/842b783318b8&quot; data-href=&quot;https://medium.com/u/842b783318b8&quot; data-anchor-type=&quot;2&quot; data-user-id=&quot;842b783318b8&quot; data-action-value=&quot;842b783318b8&quot; data-action=&quot;show-user-card&quot; data-action-type=&quot;hover&quot; class=&quot;markup--user markup--p-user&quot; target=&quot;_blank&quot;&gt;Divya Godayal&lt;/a&gt;. This problem can even be solved by 1 dimensional dynamic programming based solution.&lt;/p&gt;&lt;p name=&quot;4e04&quot; id=&quot;4e04&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Essentially, the boolean variable &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is_prev_negated&lt;/code&gt; is helping us to decide if we can negate a given number at index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt; or not as far as the left hand side of the array is concerned i.e. &lt;code class=&quot;markup--code markup--p-code&quot;&gt;all the numbers from 0 .. i-1&lt;/code&gt; because the right hand side is anyways safe as all the numbers on that side are positive (as the recursion hasn’t reached them yet). So for the right hand side we simply checked the number at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+1&lt;/code&gt; but for the left hand side of index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt; we had to make use of the boolean variable &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is_prev_negated&lt;/code&gt; .&lt;/p&gt;&lt;p name=&quot;81c6&quot; id=&quot;81c6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It turns out, that we can simply skip this boolean variable altogether and simply look ahead to decide if a number can be negated or not. Which simply means if you are at an index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt;, you check if that element along with the element at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+2 &lt;/code&gt;have the capacity to swallow the element at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+1 &lt;/code&gt;i.e.&lt;/p&gt;&lt;pre name=&quot;405d&quot; id=&quot;405d&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;numbers[i] + numbers[i+2] &amp;gt;= numbers[i+1  (SWALLOW)&lt;/pre&gt;&lt;p name=&quot;4c2c&quot; id=&quot;4c2c&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;If there is a such a possibility, then we directly jump to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+3&lt;/code&gt;if we negate element at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i &lt;/code&gt;because element at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+1 &lt;/code&gt;and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+2 &lt;/code&gt;both can’t be negative in such a scenario.&lt;/p&gt;&lt;p name=&quot;c492&quot; id=&quot;c492&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In case the swallow condition is not satisfied and we end up negating the number at index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt; , then we would jump to index &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+2&lt;/code&gt; because in any case, two consecutive numbers cannot be negated. So if the number at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i&lt;/code&gt; was negated, then the number at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+1&lt;/code&gt; has to be positive. The swallow check is to see if the number at &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i+2&lt;/code&gt; would definitely have to be positive or if we can exercise the choice of whether to negate or not there.&lt;/p&gt;&lt;p name=&quot;f51e&quot; id=&quot;f51e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Have a look at the code for a better understanding.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;a0a8&quot; id=&quot;a0a8&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 734px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 73.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*d3XdH8Qi2dwLsRX5G9E3sQ.png&quot; data-width=&quot;2296&quot; data-height=&quot;1686&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*d3XdH8Qi2dwLsRX5G9E3sQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;13fd&quot; id=&quot;13fd&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Hence, just a single variable i.e. the index is used to define the state of the recursion. So the time and space complexity, both got reduced to half of what they were in the previous solution.&lt;/p&gt;&lt;p name=&quot;e47c&quot; id=&quot;e47c&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;I hope you were able to grasp the working of the algorithm described above and how the dynamic programming technique fits into this problem. I think it’s an interesting problem, because you not only have to use dynamic programming but also the concept of parent pointer to retrace the steps through the optimal solution and get the answer required in the question.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>I need a haircut</title>
   <link href="http://localhost:4000/2018/05/15/I-need-a-haircut-d0d72d674fdb/"/>
   <updated>2018-05-15T00:00:00-07:00</updated>
   <id>http://localhost:4000/2018/05/15/I-need-a-haircut-d0d72d674fdb</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;I need a haircut&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;I need a haircut&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
“Should I get a haircut?”
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;4975&quot; class=&quot;section section--body section--first&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;dc83&quot; id=&quot;dc83&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;8777&quot; id=&quot;8777&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 83.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*mwN4UShcmng7WJY5LjlzIQ.png&quot; data-width=&quot;1500&quot; data-height=&quot;1257&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*mwN4UShcmng7WJY5LjlzIQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;http://www.lentilla.info/&quot; data-href=&quot;http://www.lentilla.info/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://www.lentilla.info/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;ca91&quot; id=&quot;ca91&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--figure&quot;&gt;“Should I get a haircut?”&lt;/p&gt;&lt;p name=&quot;9eab&quot; id=&quot;9eab&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“I think it’s been difficult to manage them lately and its too hot outside. I think I should get a haircut done.”&lt;/p&gt;&lt;p name=&quot;8ea0&quot; id=&quot;8ea0&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p graf--trailing&quot;&gt;“Let me go to the nearby XYZ saloon and get this over with.”&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;3e35&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;82c1&quot; id=&quot;82c1&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;The Walk&lt;/h3&gt;&lt;p name=&quot;310b&quot; id=&quot;310b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;As I approach the salon, 1000 questions flood my head.&lt;/p&gt;&lt;p name=&quot;b83b&quot; id=&quot;b83b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What if they cut my hair too short ?&lt;/p&gt;&lt;p name=&quot;89aa&quot; id=&quot;89aa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What if they aren’t equal at the end of it ?&lt;/p&gt;&lt;p name=&quot;34a9&quot; id=&quot;34a9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What if they use some weird oil on my head ?&lt;/p&gt;&lt;p name=&quot;a0ed&quot; id=&quot;a0ed&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Will they clean the razor before using it on my skin ?&lt;/p&gt;&lt;p name=&quot;a12e&quot; id=&quot;a12e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Will they wash my hair afterwards ?&lt;/p&gt;&lt;p name=&quot;43bc&quot; id=&quot;43bc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Will they understand exactly how I want my haircut to be ?&lt;/p&gt;&lt;p name=&quot;b8ea&quot; id=&quot;b8ea&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;What if an inexperienced guy mistakenly cuts my skin ?&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;9977&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;3c3e&quot; id=&quot;3c3e&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;The Wait&lt;/h3&gt;&lt;p name=&quot;9125&quot; id=&quot;9125&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;As usual, there’s a huge line in waiting. Ahhh, the dreaded wait.&lt;/p&gt;&lt;figure name=&quot;cb89&quot; id=&quot;cb89&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 460px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 65.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*gLuaR7gOL3Rh53LaFllpbQ.jpeg&quot; data-width=&quot;800&quot; data-height=&quot;526&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*gLuaR7gOL3Rh53LaFllpbQ.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://www.westernseminary.edu/transformedblog&quot; data-href=&quot;https://www.westernseminary.edu/transformedblog&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.westernseminary.edu/transformedblog&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;1438&quot; id=&quot;1438&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;As I wait patiently for my turn to come, I constantly think about whom I want to cut my hair.&lt;/p&gt;&lt;p name=&quot;7fe0&quot; id=&quot;7fe0&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Hmmmm, he looks experienced?”&lt;/p&gt;&lt;p name=&quot;2151&quot; id=&quot;2151&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Oh no! he’s just not focussed”&lt;/p&gt;&lt;p name=&quot;3729&quot; id=&quot;3729&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“His work looks messy”&lt;/p&gt;&lt;p name=&quot;bb2f&quot; id=&quot;bb2f&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Too much talking. Nah!”&lt;/p&gt;&lt;p name=&quot;b02b&quot; id=&quot;b02b&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“I think this is the perfect one. He’s listening to the customer and is taking his time”&lt;/p&gt;&lt;p name=&quot;1e4f&quot; id=&quot;1e4f&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;But I almost never get the one I want. Never!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;edfe&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;45b6&quot; id=&quot;45b6&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;And, its my turn&lt;/h3&gt;&lt;p name=&quot;5197&quot; id=&quot;5197&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;And finally, they call out “Next!” and I know its my turn.&lt;/p&gt;&lt;p name=&quot;3e01&quot; id=&quot;3e01&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Oh No. This is exactly the person I didn’t want me to work on my precious hair. He’ll surely spoil it.”&lt;/p&gt;&lt;p name=&quot;5ddb&quot; id=&quot;5ddb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I’m seated on the hot seat and the million dollar question comes up.&lt;/p&gt;&lt;p name=&quot;9477&quot; id=&quot;9477&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Sir, How would you like your hair cut?”&lt;/p&gt;&lt;p name=&quot;932f&quot; id=&quot;932f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;And my reply which has been the same for over a decade now is&lt;/p&gt;&lt;blockquote name=&quot;2607&quot; id=&quot;2607&quot; class=&quot;graf graf--pullquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Don’t cut them too short, I want the length to be equal on all sides. Nothing fancy”&lt;/blockquote&gt;&lt;p name=&quot;38d8&quot; id=&quot;38d8&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Somehow, nobody seems to grasp this perfectly. What they instead hear is&lt;/p&gt;&lt;blockquote name=&quot;9b12&quot; id=&quot;9b12&quot; class=&quot;graf graf--pullquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Medium haircut”&lt;/blockquote&gt;&lt;figure name=&quot;d75c&quot; id=&quot;d75c&quot; class=&quot;graf graf--figure graf-after--pullquote&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 673px; max-height: 494px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 73.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*sorVzz97vPMzyQ0G2o6CXQ.jpeg&quot; data-width=&quot;673&quot; data-height=&quot;494&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*sorVzz97vPMzyQ0G2o6CXQ.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;fe74&quot; id=&quot;fe74&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Why do they forget the part where they had to keep all my hair equal ?&lt;/p&gt;&lt;h3 name=&quot;4a56&quot; id=&quot;4a56&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Trimmer or Scissors&lt;/h3&gt;&lt;p name=&quot;8eb2&quot; id=&quot;8eb2&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Now, the next scariest thing when the barber starts off is whether they will use the good old scissors or the dreaded trimmer.&lt;/p&gt;&lt;p name=&quot;03a2&quot; id=&quot;03a2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The trimmer does the job very quickly, but sometimes too quickly. And the scissors, well, it does take time but they’re the best if you ask me.&lt;/p&gt;&lt;p name=&quot;38a6&quot; id=&quot;38a6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As usual, the barber decides to use a trimmer. :((&lt;/p&gt;&lt;p name=&quot;1a1a&quot; id=&quot;1a1a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now this is the moment where my heart starts pounding.&lt;/p&gt;&lt;p name=&quot;332f&quot; id=&quot;332f&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“The trimmer is coming close.”&lt;/p&gt;&lt;p name=&quot;937c&quot; id=&quot;937c&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“What if he makes a deep cut. There’s no going back.”&lt;/p&gt;&lt;p name=&quot;453b&quot; id=&quot;453b&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Buckle up Sachin! This is it.”&lt;/p&gt;&lt;figure name=&quot;2fc9&quot; id=&quot;2fc9&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 467px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 66.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*LKFUJK6UnXCgzFIPBui-sA.jpeg&quot; data-width=&quot;900&quot; data-height=&quot;600&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*LKFUJK6UnXCgzFIPBui-sA.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://smartblogger.com/fear-openings/&quot; data-href=&quot;https://smartblogger.com/fear-openings/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://smartblogger.com/fear-openings/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;21a0&quot; id=&quot;21a0&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The barber brings a small trimmer towards me. But, what I see is this.&lt;/p&gt;&lt;figure name=&quot;9d72&quot; id=&quot;9d72&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 467px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 66.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*AG85XPYa6cx4GrLt0QIydw.jpeg&quot; data-width=&quot;768&quot; data-height=&quot;512&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*AG85XPYa6cx4GrLt0QIydw.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://www.thoughtco.com/using-regular-motor-oil-chainsaw-bar-1342724&quot; data-href=&quot;https://www.thoughtco.com/using-regular-motor-oil-chainsaw-bar-1342724&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.thoughtco.com/using-regular-motor-oil-chainsaw-bar-1342724&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;ccce&quot; id=&quot;ccce&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Aaaaaaaaand. Zap!&lt;/p&gt;&lt;p name=&quot;46f2&quot; id=&quot;46f2&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Oh GOD, did he cut it too short?”&lt;/p&gt;&lt;p name=&quot;4845&quot; id=&quot;4845&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Sometimes, its a yes and I feel as if I’m scarred for life.&lt;/p&gt;&lt;p name=&quot;625b&quot; id=&quot;625b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Sometimes, its a no and I’m like “Phew!” . But the haircut session is not over yet. Things can still go bad.&lt;/p&gt;&lt;p name=&quot;9a45&quot; id=&quot;9a45&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;After about 10 minutes of using the trimmer to butcher my hair, the barber decides to finally use a scissor and I feel a sigh of relief.&lt;/p&gt;&lt;figure name=&quot;76ed&quot; id=&quot;76ed&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 600px; max-height: 770px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 128.29999999999998%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*wQATo9jQqe0iBm8WSYZTnA.jpeg&quot; data-width=&quot;600&quot; data-height=&quot;770&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*wQATo9jQqe0iBm8WSYZTnA.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://makeameme.org/meme/phew-thank-goodness&quot; data-href=&quot;https://makeameme.org/meme/phew-thank-goodness&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://makeameme.org/meme/phew-thank-goodness&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;0bd0&quot; id=&quot;0bd0&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The most peaceful time during the entire session is when the barber uses the scissors. I feel at peace. At least there won’t be anything sudden and they would cut my hair carefully.&lt;/p&gt;&lt;p name=&quot;b6f2&quot; id=&quot;b6f2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It’s not like with trimmers. One mistake. One shake up. And a patch of my hair is gone. :/ :/&lt;/p&gt;&lt;p name=&quot;2de7&quot; id=&quot;2de7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;And then there’s no going back.&lt;/p&gt;&lt;p name=&quot;37b1&quot; id=&quot;37b1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Anyways. Over the years I’ve learnt to tell the barber I want my hair cut to be medium which is not usually what I want. The reason is that if they cut it too short initially and not not according to what I want the hair can’t grow back instantly right ?&lt;/p&gt;&lt;p name=&quot;135e&quot; id=&quot;135e&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;So I tell them to cut it medium initially and I tell them to shorten it again after they ask me if the hair cut looks good. 😛😛&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;45b0&quot; class=&quot;section section--body section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;78e2&quot; id=&quot;78e2&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;It’s done&lt;/h3&gt;&lt;p name=&quot;8aea&quot; id=&quot;8aea&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Finally, the hair cut is done. And I feel like its a disaster. As usual.&lt;/p&gt;&lt;p name=&quot;ff1b&quot; id=&quot;ff1b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I am never happy with the hair cut. I have to put up a fake smile though.&lt;/p&gt;&lt;figure name=&quot;5b5b&quot; id=&quot;5b5b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 582px; max-height: 508px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 87.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*VoQmfa53diec86o8sB9Mjw.png&quot; data-width=&quot;582&quot; data-height=&quot;508&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*VoQmfa53diec86o8sB9Mjw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://www.pinterest.com/pin/748301294306046836/?lp=true&quot; data-href=&quot;https://www.pinterest.com/pin/748301294306046836/?lp=true&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.pinterest.com/pin/748301294306046836/?lp=true&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;2ab8&quot; id=&quot;2ab8&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I pay the barber and I’m on my way back thinking about what I can change the next time I come in for a haircut.&lt;/p&gt;&lt;p name=&quot;02eb&quot; id=&quot;02eb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is me walking out of the barber shop.&lt;/p&gt;&lt;figure name=&quot;6255&quot; id=&quot;6255&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 432px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 61.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*JRy-c6ItxbpdCjnqe17VMg.jpeg&quot; data-width=&quot;810&quot; data-height=&quot;500&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*JRy-c6ItxbpdCjnqe17VMg.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Source: &lt;a href=&quot;https://www.lifesitenews.com/blogs/as-absurd-as-it-sounds-this-is-how-we-picked-up-our-abortionist-on-abortion&quot; data-href=&quot;https://www.lifesitenews.com/blogs/as-absurd-as-it-sounds-this-is-how-we-picked-up-our-abortionist-on-abortion&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.lifesitenews.com/blogs/as-absurd-as-it-sounds-this-is-how-we-picked-up-our-abortionist-on-abortion&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Tree Traversals explained: They’re like a class of lazy students trying to cheat on their exam</title>
   <link href="http://localhost:4000/2018/02/14/Tree-Traversals-explained-They-re-like-a-class-of-lazy-students-trying-to-cheat-on-their-exam-b46563211427/"/>
   <updated>2018-02-14T00:00:00-08:00</updated>
   <id>http://localhost:4000/2018/02/14/Tree-Traversals-explained--They-re-like-a-class-of-lazy-students-trying-to-cheat-on-their-exam-b46563211427</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Tree Traversals explained: They’re like a class of lazy students trying to cheat on their exam&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Tree Traversals explained: They’re like a class of lazy students trying to cheat on their exam&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
Imagine that you are enrolled in a math class at one of the most prestigious universities of the world.
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;83ec&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;5e0b&quot; id=&quot;5e0b&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;419e&quot; id=&quot;419e&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 56.99999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*tCYpJPPIECnHUWw9BR_vrg.png&quot; data-width=&quot;1252&quot; data-height=&quot;714&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*tCYpJPPIECnHUWw9BR_vrg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;http://blog.noplag.com/wp-content/uploads/2017/01/cheating-on-a-test-clip-art-red-cheating-on-blues-test.png&quot; data-href=&quot;http://blog.noplag.com/wp-content/uploads/2017/01/cheating-on-a-test-clip-art-red-cheating-on-blues-test.png&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://blog.noplag.com/wp-content/uploads/2017/01/cheating-on-a-test-clip-art-red-cheating-on-blues-test.png&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;3d47&quot; id=&quot;3d47&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Imagine that you are enrolled in a math class at one of the most prestigious universities of the world.&lt;/p&gt;&lt;p name=&quot;0f00&quot; id=&quot;0f00&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You have an exam coming up real soon. Obviously, you want to perform well on the exam.&lt;/p&gt;&lt;p name=&quot;2159&quot; id=&quot;2159&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The thing about this university is that it has a clumsy set of professors. So cheating is really simple. You can easily copy from the guy sitting behind and ahead without getting caught.&lt;/p&gt;&lt;p name=&quot;921b&quot; id=&quot;921b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The professors, in order to take control of this problem, came up with two solutions:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;3554&quot; id=&quot;3554&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;The number of students sitting in a class is never fixed. And the people sitting in one class taking the test change from one test to another.&lt;/li&gt;&lt;li name=&quot;313f&quot; id=&quot;313f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The seating arrangement is released five minutes before the exam. The seating arrangement is alphabetical. But since the students are never fixed and new ones may get added or old ones removed from a class randomly, the arrangement has to be explicitly released for the students to know where exactly they have to sit.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;77f7&quot; id=&quot;77f7&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Say you’re one of those lazy students who wants to cheat, despite the consequences. Five minutes before the exam when the seating arrangement is released, how do you find out who is sitting in front of you and who’s behind as quickly as possible?&lt;/p&gt;&lt;p name=&quot;c776&quot; id=&quot;c776&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You won’t be able to cheat if you don’t talk to these two people beforehand and strategize, right?&lt;/p&gt;&lt;h3 name=&quot;ed83&quot; id=&quot;ed83&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Seating Arrangement&lt;/h3&gt;&lt;p name=&quot;458f&quot; id=&quot;458f&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;So the professors released the seating arrangement for the first test ever conducted this way. Say it had N students. If these students were to remain the same from one test to another, then it would have been very easy to cheat, right? Because the seating arrangement is always done alphabetically.&lt;/p&gt;&lt;p name=&quot;3d37&quot; id=&quot;3d37&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Therefore, the professors keep on adding or removing students from this list from one test to another, and only released these modifications before each test. This way, students could never know deterministically before a test who would be sitting in front of or behind them.&lt;/p&gt;&lt;p name=&quot;8d25&quot; id=&quot;8d25&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s consider this problem in algorithmic terms. We are given a list of N elements where elements in this case are student’s names. This list keeps on varying from one exam to another, such that new elements can be added to the list or existing elements can be removed from the list.&lt;/p&gt;&lt;p name=&quot;0d17&quot; id=&quot;0d17&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Given the list of modifications at any given time T and a name N, we need to determine the elements B and A, such that B would come right before N and A would come right after N if the list were to be sorted.&lt;/p&gt;&lt;p name=&quot;173b&quot; id=&quot;173b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now let’s look at what data structures are available to us and what would suit this problem the best.&lt;/p&gt;&lt;h3 name=&quot;c56c&quot; id=&quot;c56c&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Oh Array, my old friend, will you help me?&lt;/h3&gt;&lt;p name=&quot;be20&quot; id=&quot;be20&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Using an array seems to be a rather straightforward approach.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;4486&quot; id=&quot;4486&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;We can simply put all the names on the released list in an array.&lt;/li&gt;&lt;li name=&quot;1265&quot; id=&quot;1265&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Then we sort all the names (the list of names released might be randomly arranged) lexicographically&lt;/li&gt;&lt;li name=&quot;c626&quot; id=&quot;c626&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;And then we can find our name in the list by using a binary search procedure. This would give us the predecessor and the successor.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;fab0&quot; id=&quot;fab0&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;This seems to be a viable approach to solve this problem. The issue at hand, however, is that the students are never fixed from one exam to another. And so the list that was released for the very first exam would vary dynamically when new students were added and old ones were removed.&lt;/p&gt;&lt;p name=&quot;a57e&quot; id=&quot;a57e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We can sort the list for the very first time, and then keep on adding new elements and removing old ones accordingly moving forward.&lt;/p&gt;&lt;p name=&quot;23fa&quot; id=&quot;23fa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, the complexity of adding or removing an element from an array is of the order &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(n)&lt;/code&gt; . Since the number of students could be very large, and we don’t know how many modifications there would be before some new test, this would take a lot of time and the test would start before we could solve the problem. Remember that the modifications are released just five minutes before the test.&lt;/p&gt;&lt;p name=&quot;d1e6&quot; id=&quot;d1e6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So what other data structure do we have where insertion and deletion can be done very quickly?&lt;/p&gt;&lt;h3 name=&quot;334b&quot; id=&quot;334b&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Hmmmm, maybe Linked List is my true friend after all&lt;/h3&gt;&lt;p name=&quot;77b0&quot; id=&quot;77b0&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;As far as a linked list is concerned, it has it’s own set of problems when dealing with this type of situation. Initially, we need to sort the list of elements lexicographically. Since this is a one-time operation, because it is only to be done for the first exam, the time taken here does not really matter.&lt;/p&gt;&lt;p name=&quot;310c&quot; id=&quot;310c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;From the next exam onwards, only the modifications are released. Adding or deleting an element from a linked list is a constant time operation, provided we know the location of that element in the list.&lt;/p&gt;&lt;p name=&quot;378e&quot; id=&quot;378e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Finding an element in a linked list is a linear time operation — it takes &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(n)&lt;/code&gt; . I know there are concepts like &lt;a href=&quot;https://en.wikipedia.org/wiki/Skip_list&quot; data-href=&quot;https://en.wikipedia.org/wiki/Skip_list&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;skip lists&lt;/a&gt;, but why dive into something like this when we can solve this problem in a much better fashion by using another type of data structure?&lt;/p&gt;&lt;h3 name=&quot;12d4&quot; id=&quot;12d4&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Enter Binary Search Trees, the new kid in town&lt;/h3&gt;&lt;p name=&quot;a1f7&quot; id=&quot;a1f7&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let’s look at how we can model our data using a binary search tree (BST). Then we’ll see how a BST can help us solve the problem we initially set out to solve.&lt;/p&gt;&lt;p name=&quot;bc4e&quot; id=&quot;bc4e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A Binary Search Tree is basically a binary tree with a special way of ordering the nodes.&lt;/p&gt;&lt;p name=&quot;0e66&quot; id=&quot;0e66&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;For a node with key &lt;em class=&quot;markup--em markup--p-em&quot;&gt;k&lt;/em&gt;, every key in the left subtree is less than &lt;em class=&quot;markup--em markup--p-em&quot;&gt;k &lt;/em&gt;and every key in the right subtree is greater than &lt;em class=&quot;markup--em markup--p-em&quot;&gt;k&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;9e6b&quot; id=&quot;9e6b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In our case, the keys will be the names of the students.&lt;/p&gt;&lt;p name=&quot;fc77&quot; id=&quot;fc77&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Consider the following example to see how a binary search tree is constructed. This should lend greater clarity to the data structure.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;2272&quot; id=&quot;2272&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 1167px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 116.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*fvAa2lIvPcl3pEF0EwjT_g.png&quot; data-width=&quot;1200&quot; data-height=&quot;1400&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*fvAa2lIvPcl3pEF0EwjT_g.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;http://btechsmartclass.com/DS/images/BST%20Construction.png&quot; data-href=&quot;http://btechsmartclass.com/DS/images/BST%20Construction.png&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://btechsmartclass.com/DS/images/BST%20Construction.png&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;7c4f&quot; id=&quot;7c4f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Constructing a Binary Search Tree is not enough. We need to make sure it is &lt;a href=&quot;http://www.stoimen.com/blog/2012/07/03/computer-algorithms-balancing-a-binary-search-tree/&quot; data-href=&quot;http://www.stoimen.com/blog/2012/07/03/computer-algorithms-balancing-a-binary-search-tree/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;balanced&lt;/a&gt;. The reason we say that a Binary Search Tree needs to be balanced is that, if it is not balanced, then we can have something like this:&lt;/p&gt;&lt;figure name=&quot;c4e4&quot; id=&quot;c4e4&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 781px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 111.60000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*4rHcryjV-ySjXORcxzqQeA.png&quot; data-width=&quot;896&quot; data-height=&quot;1000&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*4rHcryjV-ySjXORcxzqQeA.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;A left skewed binary search tree.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;5523&quot; id=&quot;5523&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This is known as a skewed binary search tree. If such a thing happens, then the BST basically transforms into a linked list and that is of no use to us. Therefore, we have this notion of keeping a BST balanced so that we don’t run into this problem.&lt;/p&gt;&lt;p name=&quot;f2ea&quot; id=&quot;f2ea&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The notion of balanced is defined differently by different approaches, like Red Black Trees or AVL trees. Further explanation of these trees is out of the scope of this article.&lt;/p&gt;&lt;p name=&quot;8aba&quot; id=&quot;8aba&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Coming back to arranging our data in a balanced BST: the keys to our BST would be the names of the students, and lexicographic matching would be used to determine the structure of the BST.&lt;/p&gt;&lt;p name=&quot;edc4&quot; id=&quot;edc4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Suppose that there were a million students taking the test. If our binary search tree is balanced, then the complexity of performing any operation is upper bounded by &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(log(n))&lt;/code&gt; . &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Hence, for 1 million nodes, the maximum number of nodes to be scanned would be just 14.&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;bcfe&quot; id=&quot;bcfe&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 750px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 75%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*WX_no1yjkuvyro78viF21w.png&quot; data-width=&quot;1920&quot; data-height=&quot;1440&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*WX_no1yjkuvyro78viF21w.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;57ea&quot; id=&quot;57ea&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;That’s a lot of complexity reduction simply by arranging the data in a certain manner. That is the advantage of representing data in a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;balanced&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;Binary Search Tree.&lt;/p&gt;&lt;p name=&quot;4acf&quot; id=&quot;4acf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The main problem with the array-based approach was that we could not efficiently insert or delete an element from the array. And the problem with the linked list approach was that there was no efficient way for us to find an element in the linked list even if it were sorted.&lt;/p&gt;&lt;p name=&quot;53ff&quot; id=&quot;53ff&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As for a balanced binary search tree, the time complexity to insert, delete, or search for an element is all bounded by &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(log(n))&lt;/code&gt; . And this is precisely what makes this data structure extremely exciting.&lt;/p&gt;&lt;p name=&quot;d72e&quot; id=&quot;d72e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, we still haven’t solved our original problem. Given the name of a student, we want to find out the student sitting right behind and right in front of them. This boils down to finding the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;in-order successor and predecessor in the given Binary Search Tree.&lt;/strong&gt;&lt;/p&gt;&lt;h3 name=&quot;f5a0&quot; id=&quot;f5a0&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;In-order Traversal and Sorted Order in a BST&lt;/h3&gt;&lt;p name=&quot;cc30&quot; id=&quot;cc30&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;An interesting property of the binary search trees is that we can retrieve the elements in the sorted order (even reverse) by doing an in-order traversal over the binary search tree.&lt;/p&gt;&lt;p name=&quot;5169&quot; id=&quot;5169&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So the in-order successor of a node X is the element that comes right after X in the in-order traversal over the given BST. For our cheating problem, this in-order successor would be the student sitting in front of us.&lt;/p&gt;&lt;p name=&quot;ed62&quot; id=&quot;ed62&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The in-order predecessor of a node X is the element that comes right before X in the in-order traversal (or the element that comes right after X in the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;reverse&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;in-order traversal) over the given BST. For our cheating problem, this in-order predecessor would be the student sitting right behind us.&lt;/p&gt;&lt;h3 name=&quot;6134&quot; id=&quot;6134&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;In-order Successor in a BST&lt;/h3&gt;&lt;p name=&quot;33f2&quot; id=&quot;33f2&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;There are two different cases that we need to handle when finding the in-order successor of a node in a BST.&lt;/p&gt;&lt;p name=&quot;245d&quot; id=&quot;245d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;The first case&lt;/strong&gt; is when the right child exists for the node whose in-order successor we are trying to find. Consider the following example.&lt;/p&gt;&lt;figure name=&quot;6e30&quot; id=&quot;6e30&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 657px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 93.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*HT_4eHf-yWORRyajZGfbqg.png&quot; data-width=&quot;1164&quot; data-height=&quot;1092&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*HT_4eHf-yWORRyajZGfbqg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;2b63&quot; id=&quot;2b63&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Here we wanted to find the in-order successor of the highlighted node 8. Since it has a right child, the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;in-order successor would be the leftmost node in the tree with a right child, or 15 as the root&lt;/strong&gt;. So that node would be 10 in this case.&lt;/p&gt;&lt;p name=&quot;d2ca&quot; id=&quot;d2ca&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;The second case&lt;/strong&gt; is when there is no right child.&lt;/p&gt;&lt;figure name=&quot;8cae&quot; id=&quot;8cae&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 491px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 70.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*z6Q879IxNa5B6jRC6s1CaQ.png&quot; data-width=&quot;1024&quot; data-height=&quot;718&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*z6Q879IxNa5B6jRC6s1CaQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;5c99&quot; id=&quot;5c99&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In this case, the in-order successor has two possibilities:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;0bac&quot; id=&quot;0bac&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;One is where the node under consideration is the left child of its parent. In this case, the in-order successor would be the parent itself. So for our given case, the in-order successor would be 10.&lt;/li&gt;&lt;li name=&quot;d6a3&quot; id=&quot;d6a3&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The second case is when the current node is the right child of it’s parent. And it doesn’t have a right child. So it is the rightmost node in the BST and it has no in-order successor.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;45f3&quot; id=&quot;45f3&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Handling the first case is fairly simple for a binary search tree. For the second case, where the given node does not have a right child (or any parent pointers), we will have to rely on our good ol’ recursion mechanism and do an in-order traversal until we figure out the parent of our given node.&lt;/p&gt;&lt;figure name=&quot;b0af&quot; id=&quot;b0af&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/3027aa03ef813ae30d318d1b5e4de6bc.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;e5e6&quot; id=&quot;e5e6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So, the worst case complexity can be O(n) if the case above occurs.&lt;/p&gt;&lt;p name=&quot;9030&quot; id=&quot;9030&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Using this algorithm, we can quickly find out the student who will be sitting right in front of us in the exam.&lt;/p&gt;&lt;h3 name=&quot;f498&quot; id=&quot;f498&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;In-order Predecessor in a BST&lt;/h3&gt;&lt;p name=&quot;a6fe&quot; id=&quot;a6fe&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This is the exact reverse of the previous case.&lt;/p&gt;&lt;p name=&quot;1298&quot; id=&quot;1298&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Again, we need to handle two different cases when finding the in-order predecessor of a node in a BST. Look at the following diagrams and try to relate the two cases being referred to here.&lt;/p&gt;&lt;figure name=&quot;cfc2&quot; id=&quot;cfc2&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 585px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 83.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*8LEzigzWixE_psr5BDeqdA.png&quot; data-width=&quot;1100&quot; data-height=&quot;920&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*8LEzigzWixE_psr5BDeqdA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;9a68&quot; id=&quot;9a68&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This is the case where the node has a left child. We need to find the rightmost child of the tree rooted at this left child — the rightmost node in the tree rooted at 2.&lt;/p&gt;&lt;figure name=&quot;a3da&quot; id=&quot;a3da&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 556px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 79.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*MXJ1lCqihi0bmcfelm5WFA.png&quot; data-width=&quot;1096&quot; data-height=&quot;870&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*MXJ1lCqihi0bmcfelm5WFA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;1e87&quot; id=&quot;1e87&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;No left child. So we need to find the parent.&lt;/p&gt;&lt;figure name=&quot;3c9b&quot; id=&quot;3c9b&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/ada4adda364c26e87ff658659eb082b2.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;4ae6&quot; id=&quot;4ae6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;If you look closely, I’ve just reversed the order of traversal here and the rest of the code is the same as before. (NOTE: this code is used when there is no left child of the node for which we want to find the in-order predecessor).&lt;/p&gt;&lt;p name=&quot;b363&quot; id=&quot;b363&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;In-order predecessor becomes the reverse in-order successor.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;b36d&quot; id=&quot;b36d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Well now that you know how you should arrange the class seating arrangement list, go get some solid marks 😜😜😜. Just kidding!! Cheating is bad — don’t ever do it!&lt;/p&gt;&lt;p name=&quot;4fa9&quot; id=&quot;4fa9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Hope you got the main idea behind the different usages for data structures and how to find the in-order successor and predecessor in a BST.&lt;/p&gt;&lt;p name=&quot;502e&quot; id=&quot;502e&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;EDIT: Kudos to &lt;a href=&quot;https://medium.com/u/842b783318b8&quot; data-href=&quot;https://medium.com/u/842b783318b8&quot; data-anchor-type=&quot;2&quot; data-user-id=&quot;842b783318b8&quot; data-action-value=&quot;842b783318b8&quot; data-action=&quot;show-user-card&quot; data-action-type=&quot;hover&quot; class=&quot;markup--user markup--p-user&quot; target=&quot;_blank&quot;&gt;Divya Godayal&lt;/a&gt; for pointing out a set of major mistakes in the initial draft and also for ensuring that the article flows nicely :) :)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Let’s Backtrack And Save Some Queens</title>
   <link href="http://localhost:4000/2017/12/20/Let-s-Backtrack-And-Save-Some-Queens-1f9ef6af5415/"/>
   <updated>2017-12-20T00:00:00-08:00</updated>
   <id>http://localhost:4000/2017/12/20/Let-s-Backtrack-And-Save-Some-Queens-1f9ef6af5415</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Let’s Backtrack And Save Some Queens&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Let’s Backtrack And Save Some Queens&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
That’s a weird looking title, that probably doesn’t make sense right now. But trust me, this is a pretty long post and is really fun!
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;ed44&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;c283&quot; id=&quot;c283&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;5d03&quot; id=&quot;5d03&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 750px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 75%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*uHVAfKRI6gPxiAmzCTnRCg.jpeg&quot; data-width=&quot;1200&quot; data-height=&quot;900&quot; data-is-featured=&quot;true&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*uHVAfKRI6gPxiAmzCTnRCg.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;https://derickbailey.com/wp-content/uploads/2015/01/recursion1.jpg&quot; data-href=&quot;https://derickbailey.com/wp-content/uploads/2015/01/recursion1.jpg&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://derickbailey.com/wp-content/uploads/2015/01/recursion1.jpg&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;88b9&quot; id=&quot;88b9&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;That’s a weird looking title, that probably doesn’t make sense right now. But trust me, this is a pretty long post and is really fun!&lt;/p&gt;&lt;h4 name=&quot;db6f&quot; id=&quot;db6f&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;What is Backtracking ?&lt;/h4&gt;&lt;p name=&quot;ef53&quot; id=&quot;ef53&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Backtracking&quot; data-href=&quot;https://en.wikipedia.org/wiki/Backtracking&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Backtracking&lt;/a&gt; is a standard problem solving technique based on &lt;a href=&quot;https://medium.freecodecamp.org/recursion-recursion-recursion-4db8890a674d&quot; data-href=&quot;https://medium.freecodecamp.org/recursion-recursion-recursion-4db8890a674d&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;recursion&lt;/a&gt;.&lt;/p&gt;&lt;p name=&quot;102a&quot; id=&quot;102a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A backtracking algorithm tries to build a solution to a computational problem incrementally. Whenever the algorithm needs to decide between multiple alternatives to the next component of the solution, it simply tries all possible options recursively.&lt;/p&gt;&lt;p name=&quot;500c&quot; id=&quot;500c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot; data-href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Depth First Search&lt;/a&gt; (DFS) uses the concept of backtracking at its very core. So, in DFS, we basically try exploring all the paths from the given node recursively until we reach the goal. After we explore a particular branch of a tree in DFS, we can land up in two possible states.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;ee9b&quot; id=&quot;ee9b&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;We found the goal state in which case we simply exit.&lt;/li&gt;&lt;li name=&quot;ad94&quot; id=&quot;ad94&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Or, we did not find the goal state and we hit a dead end. In this scenario, we &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;backtrack to the last checkpoint &lt;/em&gt;&lt;/strong&gt;and we then try out a different branch.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;51bc&quot; id=&quot;51bc&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;For detailed introduction to the Depth First Search Algorithm, go through&lt;/p&gt;&lt;div name=&quot;1a77&quot; id=&quot;1a77&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&quot; data-href=&quot;https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Deep Dive Through A Graph: DFS Traversal&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;For better or for worse, there’s always more than one way to do something. Luckily for us, in the world of software and…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href=&quot;https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;bb894314fd4f6106b914ca6c727c3402&quot; data-thumbnail-img-id=&quot;1*gb8XfmH7x8fJniMeXk4uHg.jpeg&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/1*gb8XfmH7x8fJniMeXk4uHg.jpeg);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;da54&quot; id=&quot;da54&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;and for a detailed intro to backtracking and recursion in general, check out the following two articles.&lt;/p&gt;&lt;div name=&quot;5c3d&quot; id=&quot;5c3d&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.com/@andreaiacono/backtracking-explained-7450d6ef9e1a&quot; data-href=&quot;https://medium.com/@andreaiacono/backtracking-explained-7450d6ef9e1a&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://medium.com/@andreaiacono/backtracking-explained-7450d6ef9e1a&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Backtracking explained&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;Backtracking is one of my favourite algorithms because of its simplicity and elegance; it doesn’t always have great…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href=&quot;https://medium.com/@andreaiacono/backtracking-explained-7450d6ef9e1a&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;5e0934b7f97faaa007e516c4fd5af65f&quot; data-thumbnail-img-id=&quot;1*UOupQbgJEDuOTgZSLg-EfQ.png&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/1*UOupQbgJEDuOTgZSLg-EfQ.png);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div name=&quot;cc4b&quot; id=&quot;cc4b&quot; class=&quot;graf graf--mixtapeEmbed graf-after--mixtapeEmbed&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.org/how-recursion-works-explained-with-flowcharts-and-a-video-de61f40cb7f9&quot; data-href=&quot;https://medium.freecodecamp.org/how-recursion-works-explained-with-flowcharts-and-a-video-de61f40cb7f9&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://medium.freecodecamp.org/how-recursion-works-explained-with-flowcharts-and-a-video-de61f40cb7f9&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;How Recursion Works — explained with flowcharts and a video&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;“In order to understand recursion, one must first understand recursion.”&lt;/em&gt;medium.freecodecamp.org&lt;/a&gt;&lt;a href=&quot;https://medium.freecodecamp.org/how-recursion-works-explained-with-flowcharts-and-a-video-de61f40cb7f9&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;b6725f4a6fbfe17fe20e9e11c9c2acab&quot; data-thumbnail-img-id=&quot;1*FVSUmSQEEsagXaKa_ajtvA.png&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/1*FVSUmSQEEsagXaKa_ajtvA.png);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;77cf&quot; id=&quot;77cf&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;Now that we are all pros in backtracking and recursion, let’s see what do “Queens” have to do with all this.&lt;/p&gt;&lt;h3 name=&quot;447c&quot; id=&quot;447c&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Famous N-Queens Problem&lt;/h3&gt;&lt;p name=&quot;82ff&quot; id=&quot;82ff&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;a href=&quot;http://www.drdobbs.com/jvm/optimal-queens/184406068&quot; data-href=&quot;http://www.drdobbs.com/jvm/optimal-queens/184406068&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Positioning queens&lt;/a&gt; on a chess board is a classical problem in mathematics and computer science.&lt;/p&gt;&lt;p name=&quot;fe79&quot; id=&quot;fe79&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot; data-href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Queen’s Puzzle&lt;/a&gt; (aka the eight queens puzzle), was originally published in 1848. It involves placing eight queens on an 8x8 chess board, in such a manner that no two queens can attack each other.&lt;/p&gt;&lt;p name=&quot;c133&quot; id=&quot;c133&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The queen happens to be the most powerful piece on the chess board, primarily because of the freedom of movement that it has.&lt;/p&gt;&lt;p name=&quot;393f&quot; id=&quot;393f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The queen can move in 8 different directions, as illustrated in the image below:&lt;/p&gt;&lt;figure name=&quot;4b47&quot; id=&quot;4b47&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 417px; max-height: 397px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 95.19999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*t_J-RtgpiipfiXhHs8uywg.jpeg&quot; data-width=&quot;417&quot; data-height=&quot;397&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*t_J-RtgpiipfiXhHs8uywg.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;8 directions for the Queen’s movement.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;a89c&quot; id=&quot;a89c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This freedom of movement is what makes the N-queens problem extremely hard.&lt;/p&gt;&lt;p name=&quot;8d4e&quot; id=&quot;8d4e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Below is a short overview of how the remainder of this article progresses. We’ll discuss 4 different algorithms to solve the problem:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;ad0f&quot; id=&quot;ad0f&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;The Brute Force solution.&lt;/li&gt;&lt;li name=&quot;b8a6&quot; id=&quot;b8a6&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Backtracking based solution.&lt;/li&gt;&lt;li name=&quot;72c1&quot; id=&quot;72c1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Permutations based solution.&lt;/li&gt;&lt;li name=&quot;41e1&quot; id=&quot;41e1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Finally, the seemingly crazy solution using Bit Magic.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;ecc2&quot; id=&quot;ecc2&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;I would highly recommend reading through the solutions in this order. However, feel free to skip a solution if you’re already familiar with it.&lt;/p&gt;&lt;p name=&quot;5c4c&quot; id=&quot;5c4c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The entire code for the solutions discussed below is available &lt;a href=&quot;https://github.com/edorado93/Save-The-Queens/tree/master&quot; data-href=&quot;https://github.com/edorado93/Save-The-Queens/tree/master&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3 name=&quot;4114&quot; id=&quot;4114&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Brute Force Solution&lt;/h3&gt;&lt;pre name=&quot;db6e&quot; id=&quot;db6e&quot; class=&quot;graf graf--pre graf-after--h3&quot;&gt;while there is life on earth:&lt;br&gt;    try a possible arrangement of queens.&lt;/pre&gt;&lt;figure name=&quot;6701&quot; id=&quot;6701&quot; class=&quot;graf graf--figure graf-after--pre&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 525px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 75%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Nclg6kDeZ7jWal80xCVt-Q.jpeg&quot; data-width=&quot;1440&quot; data-height=&quot;1080&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Nclg6kDeZ7jWal80xCVt-Q.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;https://i.ytimg.com/vi/keCgNXlq3Vo/maxresdefault.jpg&quot; data-href=&quot;https://i.ytimg.com/vi/keCgNXlq3Vo/maxresdefault.jpg&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://i.ytimg.com/vi/keCgNXlq3Vo/maxresdefault.jpg&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;27e7&quot; id=&quot;27e7&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We’ve got an 8x8 chessboard, which means we have 64 different spots to place the queens. We need to calculate C(64, 8), or the &lt;a href=&quot;http://www.mathwords.com/c/combination_formula.htm&quot; data-href=&quot;http://www.mathwords.com/c/combination_formula.htm&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;number of combinations&lt;/a&gt; of 64 objects, taken 8 at a time.&lt;/p&gt;&lt;pre name=&quot;a36b&quot; id=&quot;a36b&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;C(n,r) = n! / (r!(n−r)!)&lt;/pre&gt;&lt;p name=&quot;57aa&quot; id=&quot;57aa&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;We get around &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;4.5 billion different combinations of placing the 8 queens on an 8x8 chessboard.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;0945&quot; id=&quot;0945&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The brute-force algorithm is as follows:&lt;/p&gt;&lt;pre name=&quot;a1d8&quot; id=&quot;a1d8&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;while there are untried configurations&lt;br&gt;{&lt;br&gt;   generate the next configuration&lt;br&gt;   if queens don&amp;#39;t attack in this configuration then&lt;br&gt;   {&lt;br&gt;      print this configuration;&lt;br&gt;   }&lt;br&gt;}&lt;/pre&gt;&lt;p name=&quot;cc5d&quot; id=&quot;cc5d&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;That’s a lot of permutations to check for a standard processor. We could use some sort of multi-processing solution (because checking one permutation is independent of another one).&lt;/p&gt;&lt;p name=&quot;55e9&quot; id=&quot;55e9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But why do that when we have better algorithms to solve this problem?&lt;/p&gt;&lt;h3 name=&quot;b3cd&quot; id=&quot;b3cd&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Backtracking&lt;/h3&gt;&lt;p name=&quot;0277&quot; id=&quot;0277&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We can do better than the naïve brute force solution for this problem. Consider the following pseudocode for the backtracking based solution:&lt;/p&gt;&lt;pre name=&quot;13c3&quot; id=&quot;13c3&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;1) Start in the leftmost column&lt;br&gt;2) If all queens are placed&lt;br&gt;    increment the number of solutions counter and return&lt;br&gt;3) Try all rows in the current column. Do following for every tried row.&lt;br&gt;    a) If the queen can be placed safely in this row then mark this [row, column] as part of the solution and recursively check if placing queen here leads to a solution.&lt;/pre&gt;&lt;pre name=&quot;d035&quot; id=&quot;d035&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;    b) If placing queen in [row, column] leads to a solution then   increment the number of solutions counter and return&lt;/pre&gt;&lt;pre name=&quot;e7f8&quot; id=&quot;e7f8&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;    c) If placing queen doesn&amp;#39;t lead to a solution then unmark this [row, column] (Backtrack) and go to step (a) to try other rows.&lt;/pre&gt;&lt;pre name=&quot;fc4f&quot; id=&quot;fc4f&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;4) If all rows have been tried and nothing worked, return, to trigger backtracking.&lt;/pre&gt;&lt;p name=&quot;8334&quot; id=&quot;8334&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The pseudocode looks simple enough, and you can checkout the python based code for this &lt;a href=&quot;http://www.geeksforgeeks.org/backtracking-set-3-n-queen-problem/&quot; data-href=&quot;http://www.geeksforgeeks.org/backtracking-set-3-n-queen-problem/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. I won’t be providing description for the backtracking algorithm here.&lt;/p&gt;&lt;p name=&quot;c514&quot; id=&quot;c514&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I would however, like to&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;discuss an&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;optimization&lt;/strong&gt; to reduce the time complexity of checking if we can place a queen in a cell on the board.&lt;/p&gt;&lt;p name=&quot;4526&quot; id=&quot;4526&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;An important piece of the algorithm is where we have to check if a queen can be placed in a cell &lt;code class=&quot;markup--code markup--p-code&quot;&gt;[i, j]&lt;/code&gt;. This step takes a long time. Let’s look at a brute-force way to do this, and then at an optimized version.&lt;/p&gt;&lt;figure name=&quot;531c&quot; id=&quot;531c&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/6c0c29435574f70006a4f548bd5e5d49.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;f9b6&quot; id=&quot;f9b6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This has a &lt;a href=&quot;https://www.youtube.com/watch?v=KSNx22U4uWE&quot; data-href=&quot;https://www.youtube.com/watch?v=KSNx22U4uWE&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;time&lt;/strong&gt; &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;complexity&lt;/strong&gt;&lt;/a&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt; of O(N),&lt;/strong&gt; and this will be called multiple times for every cell on the board.&lt;/p&gt;&lt;p name=&quot;9e17&quot; id=&quot;9e17&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We can however, make use of some additional data structures to speed up the validity check for placing a queen on a cell &lt;code class=&quot;markup--code markup--p-code&quot;&gt;[i, j]&lt;/code&gt;. This will bring down the complexity to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(1)&lt;/code&gt; — in other words, constant time. This is a huge reduction!.&lt;/p&gt;&lt;figure name=&quot;5264&quot; id=&quot;5264&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/3b0cdbd4a3070544fbc332ce7b25175b.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;e261&quot; id=&quot;e261&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The keys points in this piece of code are the following :&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;83cd&quot; id=&quot;83cd&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;All the elements in a particular diagonal (from left top to right bottom) have the same value for &lt;code class=&quot;markup--code markup--li-code&quot;&gt;row — column&lt;/code&gt; .&lt;/li&gt;&lt;li name=&quot;68d2&quot; id=&quot;68d2&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;All the elements in a particular anti-diagonal (from right top to left bottom) have the same value for &lt;code class=&quot;markup--code markup--li-code&quot;&gt;row + column&lt;/code&gt; .&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;6f6d&quot; id=&quot;6f6d&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;This optimization brings down the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;isSafe&lt;/code&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;complexity to&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;O(1)&lt;/em&gt;&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;. &lt;/em&gt;&lt;/strong&gt;Hurray 😃.&lt;/p&gt;&lt;p name=&quot;8bca&quot; id=&quot;8bca&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we’re done with the basic algorithms for N-Queens. Let’s move onto some more complicated ones that run much faster than the ones described above.&lt;/p&gt;&lt;h3 name=&quot;bb19&quot; id=&quot;bb19&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Permutations and N-Queens&lt;/h3&gt;&lt;p name=&quot;2e90&quot; id=&quot;2e90&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The idea behind this algorithm is pretty simple. Consider the following facts about the placement of each queen:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;3f01&quot; id=&quot;3f01&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;We can only place one queen in a row.&lt;/li&gt;&lt;li name=&quot;104e&quot; id=&quot;104e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Same thing can be said for each column.&lt;/li&gt;&lt;li name=&quot;0283&quot; id=&quot;0283&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;This means that all successful solutions are just going to be &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;permutations of the column subscripts.&lt;/strong&gt;&lt;/li&gt;&lt;li name=&quot;36c9&quot; id=&quot;36c9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Each successive row has one fewer candidate position for the queen to be placed.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;569c&quot; id=&quot;569c&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Going by this logic, the problem space comes down to just &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;8! = 40,320.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;19ba&quot; id=&quot;19ba&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That gives a lot less options to try and to find the solutions for our problem.&lt;/p&gt;&lt;p name=&quot;cfae&quot; id=&quot;cfae&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at the pseudo-code for this approach:&lt;/p&gt;&lt;pre name=&quot;daeb&quot; id=&quot;daeb&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;* Start with an initial permutation of the queens lined up along one of the diagonals. &lt;/pre&gt;&lt;pre name=&quot;3f8a&quot; id=&quot;3f8a&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;* To position a queen on row j&lt;br&gt;    * If j has reached N, you have a valid solution. Process it as               valid.&lt;br&gt;    * Loop on k from j to N&lt;br&gt;       * Swap board[j] and board[k]. &lt;br&gt;       * Check if a queen can be placed on (row, board[row])&lt;br&gt;           * If yes, then place a queen and recurse for row j+1&lt;br&gt;       * Undo placing a queen on (row, board[row])&lt;br&gt;   * Undo the swaps done.   &lt;/pre&gt;&lt;p name=&quot;d81f&quot; id=&quot;d81f&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;For greater clarity, let’s look at the code as well:&lt;/p&gt;&lt;figure name=&quot;5f12&quot; id=&quot;5f12&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/814d06ba5a9fa14fe248ce950633c057.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;f37f&quot; id=&quot;f37f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Note: &lt;/strong&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;board[i]&lt;/code&gt; stores the column number where a queen has been placed in row &lt;code class=&quot;markup--code markup--p-code&quot;&gt;i.&lt;/code&gt; Hence, the cell value is given by &lt;code class=&quot;markup--code markup--p-code&quot;&gt;(i, board[i])&lt;/code&gt;.&lt;/p&gt;&lt;p name=&quot;e109&quot; id=&quot;e109&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This optimization speeds up the calculation a lot, because of the highly reduced board space to consider while placing the queens.&lt;/p&gt;&lt;p name=&quot;78fe&quot; id=&quot;78fe&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The speed up becomes more prominent as we increase the size of the board, and hence the number of queens to be placed.&lt;/p&gt;&lt;p name=&quot;8f7f&quot; id=&quot;8f7f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, the validity check for a particular cell becomes simpler, because now we only have to check diagonals and the anti-diagonals.&lt;/p&gt;&lt;h3 name=&quot;7275&quot; id=&quot;7275&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Let’s see some Bit Magic!&lt;/h3&gt;&lt;p name=&quot;b363&quot; id=&quot;b363&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This particular solution to the problem is something that was practically Greek to me the first time I went through it.&lt;/p&gt;&lt;p name=&quot;e4da&quot; id=&quot;e4da&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That’s understandable though, because hey, it’s &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;bit&lt;/strong&gt; &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;magic!&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;99c0&quot; id=&quot;99c0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But thankfully, I found this amazing &lt;a href=&quot;http://gregtrowbridge.com/a-bitwise-solution-to-the-n-queens-problem-in-javascript/&quot; data-href=&quot;http://gregtrowbridge.com/a-bitwise-solution-to-the-n-queens-problem-in-javascript/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; explaining the entire algorithm line by line. The code is in JavaScript. I’ll be describing the same thing but for the code in python. Read whichever post suits you :)&lt;/p&gt;&lt;p name=&quot;e0bc&quot; id=&quot;e0bc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The best way to go about explaining this algorithm is by putting up the code first 😉&lt;/p&gt;&lt;figure name=&quot;e2ba&quot; id=&quot;e2ba&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/3adb5593de64068f1cdd1afabe94e1fd.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;figure name=&quot;bc6b&quot; id=&quot;bc6b&quot; class=&quot;graf graf--figure graf-after--figure&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 525px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 75%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*yAqiXTpbu-6mRHQ5SjYn5Q.jpeg&quot; data-width=&quot;1024&quot; data-height=&quot;768&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*yAqiXTpbu-6mRHQ5SjYn5Q.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;http://mymemes.biz/wp-content/uploads/2017/10/meme-magic-59df0f3650800.jpg&quot; data-href=&quot;http://mymemes.biz/wp-content/uploads/2017/10/meme-magic-59df0f3650800.jpg&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://mymemes.biz/wp-content/uploads/2017/10/meme-magic-59df0f3650800.jpg&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;6a1b&quot; id=&quot;6a1b&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The algorithm works using the same basic idea that was discussed before. We only need to check three things before placing a queen on a certain square:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;e83a&quot; id=&quot;e83a&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;The square’s column doesn’t have any other queens on it&lt;/li&gt;&lt;li name=&quot;7e91&quot; id=&quot;7e91&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The square’s left diagonal doesn’t have any other queens on it&lt;/li&gt;&lt;li name=&quot;a53a&quot; id=&quot;a53a&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The square’s right diagonal doesn’t have any other queens on it&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;3d38&quot; id=&quot;3d38&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;The code might look like a black box that just seems to work. That’s how I felt the first time I read this insanely fast piece of code.&lt;/p&gt;&lt;p name=&quot;3306&quot; id=&quot;3306&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s try and break it down line by line.&lt;/p&gt;&lt;h4 name=&quot;a0ef&quot; id=&quot;a0ef&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Line #1&lt;/h4&gt;&lt;p name=&quot;b90f&quot; id=&quot;b90f&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;You’ll notice that the function accepts 4 parameters:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;04bc&quot; id=&quot;04bc&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;column&lt;/li&gt;&lt;li name=&quot;932f&quot; id=&quot;932f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;left_diagonal&lt;/li&gt;&lt;li name=&quot;9e51&quot; id=&quot;9e51&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;right_diagonal&lt;/li&gt;&lt;li name=&quot;dd30&quot; id=&quot;dd30&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;queens_placed&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;f044&quot; id=&quot;f044&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;The &lt;code class=&quot;markup--code markup--p-code u-paddingRight0 u-marginRight0&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;queens_placed&lt;/strong&gt; &lt;/code&gt;is self explanatory. We need to keep track of how many queens we have placed till now for the recursion to terminate at one point.&lt;/p&gt;&lt;p name=&quot;ea1e&quot; id=&quot;ea1e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The three variables &lt;code class=&quot;markup--code markup--p-code&quot;&gt;column&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;left_diagonal&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;right_diagonal &lt;/code&gt;are basically integers, but they are being treated as a sequence of bits for the purpose of this algorithm. These variables help us determine the open positions on the current row for a queen to be placed.&lt;/p&gt;&lt;p name=&quot;647a&quot; id=&quot;647a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at the picture below:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;aa50&quot; id=&quot;aa50&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;ld&lt;/code&gt; = left_diagonal&lt;/li&gt;&lt;li name=&quot;56cc&quot; id=&quot;56cc&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;cols&lt;/code&gt; = column&lt;/li&gt;&lt;li name=&quot;a277&quot; id=&quot;a277&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;rd&lt;/code&gt; = right_diagonal&lt;/li&gt;&lt;/ul&gt;&lt;figure name=&quot;d164&quot; id=&quot;d164&quot; class=&quot;graf graf--figure graf-after--li&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 358px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 51.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*u0D6tQbzP98BCTD54GfV9A.png&quot; data-width=&quot;1176&quot; data-height=&quot;602&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*u0D6tQbzP98BCTD54GfV9A.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;http://gregtrowbridge.com/a-bitwise-solution-to-the-n-queens-problem-in-javascript/&quot; data-href=&quot;http://gregtrowbridge.com/a-bitwise-solution-to-the-n-queens-problem-in-javascript/&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://gregtrowbridge.com/a-bitwise-solution-to-the-n-queens-problem-in-javascript/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;0590&quot; id=&quot;0590&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Ignore the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;poss&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;variable for now. We’ll get to it later on.&lt;/p&gt;&lt;h4 name=&quot;9cec&quot; id=&quot;9cec&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Lines #2–6&lt;/h4&gt;&lt;p name=&quot;4533&quot; id=&quot;4533&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;These lines of code simply handle the base case for recursion. When we have placed &lt;code class=&quot;markup--code markup--p-code&quot;&gt;N&lt;/code&gt; queens on our N by N board, we increment the number of solutions counter and print the solution if the appropriate flag has been set while running (see the entire code for this flag).&lt;/p&gt;&lt;h4 name=&quot;0d3a&quot; id=&quot;0d3a&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Line #8&lt;/h4&gt;&lt;p name=&quot;6e53&quot; id=&quot;6e53&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;This finds the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;valid_spots&lt;/code&gt; remaining on the current row. This is basically the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;poss&lt;/code&gt; variable depicted in the picture above.&lt;/p&gt;&lt;pre name=&quot;07c5&quot; id=&quot;07c5&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;valid_spots = self.all_ones &amp;amp; &lt;br&gt;~(column | left_diagonal | right_diagonal)&lt;/pre&gt;&lt;p name=&quot;499f&quot; id=&quot;499f&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;For example, let’s say that after some number of iterations we have:&lt;/p&gt;&lt;pre name=&quot;6304&quot; id=&quot;6304&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;left_diagonal = 00011000&lt;br&gt;column = 11001001&lt;/code&gt; &lt;br&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;right_diagonal = 00011100&lt;/code&gt;&lt;/pre&gt;&lt;p name=&quot;7784&quot; id=&quot;7784&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The code &lt;code class=&quot;markup--code markup--p-code&quot;&gt;(column | left_diagonal | right_diagonal)&lt;/code&gt; just does an “OR” operation, and ends up with the bit sequence 11011101.&lt;/p&gt;&lt;p name=&quot;728b&quot; id=&quot;728b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Then, adding the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;~&lt;/code&gt; in front of that expression causes the resulting bit sequence to “flip” (so all zeroes become ones and vice versa), and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;valid_spots&lt;/code&gt; would be set to 00100010.&lt;/p&gt;&lt;p name=&quot;2f12&quot; id=&quot;2f12&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So for the current row, the column number 0,1,3,4,5 and 7 are not available. We can only place a queen on column number 2 and 6. These are the only two spots that we will try.&lt;/p&gt;&lt;h4 name=&quot;6504&quot; id=&quot;6504&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Line #10&lt;/h4&gt;&lt;pre name=&quot;372d&quot; id=&quot;372d&quot; class=&quot;graf graf--pre graf-after--h4&quot;&gt;current_spot = -valid_spots &amp;amp; valid_spots&lt;/pre&gt;&lt;p name=&quot;30d9&quot; id=&quot;30d9&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This line finds the first non zero bit and stores it into &lt;code class=&quot;markup--code markup--p-code&quot;&gt;current_spot&lt;/code&gt;. So it’s basically finding the first empty spot where we can place our queen (from the rightmost column).&lt;/p&gt;&lt;p name=&quot;89fe&quot; id=&quot;89fe&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This right here is what makes the algorithm so fast. We used bit operators to directly tell us the empty positions that are completely safe for us to place our queens. Hence, this leads to major speedup as you will see later on.&lt;/p&gt;&lt;h4 name=&quot;9d24&quot; id=&quot;9d24&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Line #11 and 12&lt;/h4&gt;&lt;p name=&quot;dada&quot; id=&quot;dada&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Line #11 simply adds the queen being placed at the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;current_spot&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;to our solution set so that we can print it later.&lt;/p&gt;&lt;p name=&quot;cb32&quot; id=&quot;cb32&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Line #12 marks the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;current_spot&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;as unavailable. Remember, &lt;a href=&quot;https://en.wikipedia.org/wiki/XOR_swap_algorithm&quot; data-href=&quot;https://en.wikipedia.org/wiki/XOR_swap_algorithm&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;XORing&lt;/a&gt; the same bits leads to 0.&lt;/p&gt;&lt;h4 name=&quot;52c1&quot; id=&quot;52c1&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Line #13&lt;/h4&gt;&lt;p name=&quot;6bf4&quot; id=&quot;6bf4&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;This is probably the most important line of code for this algorithm (and the most confusing one as well). Here we are just propagating the effects we introduced, further down to the next row.&lt;/p&gt;&lt;p name=&quot;7001&quot; id=&quot;7001&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We placed a queen at the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;current_spot&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;and now we want to update our variables &lt;code class=&quot;markup--code markup--p-code&quot;&gt;column&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;, &lt;/em&gt;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;left_diagonal&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;and&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--p-code&quot;&gt;right_diagonal&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;to contain these changes as we move onto the next row.&lt;/p&gt;&lt;pre name=&quot;eac9&quot; id=&quot;eac9&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;self.solve((column | current_spot), (left_diagonal | current_spot)&amp;gt;&amp;gt; 1,(right_diagonal | current_spot) &amp;lt;&amp;lt; 1, queens_placed + 1)&lt;/pre&gt;&lt;p name=&quot;8f66&quot; id=&quot;8f66&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;NOTE:&lt;/strong&gt; &lt;code class=&quot;markup--code markup--p-code&quot;&gt;a | b&lt;/code&gt; means bitwise OR for variables &lt;code class=&quot;markup--code markup--p-code&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;b&lt;/code&gt;. Also, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;a &amp;lt;&amp;lt; 1&lt;/code&gt; is a left-shit operator. Similarly, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;a &amp;gt;&amp;gt; 1&lt;/code&gt; is the right-shift operator.&lt;/p&gt;&lt;p name=&quot;78a8&quot; id=&quot;78a8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So calling &lt;code class=&quot;markup--code markup--p-code&quot;&gt;(right_diagonal | current_spot) &amp;lt;&amp;lt; 1&lt;/code&gt; simply says: combine &lt;code class=&quot;markup--code markup--p-code&quot;&gt;right_diagonal&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;current_spot&lt;/code&gt; with an OR operation, then move everything in the result to the left by one.&lt;/p&gt;&lt;p name=&quot;db4a&quot; id=&quot;db4a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For example — say &lt;code class=&quot;markup--code markup--p-code&quot;&gt;right_diagonal&lt;/code&gt; had value &lt;code class=&quot;markup--code markup--p-code&quot;&gt;00011100&lt;/code&gt;. And say we made the queen occupy the last slot such as the last 1 in the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;valid_spots&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;integer &lt;code class=&quot;markup--code markup--p-code&quot;&gt;00100010&lt;/code&gt;.&lt;/p&gt;&lt;p name=&quot;05f2&quot; id=&quot;05f2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Then the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;current_spot&lt;/code&gt; would become &lt;code class=&quot;markup--code markup--p-code&quot;&gt;000000010&lt;/code&gt; and OR-ing it with the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;right_diagonal&lt;/code&gt; would give us &lt;code class=&quot;markup--code markup--p-code&quot;&gt;00011110.&lt;/code&gt; We left-shift it to get &lt;code class=&quot;markup--code markup--p-code&quot;&gt;00111100&lt;/code&gt; and that is exactly the effect we want for the right-diagonal.&lt;/p&gt;&lt;p name=&quot;6eba&quot; id=&quot;6eba&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The right-diagonal is moving from right top to bottom left. Left-shift on the bits produces that effect.&lt;/p&gt;&lt;p name=&quot;7da9&quot; id=&quot;7da9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For a greater clarity, try doing this operation on a paper:&lt;/p&gt;&lt;figure name=&quot;0a07&quot; id=&quot;0a07&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 358px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 51.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*u0D6tQbzP98BCTD54GfV9A.png&quot; data-width=&quot;1176&quot; data-height=&quot;602&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*u0D6tQbzP98BCTD54GfV9A.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Just so you don’t have to go up the article 😛&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;7e79&quot; id=&quot;7e79&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We start with 0s for all the three variables, meaning that all the positions are available in the first row for placing the queens.&lt;/p&gt;&lt;p name=&quot;9709&quot; id=&quot;9709&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now comes the fun part (well, something to amaze you 😆), Speed Comparisons.&lt;/p&gt;&lt;h3 name=&quot;cfa5&quot; id=&quot;cfa5&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Stats&lt;/h3&gt;&lt;p name=&quot;15a9&quot; id=&quot;15a9&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let’s look at the stats for a tool that Google built for solving the N-Queens.&lt;/p&gt;&lt;figure name=&quot;87d3&quot; id=&quot;87d3&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 656px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 93.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*ZDMBCDEaUvQmcL1TO-GJDg.png&quot; data-width=&quot;1286&quot; data-height=&quot;1206&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*ZDMBCDEaUvQmcL1TO-GJDg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;https://developers.google.com/optimization/cp/queens&quot; data-href=&quot;https://developers.google.com/optimization/cp/queens&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://developers.google.com/optimization/cp/queens&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;a179&quot; id=&quot;a179&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Following are the stats for the 4 different approaches we discussed for the&lt;br&gt;N-Queens:&lt;/p&gt;&lt;figure name=&quot;726f&quot; id=&quot;726f&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 337px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 48.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*3vDf0vC_7O1W-RK94ZS5HQ.png&quot; data-width=&quot;1256&quot; data-height=&quot;604&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*3vDf0vC_7O1W-RK94ZS5HQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;All the times are in ms.&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure name=&quot;77b7&quot; id=&quot;77b7&quot; class=&quot;graf graf--figure graf-after--figure&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 335px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 47.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*-J6QjokBFXvZDOYkTGBTyQ.png&quot; data-width=&quot;1254&quot; data-height=&quot;600&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*-J6QjokBFXvZDOYkTGBTyQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;All the times are in ms.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;6f09&quot; id=&quot;6f09&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The last solution involving bitwise operators clearly performs better than the results reported by the &lt;a href=&quot;https://developers.google.com/optimization/cp/queens&quot; data-href=&quot;https://developers.google.com/optimization/cp/queens&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Google’s&lt;/a&gt; N-Queens solver. 😃&lt;/p&gt;&lt;p name=&quot;e3cd&quot; id=&quot;e3cd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, an interesting thing to note here is the effect that slight optimization had on the results. Recall the optimization where we converted the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is_cell_safe&lt;/code&gt;check from an &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(N)&lt;/code&gt; solution to an &lt;code class=&quot;markup--code markup--p-code&quot;&gt;O(1)&lt;/code&gt; check. This clearly shows us how such small changes can bring about huge performance impacts.&lt;/p&gt;&lt;p name=&quot;b302&quot; id=&quot;b302&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If you’ve read along till the very end, I’m sure your algorithmic curiosity has now been satisfied! But hey, this is just the tip of the iceberg 😉.&lt;/p&gt;&lt;p name=&quot;0f70&quot; id=&quot;0f70&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I have another post coming up soon where we’ll tackle a problem similar to the N-Queens but with a slight twist.&lt;/p&gt;&lt;p name=&quot;1073&quot; id=&quot;1073&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Kudos to &lt;a href=&quot;https://medium.com/u/3d68fc2a6ecb&quot; data-href=&quot;https://medium.com/u/3d68fc2a6ecb&quot; data-anchor-type=&quot;2&quot; data-user-id=&quot;3d68fc2a6ecb&quot; data-action-value=&quot;3d68fc2a6ecb&quot; data-action=&quot;show-user-card&quot; data-action-type=&quot;hover&quot; class=&quot;markup--user markup--p-user&quot; target=&quot;_blank&quot;&gt;Rahul Gupta&lt;/a&gt; for his valuable inputs in the code and the article.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>How to solve the Baby Lizards Problem — a fun twist on the N-Queens problem</title>
   <link href="http://localhost:4000/2017/12/19/How-to-solve-the-Baby-Lizards-Problem-a-fun-twist-on-the-N-Queens-problem-a6980f5e72a/"/>
   <updated>2017-12-19T00:00:00-08:00</updated>
   <id>http://localhost:4000/2017/12/19/How-to-solve-the-Baby-Lizards-Problem---a-fun-twist-on-the-N-Queens-problem-a6980f5e72a</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;How to solve the Baby Lizards Problem — a fun twist on the N-Queens problem&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;How to solve the Baby Lizards Problem — a fun twist on the N-Queens problem&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
This problem statement was an assignment as a part of my coursework for the Masters program at USC. I had loads of fun while solving it and…
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;4156&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;8ce7&quot; id=&quot;8ce7&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;cf9b&quot; id=&quot;cf9b&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 100.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*3i2Y2ipYM-aQ_0VSeQ9eoQ.png&quot; data-width=&quot;1452&quot; data-height=&quot;1458&quot; data-is-featured=&quot;true&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*3i2Y2ipYM-aQ_0VSeQ9eoQ.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;http://www.csplib.org/Problems/prob079/assets/nqc1850sol2.png&quot; data-href=&quot;http://www.csplib.org/Problems/prob079/assets/nqc1850sol2.png&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://www.csplib.org/Problems/prob079/assets/nqc1850sol2.png&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;2538&quot; id=&quot;2538&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This problem statement was an assignment as a part of my coursework for the Masters program at USC. I had loads of fun while solving it and I decided to share my learnings with the community.&lt;/p&gt;&lt;p name=&quot;cf4a&quot; id=&quot;cf4a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s start with the problem statement.&lt;/p&gt;&lt;h3 name=&quot;1ae1&quot; id=&quot;1ae1&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Problem&lt;/h3&gt;&lt;p name=&quot;5f14&quot; id=&quot;5f14&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;You are a zookeeper in the reptile house. One of your rare lizards has just had several babies. Your job is to find a place to put each baby lizard in a nursery. However, there is a catch: the baby lizards have very long tongues.&lt;/p&gt;&lt;p name=&quot;26be&quot; id=&quot;26be&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A baby lizard can shoot out its tongue and eat any other baby lizard before you have time to save it. As such, you want to make sure that no baby lizard can eat another baby lizard in the nursery (burp).&lt;/p&gt;&lt;p name=&quot;ca18&quot; id=&quot;ca18&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For each baby lizard, you can place them in one spot on a grid. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;From there, they can shoot out their tongue up, down, left, right and diagonally as well.&lt;/strong&gt; Their tongues are very long and can reach to the edge of the nursery from any location.&lt;/p&gt;&lt;p name=&quot;044e&quot; id=&quot;044e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Figure 1 shows in what ways a baby lizard can eat another.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;866d&quot; id=&quot;866d&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 462px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 46.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_iiDKlitAjMADtVqlQyapA.png&quot; data-width=&quot;1196&quot; data-height=&quot;552&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*_iiDKlitAjMADtVqlQyapA.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Figure 1 (A) the baby lizard can attack any other lizard in a red square. Thus it can be seen that a baby lizard can eat another lizard to its top, bottom, left right or diagonal. (B) In this example setup, both lizards can eat each other. Your algorithm will try to avoid this.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;e2fe&quot; id=&quot;e2fe&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In addition to baby lizards, your nursery may have some trees planted in it. Your lizards cannot shoot their tongues through the trees nor can you move a lizard into the same place as a tree.&lt;/p&gt;&lt;p name=&quot;f0c9&quot; id=&quot;f0c9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As such, a tree will block any lizard from eating another lizard if it is in the path. Additionally, the tree will block you from moving the lizard to that location.&lt;/p&gt;&lt;p name=&quot;99dc&quot; id=&quot;99dc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Figure 2 shows some different valid arrangements of lizards:&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;2ec6&quot; id=&quot;2ec6&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 455px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 45.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*FBI0AkIOTLeN2EASiZ25Zw.png&quot; data-width=&quot;1208&quot; data-height=&quot;550&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*FBI0AkIOTLeN2EASiZ25Zw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Figure 2 Both nurseries have valid arrangements of baby lizards such that they cannot eat one &lt;br&gt;another. (A) with no trees, no lizard is in a position to eat another lizard. (B) Two trees are &lt;br&gt;introduced such that the lizard in the last column cannot eat the lizard in the second or fourth &lt;br&gt;column.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;5832&quot; id=&quot;5832&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Given an arrangement of trees, we need to output a new arrangement of lizards such that no baby lizard can eat another one. You cannot move any of the trees.&lt;/p&gt;&lt;p name=&quot;a4b4&quot; id=&quot;a4b4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You can find the entire code for this &lt;a href=&quot;https://github.com/edorado93/Save-The-Lizards&quot; data-href=&quot;https://github.com/edorado93/Save-The-Lizards&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener nofollow nofollow noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h3 name=&quot;6321&quot; id=&quot;6321&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Similarity to N-Queens&lt;/h3&gt;&lt;p name=&quot;aac3&quot; id=&quot;aac3&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This problem is very similar to the classic &lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot; data-href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;N-Queens Problem&lt;/a&gt;. Let’s recap some of the constraints in the N-Queens problem.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;1f43&quot; id=&quot;1f43&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;There can be only one queen per row and column.&lt;/li&gt;&lt;li name=&quot;1fcf&quot; id=&quot;1fcf&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;There can be only one queen per diagonal and anti-diagonal.&lt;/li&gt;&lt;li name=&quot;5b22&quot; id=&quot;5b22&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Considering the above 2 constraints, we cannot place more queens than the number of rows or number of columns.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;cf47&quot; id=&quot;cf47&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Now, we add in a little twist which says that we have trees at certain location in the nursery (read chess board), and the queens (lizards) on either side of a tree cannot attack each other. This changes things big time.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;20af&quot; id=&quot;20af&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Now, we can have multiple lizards per row, per column.&lt;/li&gt;&lt;li name=&quot;27c8&quot; id=&quot;27c8&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Similarly, we can have multiple lizards in a single diagonal or anti-diagonal.&lt;/li&gt;&lt;li name=&quot;00b4&quot; id=&quot;00b4&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;We can place more number of lizards than the number of rows or columns.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;526d&quot; id=&quot;526d&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Although the problem looks very similar to the standard puzzle of placing N queens on an N*N board, the solution and the complexity turn out to be very different altogether.&lt;/p&gt;&lt;p name=&quot;af30&quot; id=&quot;af30&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;None of the optimized versions of N-Queens fit in directly for this problem because a lot of the optimizations rely on the simple fact that a solution to the N-Queens problems can be represented as a permutation of column subscripts, simply because we have only one lizard per row, column, diagonal and anti-diagonal. We break this assumption, and the optimizations fall apart.&lt;/p&gt;&lt;p name=&quot;e2cf&quot; id=&quot;e2cf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So here in this post, we will discuss a highly optimized backtracking based solution.&lt;/p&gt;&lt;h3 name=&quot;6b34&quot; id=&quot;6b34&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Backtracking++&lt;/h3&gt;&lt;p name=&quot;c1fa&quot; id=&quot;c1fa&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The backtracking solution for this problem works in a similar manner to the backtracking solution for the standard N-Queens problem.&lt;/p&gt;&lt;p name=&quot;ced6&quot; id=&quot;ced6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The solution for this problem is based on the following idea.&lt;/p&gt;&lt;p name=&quot;db35&quot; id=&quot;db35&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Given a cell &lt;code class=&quot;markup--code markup--p-code&quot;&gt;[i, j]&lt;/code&gt;, we can either place a lizard, or not place a lizard. Any one of our choices can lead to a solution. So we try both.&lt;/p&gt;&lt;p name=&quot;754e&quot; id=&quot;754e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The biggest invariant in this algorithm is that we always move from left to right across the board.&lt;/p&gt;&lt;p name=&quot;25d2&quot; id=&quot;25d2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Suppose there is a tree at location [3,4]. Its masking effect (if any) would only be visible once we cross the cell [3,4] in our recursion and move forward. Not before that.&lt;/p&gt;&lt;p name=&quot;bbe9&quot; id=&quot;bbe9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before we get to the actual pseudocode for the problem, there are some other components of the algorithm that I would like to explain. This would make the understanding of the pseudocode much simpler.&lt;/p&gt;&lt;h3 name=&quot;e895&quot; id=&quot;e895&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Safety Check and the O(1) conundrum&lt;/h3&gt;&lt;p name=&quot;a83c&quot; id=&quot;a83c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;If you’ve taken a look at &lt;a href=&quot;https://medium.freecodecamp.org/lets-backtrack-and-save-some-queens-1f9ef6af5415&quot; data-href=&quot;https://medium.freecodecamp.org/lets-backtrack-and-save-some-queens-1f9ef6af5415&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;my previous article&lt;/a&gt; that discusses different algorithmic solutions to the N-Queens puzzle, you might understand what the issue really is.&lt;/p&gt;&lt;p name=&quot;fea4&quot; id=&quot;fea4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We get almost 5X speed improvement on a 14 * 14 chessboard where we have to place 14 queens, after converting the safety check function to O(1) from O(N). So it was worth spending time to figure out an algorithm that would tell us in constant time if it is safe to place a queen on a given cell [i, j].&lt;/p&gt;&lt;p name=&quot;ba6b&quot; id=&quot;ba6b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For reference, let’s look at how we did it back in the normal N-Queens.&lt;/p&gt;&lt;figure name=&quot;5264&quot; id=&quot;5264&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/3b0cdbd4a3070544fbc332ce7b25175b.js&quot;&gt;&lt;/script&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;O(1) safety check for N-Queens.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;d151&quot; id=&quot;d151&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We made use of some additional data structures to tell us if a queen had been placed in a certain diagonal, anti-diagonal, row or column in O(1) time and using these we could tell if it was safe to place a queen on a given cell [i, j].&lt;/p&gt;&lt;p name=&quot;fdad&quot; id=&quot;fdad&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, if you’ve read through the problem statement carefully, we can now have trees in some locations on the board and if there is a tree between the current cell and an attacker lizard (it can be on a row, column, or any of the two diagonals), then it is in fact safe to place a lizard on the current cell. This is because the tree masks the attack, making the cell safe for a new lizard.&lt;/p&gt;&lt;p name=&quot;b350&quot; id=&quot;b350&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This changes things, a lot 😱.&lt;/p&gt;&lt;p name=&quot;51dc&quot; id=&quot;51dc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s start with what data structures we need for the implementation.&lt;/p&gt;&lt;h3 name=&quot;e81f&quot; id=&quot;e81f&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Data Structures Used&lt;/h3&gt;&lt;figure name=&quot;7016&quot; id=&quot;7016&quot; class=&quot;graf graf--figure graf--iframe graf-after--h3&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/5a05ee922d0f718eb514715ff6c521fb.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;4b11&quot; id=&quot;4b11&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Let’s go over them one by one.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;689b&quot; id=&quot;689b&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code u-paddingRight0 u-marginRight0&quot;&gt;tree_locations&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;&lt;/code&gt;— this is just a dictionary that tells us if a given cell [i, j] contains a tree. This is populated right at the start of our solver.&lt;/li&gt;&lt;li name=&quot;28f0&quot; id=&quot;28f0&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The four data structures rows, columns, diagonals and anti-diagonals are used to simply tell us if there is a lizard in the respective &lt;code class=&quot;markup--code markup--li-code&quot;&gt;r, c, r — c, r + c &lt;/code&gt;respectively. For this problem however, they represent integer values rather than boolean.&lt;br&gt;These four data structures store either 1 or -1 depending upon if we are placing a lizard at a current cell [i, j] or we are encountering a tree at a given cell [i, j]. &lt;br&gt;So the recursion proceeds from one cell to another and can either encounter a tree at a given cell [i, j] or it can encounter an empty cell in which case we have to call the &lt;code class=&quot;markup--code markup--li-code&quot;&gt;is_cell_safe&lt;/code&gt; function to verify if we can place a lizard.&lt;br&gt;I will come to how the values are updated in these four data structures namely &lt;code class=&quot;markup--code markup--li-code&quot;&gt;rows&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;, &lt;/em&gt;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;columns&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;,&lt;/em&gt;&lt;/strong&gt; &lt;code class=&quot;markup--code markup--li-code&quot;&gt;diagonals&lt;/code&gt; and&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;anti-diagonals&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;later on.&lt;/li&gt;&lt;li name=&quot;efe7&quot; id=&quot;efe7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;is_there_queen_in_this_column&lt;/code&gt;—&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;this is a dictionary that simply stores the number of lizards that we placed in a given column. This is used as a part of a pruning heuristic employed to reduce the size of the search space.&lt;/li&gt;&lt;li name=&quot;a123&quot; id=&quot;a123&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;next_position_same_column&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;— this tells us for every [i, j] what is the next spot in the same column where we could try and place a new lizard. In the normal N-Queens problem, we can only place a single queen in a column, but in this case we can have multiple queens (lizards). &lt;br&gt;So, after placing a lizard at cell [i, j], we need the location of the first tree in the same column and say that is [k, j]. The next available location for placing a lizard in that column would then be [k+1, j]. This array is used as a part of this optimization.&lt;/li&gt;&lt;li name=&quot;33c9&quot; id=&quot;33c9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Finally, &lt;code class=&quot;markup--code markup--li-code&quot;&gt;is_there_a_tree_ahead&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;is a dictionary which tells us if there is a tree somewhere in the board after this column (including this column as well). This is also populated once as a part of the initial preprocessing. This is also used as a part of the pruning heuristic referred to above while describing &lt;code class=&quot;markup--code markup--li-code&quot;&gt;is_there_queen_in_this_column&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;h3 name=&quot;54c0&quot; id=&quot;54c0&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;The Preprocess function&lt;/h3&gt;&lt;figure name=&quot;51a7&quot; id=&quot;51a7&quot; class=&quot;graf graf--figure graf--iframe graf-after--h3&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/719393f3198f9b7d53315a1de4388bee.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;4279&quot; id=&quot;4279&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The preprocess function is called initially before our algorithm starts execution and all it does is fills up some of the data structures discussed above.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;02c5&quot; id=&quot;02c5&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;The &lt;code class=&quot;markup--code markup--li-code&quot;&gt;trees_populator&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;function is pretty straightforward. It fills up the dictionaries &lt;code class=&quot;markup--code markup--li-code&quot;&gt;tree_locations&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;and &lt;code class=&quot;markup--code markup--li-code&quot;&gt;is_there_a_tree_ahead&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;&lt;li name=&quot;2bf1&quot; id=&quot;2bf1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The function &lt;code class=&quot;markup--code markup--li-code&quot;&gt;find_next_largest&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;considers each column as consisting of 0s and 2s where a 0 represents an empty cell and a 2 represents a tree. For every cell, it finds out the next largest element or in other words, the nearest tree to that location in that column. We call the &lt;code class=&quot;markup--code markup--li-code&quot;&gt;find_next_largest&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;function&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt; &lt;/strong&gt;for every column on the board.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;9603&quot; id=&quot;9603&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;For a better understanding of this algorithm, refer to &lt;a href=&quot;http://www.geeksforgeeks.org/next-greater-element/&quot; data-href=&quot;http://www.geeksforgeeks.org/next-greater-element/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;this overview&lt;/a&gt;.&lt;/p&gt;&lt;h3 name=&quot;a5a3&quot; id=&quot;a5a3&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--h3-code&quot;&gt;is_cell_safe&lt;/code&gt; Function&lt;/h3&gt;&lt;figure name=&quot;1aab&quot; id=&quot;1aab&quot; class=&quot;graf graf--figure graf--iframe graf-after--h3&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/c80cd3ea4c1e5a7bf1444aac02dadc19.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;65eb&quot; id=&quot;65eb&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;A positive value in any of the dictionaries &lt;code class=&quot;markup--code markup--p-code&quot;&gt;row&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;column&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;diagonal&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;anti-diagonal&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt; &lt;/strong&gt;means there is a lizard that is would potentially attack another lizard that we’re trying to place at [row, column].&lt;/p&gt;&lt;p name=&quot;cd2a&quot; id=&quot;cd2a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This function looks very similar to the one we used for the normal N-Queens. The important part is how we update the values in these data structures.&lt;/p&gt;&lt;h3 name=&quot;402a&quot; id=&quot;402a&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Mark Visited, Unmark Visited and Hash Util&lt;/h3&gt;&lt;figure name=&quot;bc9c&quot; id=&quot;bc9c&quot; class=&quot;graf graf--figure graf--iframe graf-after--h3&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/a33d3d272c370666b1bd9d1767907ecf.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;p name=&quot;109d&quot; id=&quot;109d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The function &lt;code class=&quot;markup--code markup--p-code&quot;&gt;hash_util&lt;/code&gt; is a common function used to update the values for all the four data structures (namely &lt;code class=&quot;markup--code markup--p-code&quot;&gt;rows&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;columns&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;diagonals&lt;/code&gt; and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;anti-diagonals&lt;/code&gt;).&lt;/p&gt;&lt;p name=&quot;4cdb&quot; id=&quot;4cdb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This function is called both, when we are marking a lizard or a tree, or, when we are unmarking either of them. The marking and unmarking are simply processing before a recursive call and undoing whatever we processed, after the recursive call is over.&lt;/p&gt;&lt;p name=&quot;4e1b&quot; id=&quot;4e1b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Remember the invariant discussed in this problem: we move from left to right across the board. Once we have encountered a tree at a certain location (i, j) during the recursion, it would be protecting lizards from each other for all the cells [i+1, j] and all columns k &amp;gt; j.&lt;/p&gt;&lt;p name=&quot;fe4d&quot; id=&quot;fe4d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The &lt;code class=&quot;markup--code markup--p-code&quot;&gt;result&lt;/code&gt; variable is very important here. For example, we encountered a tree at say [3,0] and there was a lizard at [1,0]. Now moving onwards, this tree is masking the effect of the lizard at [1,0] — at least for this column — and we need to bring this effect into consideration somewhere.&lt;/p&gt;&lt;p name=&quot;6dc2&quot; id=&quot;6dc2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, in this case:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;487c&quot; id=&quot;487c&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;is_marking&lt;/code&gt; = &lt;code class=&quot;markup--code markup--li-code&quot;&gt;True&lt;/code&gt;,&lt;/li&gt;&lt;li name=&quot;8cef&quot; id=&quot;8cef&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;is_tree&lt;/code&gt; = &lt;code class=&quot;markup--code markup--li-code&quot;&gt;True&lt;/code&gt;,&lt;/li&gt;&lt;li name=&quot;e6b2&quot; id=&quot;e6b2&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;dictionary&lt;/code&gt; =&lt;code class=&quot;markup--code markup--li-code&quot;&gt; column&lt;/code&gt;,&lt;/li&gt;&lt;li name=&quot;2fb9&quot; id=&quot;2fb9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;dictionary[col]&lt;/code&gt; &amp;gt; 0 (We store 1 whenever we place a lizard in that column). This is because we have already placed a lizard in the column 0 (at 1,0) and there was no tree discovered earlier that would hide the lizard’s effect for cell [3,0] in our example.&lt;/li&gt;&lt;li name=&quot;22a7&quot; id=&quot;22a7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;value_to_add&lt;/code&gt; = -1 (For a tree it’s -1, for a lizard it’s 1)&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;c8be&quot; id=&quot;c8be&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;So now, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;dictionary[col]&lt;/code&gt; = -1 and we return 1 as the result meaning that encountering a tree in the given (row, column) did in fact have some masking effect. We need to record this masking effect because this would be used at the time of undoing after recursion.&lt;/p&gt;&lt;p name=&quot;c0e0&quot; id=&quot;c0e0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now consider two other functions that form the main component of the algorithm.&lt;/p&gt;&lt;figure name=&quot;06b5&quot; id=&quot;06b5&quot; class=&quot;graf graf--figure graf--iframe graf-after--p&quot;&gt;&lt;script src=&quot;https://gist.github.com/edorado93/dc52a456f3f7f9f16a0f32feb535214c.js&quot;&gt;&lt;/script&gt;&lt;/figure&gt;&lt;h4 name=&quot;8c4e&quot; id=&quot;8c4e&quot; class=&quot;graf graf--h4 graf-after--figure&quot;&gt;Mark Visited&lt;/h4&gt;&lt;p name=&quot;ea8e&quot; id=&quot;ea8e&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;We call this function in two cases. One is when we encounter a tree, and one is when we want to place a lizard. So, accordingly we have used a boolean variable to tell us why this function has been called.&lt;/p&gt;&lt;p name=&quot;1fc5&quot; id=&quot;1fc5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In the case of a tree, we set the value to -1, otherwise it’s +1. Then, we update the four data structures. The logic is the same for all four of them. It’s just the key that changes for each one.&lt;/p&gt;&lt;p name=&quot;58a6&quot; id=&quot;58a6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Remember, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;row — col&lt;/code&gt; is used to uniquely identify a diagonal and &lt;code class=&quot;markup--code markup--p-code&quot;&gt;row + col&lt;/code&gt;is used to uniquely identify an anti-diagonal.&lt;/p&gt;&lt;p name=&quot;659a&quot; id=&quot;659a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also note that we store the quadruple of return values for the four data structures in &lt;code class=&quot;markup--code markup--p-code&quot;&gt;did_tree_affect&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt; &lt;/strong&gt;dictionary. This let’s us know if encountering a tree at the location (row, col) had any effect at all i.e. masking. This data is used during the undo operation.&lt;/p&gt;&lt;h4 name=&quot;a217&quot; id=&quot;a217&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Unmark Visited&lt;/h4&gt;&lt;p name=&quot;8898&quot; id=&quot;8898&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;We know that a positive value in any of the four dictionaries means that the given cell is not safe to place a lizard.&lt;/p&gt;&lt;p name=&quot;aa6e&quot; id=&quot;aa6e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The undo operation is pretty simple for &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;a lizard&lt;/strong&gt;. If we are calling &lt;code class=&quot;markup--code markup--p-code&quot;&gt;unmark_visited&lt;/code&gt; function for a lizard, it means the cell was safe enough before we placed a lizard there, so we just put a value of -1 in all the four dictionaries. (Remember, a positive value in either of rows, columns, diagonals or antidiagonals would break the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;is_cell_safe&lt;/code&gt; function for that cell)&lt;/p&gt;&lt;p name=&quot;5b6e&quot; id=&quot;5b6e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In case the function &lt;code class=&quot;markup--code markup--p-code&quot;&gt;unmark_visited&lt;/code&gt; was called for a tree, we retrieve values from &lt;code class=&quot;markup--code markup--p-code&quot;&gt;did_tree_affect&lt;/code&gt; for the given [row, col] and use these values to revert the dictionaries. The sense in this is that suppose that we encountered a tree at given [row, col] and it masked the lizard’s effect for the diagonal and the column moving forward. See the following figure:&lt;/p&gt;&lt;figure name=&quot;84c3&quot; id=&quot;84c3&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 487px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 69.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*WmD5HS5AIdMrSB3-n6oipg.png&quot; data-width=&quot;1098&quot; data-height=&quot;764&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*WmD5HS5AIdMrSB3-n6oipg.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;The two highlighted cells are masked by the Tree. However, there is no masking effect generated by the Tree for the row and the anti-diagonal.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;8e38&quot; id=&quot;8e38&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;When we have to revert seeing the tree in the recursion, we basically have to revert it’s masking effect. That is what the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;did_tree_affect&lt;/code&gt; dictionary is used for.&lt;/p&gt;&lt;p name=&quot;e1aa&quot; id=&quot;e1aa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now that we have all our dictionaries in place, we can finally look at the actual DFS function that does all our heavy lifting for finding a solution.&lt;/p&gt;&lt;h3 name=&quot;006f&quot; id=&quot;006f&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Backtracking Solver&lt;/h3&gt;&lt;p name=&quot;658c&quot; id=&quot;658c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The code is seemingly complicated and the post would get extremely long if I started explaining it in detail. I might be able to clarify the doubts in the comments section. For now, I’ll write a detailed version of the pseudocode for completion.&lt;/p&gt;&lt;pre name=&quot;0c2a&quot; id=&quot;0c2a&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;1. Start at the cell (0, 0)&lt;/pre&gt;&lt;pre name=&quot;756c&quot; id=&quot;756c&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;2. For a given cell (i, j)&lt;br&gt;     a. If all the lizards have been placed, print the solution and return True.&lt;/pre&gt;&lt;pre name=&quot;9de9&quot; id=&quot;9de9&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;b. Check if the current cell has a tree. &lt;br&gt;         b1. Call mark_visited function to update the 4 dictionaries with possible masking effects due to this tree.&lt;/pre&gt;&lt;pre name=&quot;0776&quot; id=&quot;0776&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;c. If the current cell isn&amp;#39;t a tree and a lizard can be placed&lt;br&gt;         c1. Call mark visited for [i, j] as a lizard.&lt;br&gt;         c2. Add [i, j] to the solution set. &lt;br&gt;         c3. Increment column j as containing one more lizard.&lt;br&gt;         c4. Find the next row number to recurse on in the column j. If there is such a row number say r, then recurse on [r, j]. Else recurse on [0, j+1]&lt;br&gt;         c5. Unmark the current cell. Call function unmark_visited for [i, j]&lt;br&gt;         c6. Decrement column j as it contains one less lizard now.&lt;/pre&gt;&lt;pre name=&quot;345f&quot; id=&quot;345f&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;d. We may want to have a branch in our recursive solution where we did not place a lizard at [i, j] and simply moved forward. OR, we couldn&amp;#39;t place a lizard at [i, j] and we now have to move forward. &lt;br&gt;         d1. if [i + 1] &amp;lt; n, recurse on [i+1, j]&lt;br&gt;         d2. else [PRUNING HEURISTIC]&lt;br&gt;              d2.1 check if &lt;br&gt;                   * we did not place any lizard in the current col.&lt;br&gt;                   * there is no tree in the current col and ahead. &lt;br&gt;                   * number of lizards left to be placed are more than the number of columns left. &lt;br&gt;                   * If yes to all 3, then BACKTRACK.&lt;br&gt;              d2.2 Else, recurse on [0, j+1]&lt;/pre&gt;&lt;pre name=&quot;c597&quot; id=&quot;c597&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;e. If the current cell was in-fact a tree, then call unmark_visited to undo its effects.&lt;/pre&gt;&lt;p name=&quot;53e7&quot; id=&quot;53e7&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;That is the most apt pseudocode that I could come up with for the DFS based solver. This is exactly how the function &lt;code class=&quot;markup--code markup--p-code&quot;&gt;dfs&lt;/code&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;is structured.&lt;/p&gt;&lt;p name=&quot;fecd&quot; id=&quot;fecd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;With this logic, the largest test-case that I was able to solve was to place 97,000 lizards on a 1000 * 1000 board. It took around 2 seconds to run.&lt;/p&gt;&lt;figure name=&quot;86a6&quot; id=&quot;86a6&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 655px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 93.60000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Pbn-wAU4pWiRQIee8vCGTg.jpeg&quot; data-width=&quot;768&quot; data-height=&quot;719&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Pbn-wAU4pWiRQIee8vCGTg.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;&lt;a href=&quot;http://bit.ly/2j6x5KQ&quot; data-href=&quot;http://bit.ly/2j6x5KQ&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://bit.ly/2j6x5KQ&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;20ec&quot; id=&quot;20ec&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now I’m telling you, that this might sound like a huge feat, but it isn’t actually. This was pretty easy for the algorithm. Question for you guys is to figure out the why behind this 😉. Let me know in the comment section !&lt;/p&gt;&lt;p name=&quot;934b&quot; id=&quot;934b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, if you do come up with some other simpler approach to solve the problem, I would love to discuss that as well. Let me know in the comment section itself.&lt;/p&gt;&lt;p name=&quot;ab94&quot; id=&quot;ab94&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Hope you liked the article and enjoyed as much I did while solving this problem. If you liked this post, do spread the love (❤) as much as possible. Cheers!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Deep Dive Into Graph Traversals</title>
   <link href="http://localhost:4000/2017/12/10/Deep-Dive-Into-Graph-Traversals-227a90c6a261/"/>
   <updated>2017-12-10T00:00:00-08:00</updated>
   <id>http://localhost:4000/2017/12/10/Deep-Dive-Into-Graph-Traversals-227a90c6a261</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Deep Dive Into Graph Traversals&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Deep Dive Into Graph Traversals&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
There are over 2.07 billion monthly active Facebook Users worldwide as of Q3 2017. The most important aspect of the Facebook network is the…
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;9d62&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;a9f9&quot; id=&quot;a9f9&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;3088&quot; id=&quot;3088&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 74.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Pebp8Cds-RLs417qaOS_8A.png&quot; data-width=&quot;2747&quot; data-height=&quot;2039&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*Pebp8Cds-RLs417qaOS_8A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;61e6&quot; id=&quot;61e6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;There are over 2.07 billion monthly active Facebook Users worldwide as of Q3 2017. The most important aspect of the Facebook network is the social engagement between users. The more friends a user has, the more engaging the conversations become via comments on posts, messaging etc. If you’ve used Facebook fairly regularly, you must be knowing about the Friends Recommendation feature.&lt;/p&gt;&lt;p name=&quot;11b0&quot; id=&quot;11b0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Facebook recommends a set of people that we can add as friends. Most of the times, these are people we’ve never heard of before. But still, Facebook thinks that we should add them. The question is: &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;how does Facebook come up with a set of recommendations for a specific person&lt;/strong&gt;?&lt;/p&gt;&lt;p name=&quot;1973&quot; id=&quot;1973&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;One way to do this is based on mutual friends. eg:- If a user A and C don’t know each other, but they have a mutual friend B, then probably A and C should be friends too. What if A and C have 2 mutual friends and A and D have 3 mutual friends? How will the ordering be for suggestions?&lt;/p&gt;&lt;p name=&quot;bcd2&quot; id=&quot;bcd2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In this case, it seems pretty obvious to suggest D over C to A because they have more mutual friends and are more likely to get connected.&lt;/p&gt;&lt;p name=&quot;4cfc&quot; id=&quot;4cfc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, two people might not always have mutual friends, but they might have common 2nd-degree or 3rd-degree connections.&lt;/p&gt;&lt;h3 name=&quot;8184&quot; id=&quot;8184&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Nth Degree Connections&lt;/h3&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;414f&quot; id=&quot;414f&quot; class=&quot;graf graf--li graf-after--h3&quot;&gt;A and B are friends. &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;(0 degree)&lt;/strong&gt;&lt;/li&gt;&lt;li name=&quot;66ca&quot; id=&quot;66ca&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;A and B are &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;1st-degree&lt;/strong&gt; friends means they have a mutual friend.&lt;/li&gt;&lt;li name=&quot;ce5c&quot; id=&quot;ce5c&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;A and B are &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;2nd-degree &lt;/strong&gt;friends if they have a friend, who is a 1st-degree friend with the other person. eg:- A — C — D — B, then A and B are 2nd-degree friends.&lt;/li&gt;&lt;li name=&quot;caa8&quot; id=&quot;caa8&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Similarly, A and B are &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Nth degree &lt;/strong&gt;friends if they have N connections in between. eg:- A — X1 — X2 — X3….. — XN — B.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;3d40&quot; id=&quot;3d40&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Looking at this approach for the recommendation, we need to be able to find the degree of friendship that two given users share on Facebook.&lt;/p&gt;&lt;h3 name=&quot;8bcb&quot; id=&quot;8bcb&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Enter Graph Traversals&lt;/h3&gt;&lt;p name=&quot;1e59&quot; id=&quot;1e59&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Now that we know how Friend Recommendations can be made, let’s restate this problem so that we can look at it from an algorithmic perspective.&lt;/p&gt;&lt;p name=&quot;d0ae&quot; id=&quot;d0ae&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s imagine an undirected graph of all the users on Facebook&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;, &lt;/em&gt;&lt;/strong&gt;where vertices &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;V &lt;/strong&gt;represent the users and edges &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;E &lt;/strong&gt;represent friendships. In other words: if users A and B are friends on Facebook, there is an edge between vertices A and B. The challenge is to find out the degree of connection between any two users.&lt;/p&gt;&lt;p name=&quot;e414&quot; id=&quot;e414&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;More formally, we need to see the shortest distance between two nodes in an undirected, unweighted graph.&lt;/p&gt;&lt;figure name=&quot;0ddd&quot; id=&quot;0ddd&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 600px; max-height: 600px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 100%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*KoGmDyC-0hlueEpG_0HJNw.png&quot; data-width=&quot;600&quot; data-height=&quot;600&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*KoGmDyC-0hlueEpG_0HJNw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;d748&quot; id=&quot;d748&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Consider two vertices in this undirected graph A and C. There are two different paths for reaching C:&lt;/p&gt;&lt;p name=&quot;93bb&quot; id=&quot;93bb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;1. A → B → C and &lt;br&gt;2. A → G →F → E →D →C&lt;/p&gt;&lt;p name=&quot;01b3&quot; id=&quot;01b3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Clearly, we want to take the smallest path when trying to see the degree of connection between two people on the social network.&lt;/p&gt;&lt;p name=&quot;d471&quot; id=&quot;d471&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So far so good.&lt;/p&gt;&lt;p name=&quot;3c3a&quot; id=&quot;3c3a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before proceeding, let’s look at the complexity of this problem. As stated before, Facebook has around 2.07 billion users as of Q3 2017. That means our graph will have around 2.07 billion nodes and at least (2.07 billion — 1) edges (if every person has at least one friend)&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;e495&quot; id=&quot;e495&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is a huge scale to solve this problem on. Additionally, we also saw that there might be multiple paths to reach from a given source vertex to a destination vertex in the graph and we want the shortest one to solve our problem.&lt;/p&gt;&lt;p name=&quot;19f0&quot; id=&quot;19f0&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We will look at two classic graph traversal algorithms to solve our problem:&lt;/p&gt;&lt;p name=&quot;4d15&quot; id=&quot;4d15&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;1. Depth First Search and &lt;br&gt;2. Breadth First Search.&lt;/p&gt;&lt;h3 name=&quot;cb5b&quot; id=&quot;cb5b&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Depth First Search&lt;/h3&gt;&lt;p name=&quot;3b08&quot; id=&quot;3b08&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Imagine that you get stuck in a maze like this.&lt;/p&gt;&lt;figure name=&quot;a3e4&quot; id=&quot;a3e4&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 711px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 101.49999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*QY2TR83UiZlqXF1mRes2rA.png&quot; data-width=&quot;2330&quot; data-height=&quot;2365&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*QY2TR83UiZlqXF1mRes2rA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;9433&quot; id=&quot;9433&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;You have to get out somehow. There might be multiple routes from your starting position to the exit. The natural approach to getting out of the maze is to try all the paths.&lt;/p&gt;&lt;p name=&quot;821f&quot; id=&quot;821f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s say you have two choices at the point where you are currently standing. Obviously, you don’t know which one leads out of the maze. So you decide to make the first choice and move onwards in the maze.&lt;/p&gt;&lt;p name=&quot;739d&quot; id=&quot;739d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You keep making moves and you keep moving forward and you hit a dead end. Now you would ideally want to try a different path, and so you &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;backtrack &lt;/em&gt;&lt;/strong&gt;to a previous checkpoint where you made one of the choices and then you try a new one i.e. a different path this time.&lt;/p&gt;&lt;p name=&quot;5475&quot; id=&quot;5475&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You keep doing this until you find the exit.&lt;/p&gt;&lt;p name=&quot;169e&quot; id=&quot;169e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Recursively trying out a specific path and backtracking are the two components forming the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Depth First Search algorithm &lt;/strong&gt;(DFS).&lt;/p&gt;&lt;p name=&quot;25af&quot; id=&quot;25af&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If we model the maze problem as a graph, the vertices would represent the individual’s position on the maze and directed edges between two nodes would represent a single move from one position to another position. Using DFS, the individual would try all possible routes until the exit is found.&lt;/p&gt;&lt;p name=&quot;5e83&quot; id=&quot;5e83&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Here is a sample pseudo-code for the same.&lt;/p&gt;&lt;pre name=&quot;3783&quot; id=&quot;3783&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;1  &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;procedure&lt;/strong&gt; DFS(&lt;em class=&quot;markup--em markup--pre-em&quot;&gt;G&lt;/em&gt;,&lt;em class=&quot;markup--em markup--pre-em&quot;&gt;v&lt;/em&gt;):&lt;br&gt;2      label &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;v&lt;/em&gt; as discovered&lt;br&gt;3      &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;for all&lt;/strong&gt; edges from &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;v&lt;/em&gt; to &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;w&lt;/em&gt; &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;in&lt;/strong&gt; &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;G&lt;/em&gt;.adjacentEdges(&lt;em class=&quot;markup--em markup--pre-em&quot;&gt;v&lt;/em&gt;) &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;do&lt;/strong&gt;&lt;br&gt;4          &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;if&lt;/strong&gt; vertex &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;w&lt;/em&gt; is not labeled as discovered &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;then&lt;/strong&gt;&lt;br&gt;5              recursively call DFS(&lt;em class=&quot;markup--em markup--pre-em&quot;&gt;G&lt;/em&gt;,&lt;em class=&quot;markup--em markup--pre-em&quot;&gt;w&lt;/em&gt;)&lt;/pre&gt;&lt;p name=&quot;ce55&quot; id=&quot;ce55&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;For a deeper dive into this algorithm, check out :-&lt;/p&gt;&lt;div name=&quot;8e43&quot; id=&quot;8e43&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&quot; data-href=&quot;https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://medium.com/basecs/deep-dive-through-a-graph-dfs-traversal-8177df5d0f13&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Deep Dive Through A Graph: DFS Traversal&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;For better or for worse, there’s always more than one way to do something. Luckily for us, in the world of software and…&lt;/em&gt;medium.com&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;1636&quot; id=&quot;1636&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;Time Complexity: O(V + E)&lt;/p&gt;&lt;h3 name=&quot;1a5d&quot; id=&quot;1a5d&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Breadth First Search&lt;/h3&gt;&lt;p name=&quot;7eac&quot; id=&quot;7eac&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Imagine a contagious disease gradually spreading across a region. Every day, the people who have the illness infect new people they come into physical contact with. In this way, the disease is doing a sort of &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;breadth-first-search&lt;/strong&gt;(BFS) over the population. The “queue” is the set of people who have just been infected. The graph is the physical contact network of the region.&lt;/p&gt;&lt;p name=&quot;88f3&quot; id=&quot;88f3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Imagine you need to simulate the spread of the disease through this network. The root node of the search is patient zero, the first known sufferer of the disease. You start off with just them with the disease, and no one else.&lt;/p&gt;&lt;p name=&quot;2244&quot; id=&quot;2244&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now you iterate over the people they are in contact with. Some will catch the disease. Now iterate over all of them. Give the people they’re in contact with the disease too, unless they’ve already had it. Keep going until you’ve infected everyone, or you’ve infected your target. Then you’re done. That’s how breadth-first-search works.&lt;/p&gt;&lt;figure name=&quot;02cd&quot; id=&quot;02cd&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 418px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 59.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*iY5TrjCxKqTjA6mq-gR8pg.png&quot; data-width=&quot;1288&quot; data-height=&quot;770&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*iY5TrjCxKqTjA6mq-gR8pg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;b6b4&quot; id=&quot;b6b4&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The BFS search algorithm explores vertices layer by layer starting at the very first vertex and only moving on to the next layer once all vertices on the current layer have been processed.&lt;/p&gt;&lt;p name=&quot;18e1&quot; id=&quot;18e1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Here is a sample pseudo-code for BFS.&lt;/p&gt;&lt;pre name=&quot;2975&quot; id=&quot;2975&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;1   &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;procedure BFS(&lt;/strong&gt;&lt;em class=&quot;markup--em markup--pre-em&quot;&gt;G, v&lt;/em&gt;&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;):&lt;br&gt;&lt;/strong&gt;2       q = Queue()&lt;br&gt;3       q.&lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;enqueue(v)&lt;/strong&gt;&lt;br&gt;4       &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;while&lt;/strong&gt; q is not empty:&lt;br&gt;5            v = q.dequeue()&lt;br&gt;6            if v is &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;not visited:&lt;br&gt;&lt;/strong&gt;7               mark v as visited (// Process the node)&lt;br&gt;8               &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;for all&lt;/strong&gt; edges from &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;v&lt;/em&gt; to &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;w&lt;/em&gt; &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;in&lt;/strong&gt; &lt;em class=&quot;markup--em markup--pre-em&quot;&gt;G&lt;/em&gt;.adjacentEdges(&lt;em class=&quot;markup--em markup--pre-em&quot;&gt;v&lt;/em&gt;) &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;do&lt;br&gt;&lt;/strong&gt;9                    q.enqueue(w)&lt;/pre&gt;&lt;p name=&quot;be64&quot; id=&quot;be64&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;For a deeper understanding of BFS, look into &lt;a href=&quot;https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255&quot; data-href=&quot;https://medium.com/basecs/going-broad-in-a-graph-bfs-traversal-959bd1a09255&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;&lt;p name=&quot;bd47&quot; id=&quot;bd47&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Time Complexity: O(V + E)&lt;/p&gt;&lt;h3 name=&quot;5c65&quot; id=&quot;5c65&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Shortest Paths&lt;/h3&gt;&lt;p name=&quot;0f0e&quot; id=&quot;0f0e&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let’s move forward and solve our original problem: finding the shortest path between two given vertices in an undirected graph.&lt;/p&gt;&lt;p name=&quot;797d&quot; id=&quot;797d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Looking at the time complexities of the two algorithms, we can’t really make out the difference between the two for this problem. Both the algorithms will find a path (or rather the shortest path) to our destination from the given source.&lt;/p&gt;&lt;p name=&quot;f42d&quot; id=&quot;f42d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at the following example.&lt;/p&gt;&lt;figure name=&quot;be7b&quot; id=&quot;be7b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 583px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 83.39999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*YQ1t6ZVjdR9rNvpegFC4Qg.png&quot; data-width=&quot;2000&quot; data-height=&quot;1667&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*YQ1t6ZVjdR9rNvpegFC4Qg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;fdeb&quot; id=&quot;fdeb&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Suppose we want to find out the shortest path from the node 8 to 10&lt;/strong&gt;. Let’s look at the nodes that DFS and BFS explore before reaching the destination.&lt;/p&gt;&lt;h4 name=&quot;d3ba&quot; id=&quot;d3ba&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;DFS&lt;/h4&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;c48c&quot; id=&quot;c48c&quot; class=&quot;graf graf--li graf-after--h4&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 8 → &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 3 → &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 1.&lt;/li&gt;&lt;li name=&quot;b7f3&quot; id=&quot;b7f3&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Backtrack to 3.&lt;/li&gt;&lt;li name=&quot;01d2&quot; id=&quot;01d2&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 6 → &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 4.&lt;/li&gt;&lt;li name=&quot;6043&quot; id=&quot;6043&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Backtrack to 6.&lt;/li&gt;&lt;li name=&quot;86fe&quot; id=&quot;86fe&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 7.&lt;/li&gt;&lt;li name=&quot;2dd9&quot; id=&quot;2dd9&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Backtrack to 6 → Backtrack to 3 → Backtrack to 8.&lt;/li&gt;&lt;li name=&quot;6238&quot; id=&quot;6238&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process 10&lt;/strong&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;fd6e&quot; id=&quot;fd6e&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;A total of 7 nodes are being processed here before the destination is reached. Now let’s look at how BFS does things.&lt;/p&gt;&lt;h4 name=&quot;14e9&quot; id=&quot;14e9&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;BFS&lt;/h4&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;0235&quot; id=&quot;0235&quot; class=&quot;graf graf--li graf-after--h4&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 8 → Enqueue 3, 10&lt;/li&gt;&lt;li name=&quot;cfb1&quot; id=&quot;cfb1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 3 → Enqueue 1,6&lt;/li&gt;&lt;li name=&quot;f664&quot; id=&quot;f664&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;Process&lt;/strong&gt; 10.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;b666&quot; id=&quot;b666&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Woah, that was fast! Just 3 nodes had to be processed and we were at our destination.&lt;/p&gt;&lt;p name=&quot;8908&quot; id=&quot;8908&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The explanation for this speedup that we can see in BFS and not in DFS is because DFS takes up a specific path and goes till the very end i.e. until it hits a dead end and then backtracks.&lt;/p&gt;&lt;p name=&quot;e75e&quot; id=&quot;e75e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is the major downfall of the DFS algorithm. It might have to expand 1000s of levels (in a huge network like that of Facebook, just because it selected a bad path to process in the very beginning) before reaching the path containing our destination. BFS doesn’t face this problem and hence is much faster for our problem.&lt;/p&gt;&lt;p name=&quot;e4c2&quot; id=&quot;e4c2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Additionally, even if DFS finds out the destination, we cannot be sure that the path taken by DFS is the shortest one. There might be other paths as well.&lt;/p&gt;&lt;p name=&quot;afee&quot; id=&quot;afee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That means that in any case, for the shortest paths problem, DFS would have to span the entire graph to get the shortest path.&lt;/p&gt;&lt;p name=&quot;dd66&quot; id=&quot;dd66&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In the case of BFS, however, the first occurrence of the destination node ensures that it is the one at the shortest distance from the source.&lt;/p&gt;&lt;h3 name=&quot;6f30&quot; id=&quot;6f30&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Conclusion&lt;/h3&gt;&lt;p name=&quot;d7d6&quot; id=&quot;d7d6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;So far we discussed the problem of Friends Recommendation by Facebook and we boiled it down to the problem of finding the degree of connections between two users in the network graph.&lt;/p&gt;&lt;p name=&quot;ca37&quot; id=&quot;ca37&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Then we discussed two interesting Graph Traversal algorithms that are very commonly used. Finally, we looked at which algorithm performs the best for solving our problem.&lt;/p&gt;&lt;p name=&quot;411a&quot; id=&quot;411a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Breadth First Search is the algorithm you want to use if you have to find the shortest distance between two nodes in an undirected, unweighted graph.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;8479&quot; id=&quot;8479&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at &lt;a href=&quot;https://leetcode.com/problems/minimum-genetic-mutation/description/&quot; data-href=&quot;https://leetcode.com/problems/minimum-genetic-mutation/description/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;this fun problem&lt;/a&gt; to depict the difference between the two algorithms.&lt;/p&gt;&lt;p name=&quot;a4be&quot; id=&quot;a4be&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Assuming that you’ve read the problem statement carefully, let’s try and model this as a graph problem in the first place.&lt;/p&gt;&lt;p name=&quot;8a0b&quot; id=&quot;8a0b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let all possible strings become nodes in the graph and we have an edge between two vertices if they have a single mutation between them.&lt;/p&gt;&lt;p name=&quot;e6d1&quot; id=&quot;e6d1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Easy, right?&lt;/p&gt;&lt;p name=&quot;6e52&quot; id=&quot;6e52&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;We are given a starting string (read source vertext) eg:- “AACCGGTT” and we have to reach the destination string (read destination vertex) “AACCGGTA” in minimum number of mutations (read minimum number of steps) such that all intermediate strings (nodes) should belong to the given word bank.&lt;/em&gt;&lt;/p&gt;&lt;p name=&quot;58a8&quot; id=&quot;58a8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Try and solve this problem on your own before looking at the solution below.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;c369&quot; id=&quot;c369&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 505px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 50.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*1jpQ5HpQwY96J3-JxuhcYw.png&quot; data-width=&quot;2606&quot; data-height=&quot;1316&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*1jpQ5HpQwY96J3-JxuhcYw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;1cc6&quot; id=&quot;1cc6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;If you try to solve it using DFS, you will surely come up with a solution, but there is a test case(s) that will exceed the allotted time limit on the LeetCode platform. That’s because of the problem described before as to why DFS takes so long (process 7 nodes as opposed to 3 in BFS) to reach the destination vertex.&lt;/p&gt;&lt;p name=&quot;2555&quot; id=&quot;2555&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Hope you got the main idea behind the two main graph traversals, and the difference between them when the application is shortest paths in an undirected unweighted graph.&lt;/p&gt;&lt;p name=&quot;a3ec&quot; id=&quot;a3ec&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Please recommend (❤) this post if you think this may be useful for someone!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>How we fine-tuned HAProxy to achieve 2,000,000 concurrent SSL connections</title>
   <link href="http://localhost:4000/2017/04/16/How-we-fine-tuned-HAProxy-to-achieve-2-000-000-concurrent-SSL-connections-d017e61a4d27/"/>
   <updated>2017-04-16T00:00:00-07:00</updated>
   <id>http://localhost:4000/2017/04/16/How-we-fine-tuned-HAProxy-to-achieve-2-000-000-concurrent-SSL-connections-d017e61a4d27</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;How we fine-tuned HAProxy to achieve 2,000,000 concurrent SSL connections&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;How we fine-tuned HAProxy to achieve 2,000,000 concurrent SSL connections&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
If you look at the above screenshot closely, you’ll find two important pieces of information:
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;a192&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;6de9&quot; id=&quot;6de9&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;b6df&quot; id=&quot;b6df&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 653px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 65.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*H541cEeKLF2O_7wBoUOlPw.png&quot; data-width=&quot;1704&quot; data-height=&quot;1112&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*H541cEeKLF2O_7wBoUOlPw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;82c9&quot; id=&quot;82c9&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;If you look at the above screenshot closely, you’ll find two important pieces of information:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;e60e&quot; id=&quot;e60e&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;This machine has &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;2.38 million TCP connections&lt;/strong&gt; established, and&lt;/li&gt;&lt;li name=&quot;d6d6&quot; id=&quot;d6d6&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;The amount of RAM being used is around &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;48 Gigabytes&lt;/strong&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;f76c&quot; id=&quot;f76c&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Pretty awesome right? What would be even more awesome is if someone provided the setup components, and the tunings required to achieve this kind of scale on a single HAProxy machine. Well, I’ll do just that in this post ;)&lt;/p&gt;&lt;p name=&quot;afd2&quot; id=&quot;afd2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is the final part of the multipart series on load testing HAProxy. If you have time, I recommend you go and read the first two parts in the series first. These will help you get the hang of the kernel level tunings required on all the machines in this setup.&lt;/p&gt;&lt;div name=&quot;c70c&quot; id=&quot;c70c&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; data-href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Load Testing HAProxy (Part-1)&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;Load Testing ? HAProxy ? If all this seems greek to you, don’t worry. I will provide inline links to read up on what…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;bc71cf29ef089d2de5825936e454fd3a&quot; data-thumbnail-img-id=&quot;1*4npSurj6b2n__CsxxnaUQw.png&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/1*4npSurj6b2n__CsxxnaUQw.png);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div name=&quot;af15&quot; id=&quot;af15&quot; class=&quot;graf graf--mixtapeEmbed graf-after--mixtapeEmbed&quot;&gt;&lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-2-4c8677780df6&quot; data-href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-2-4c8677780df6&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-2-4c8677780df6&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Load Testing HAProxy (Part 2)&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;This is the second part in the 3 part series on performance testing of the famous TCP load balancer and reverse proxy…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-2-4c8677780df6&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;47a280510ad193d480b7bb21d23dd851&quot; data-thumbnail-img-id=&quot;1*s2S16ZXbIxtsYIG87aOadg.png&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/1*s2S16ZXbIxtsYIG87aOadg.png);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;4fb3&quot; id=&quot;4fb3&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;There are a lot of small components that helped us bring together the entire setup and achieve these numbers.&lt;/p&gt;&lt;p name=&quot;a293&quot; id=&quot;a293&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before I tell you the final HAProxy configuration we used (if you’re super impatient you can scroll to the bottom) I want to build up to it by walking you through our thinking.&lt;/p&gt;&lt;h3 name=&quot;1658&quot; id=&quot;1658&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;What we wanted to test&lt;/h3&gt;&lt;p name=&quot;f375&quot; id=&quot;f375&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The component we want to test was HAProxy version 1.6. We are using this in production right now on 4 core, 30 Gig machines. However, all the connectivity is non-SSL based.&lt;/p&gt;&lt;p name=&quot;23e2&quot; id=&quot;23e2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We wanted to test two things out of this exercise:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;177f&quot; id=&quot;177f&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;The &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;CPU percentage increase&lt;/strong&gt; when we shift the entire load from non-SSL connections to SSL connections. The CPU usage should definitely increase, owing to the longer 5-way handshake and then the packet encryption.&lt;/li&gt;&lt;li name=&quot;c019&quot; id=&quot;c019&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Secondly, we wanted to test the limits of our current production setup in terms of number of requests and the max number of concurrent connections that can be supported before performance starts to degrade.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;99f5&quot; id=&quot;99f5&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;We required the first part because of a major feature rollout that’s in full swing, which requires communication over SSL. We required the second part so that we could reduce the amount of hardware dedicated in production to HAProxy machines.&lt;/p&gt;&lt;h3 name=&quot;ee55&quot; id=&quot;ee55&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Components Involved&lt;/h3&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;55ae&quot; id=&quot;55ae&quot; class=&quot;graf graf--li graf-after--h3&quot;&gt;Multiple client machines to stress the HAProxy.&lt;/li&gt;&lt;li name=&quot;df41&quot; id=&quot;df41&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Single HAProxy machine version 1.6 on various setups&lt;br&gt;* 4 core, 30 Gig&lt;br&gt;* 16 core, 30 Gig&lt;br&gt;* 16 core, 64 Gig&lt;/li&gt;&lt;li name=&quot;bf32&quot; id=&quot;bf32&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Backend servers that will help support all these concurrent connections.&lt;/li&gt;&lt;/ul&gt;&lt;h3 name=&quot;fcb5&quot; id=&quot;fcb5&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;HTTP and MQTT&lt;/h3&gt;&lt;p name=&quot;1843&quot; id=&quot;1843&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;If you’ve gone through the &lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; data-href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;first article&lt;/a&gt; in this series, you should know that our entire infrastructure is supported over two protocols:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;a21c&quot; id=&quot;a21c&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;HTTP and&lt;/li&gt;&lt;li name=&quot;81e8&quot; id=&quot;81e8&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;MQTT.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;aeec&quot; id=&quot;aeec&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;In our stack, we don’t use HTTP 2.0 and hence don’t have the functionality of persistent connections on HTTP. So on production the max number of TCP connections that we see is somewhere around (2 * 150k) on a single HAProxy machine (Inbound + Outbound). Although the number of concurrent connections is rather low, the number of requests per second is quite high.&lt;/p&gt;&lt;p name=&quot;a86c&quot; id=&quot;a86c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;On the other hand, MQTT is a different way altogether for communication. It offers great quality of service parameters and persistent connectivity as well. So bidirectional continuous communication can happen over a MQTT channel. As for HAProxy that supports MQTT (underlying TCP) connections, we see somewhere around 600–700k TCP connections at the peak time on a single machine.&lt;/p&gt;&lt;p name=&quot;cdcb&quot; id=&quot;cdcb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We wanted to do a load test that will give us precise results for both HTTP and MQTT based connections.&lt;/p&gt;&lt;p name=&quot;f4d6&quot; id=&quot;f4d6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There are a lot of tools out there that help us load test an HTTP server easily and a lot of these tools provide advanced functionalities like summarized results, converting text based results to graphs, etc. We could not, however, find any stress testing tool for MQTT. We do have a tool that we developed ourselves, but it was not stable enough to support this kind of load in the timeframe we had.&lt;/p&gt;&lt;p name=&quot;ea08&quot; id=&quot;ea08&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So we decided to go for load testing clients for HTTP and &lt;em class=&quot;markup--em markup--p-em&quot;&gt;simulating the MQTT setup using the same ;) &lt;/em&gt;Interesting right?&lt;/p&gt;&lt;p name=&quot;a2bf&quot; id=&quot;a2bf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Well read on.&lt;/p&gt;&lt;h3 name=&quot;4955&quot; id=&quot;4955&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Initial Setup&lt;/h3&gt;&lt;p name=&quot;942e&quot; id=&quot;942e&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This is going to be a long post as I will be providing a lot of details that I think would be really helpful to someone doing similar load testing or fine tunings.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;ba5e&quot; id=&quot;ba5e&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;We took a 16 core 30 Gig machine for setting up HAProxy initially. We did not go with our current production setup because we thought the CPU hit because of SSL termination happening at the HAProxy end would be tremendous.&lt;/li&gt;&lt;li name=&quot;4ca7&quot; id=&quot;4ca7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;For the server end, we went with a simple NodeJs server that replies with &lt;code class=&quot;markup--code markup--li-code&quot;&gt;pong&lt;/code&gt; on receiving a &lt;code class=&quot;markup--code markup--li-code&quot;&gt;ping&lt;/code&gt; request.&lt;/li&gt;&lt;li name=&quot;3182&quot; id=&quot;3182&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;As for the client, we ended up using &lt;a href=&quot;https://httpd.apache.org/docs/2.4/programs/ab.html&quot; data-href=&quot;https://httpd.apache.org/docs/2.4/programs/ab.html&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Apache Bench&lt;/a&gt; initially. The reason we went with &lt;code class=&quot;markup--code markup--li-code&quot;&gt;ab&lt;/code&gt; was because it was a very well known and stable tool for load testing HTTP end points and also because it provides beautiful summarized results that would help us a lot.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;3927&quot; id=&quot;3927&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;The &lt;code class=&quot;markup--code markup--p-code&quot;&gt;ab&lt;/code&gt; tool provides a lot of interesting parameters that we used for our load test like:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;ae20&quot; id=&quot;ae20&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;- c, concurrency&lt;/code&gt; Specifies the number of concurrent requests that would hit the server.&lt;/li&gt;&lt;li name=&quot;0cce&quot; id=&quot;0cce&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;-n, no. of requests&lt;/code&gt; As the name suggests, specifies the total number of requests of the current load run.&lt;/li&gt;&lt;li name=&quot;6c4e&quot; id=&quot;6c4e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;-p POST file&lt;/code&gt; Contains the body of the POST request (if that is what you want to test.)&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;d7f0&quot; id=&quot;d7f0&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;If you look at these parameters closely, you will find that a lot of permutations are possible by tweaking all three. A sample ab request would look something like this&lt;/p&gt;&lt;pre name=&quot;4faf&quot; id=&quot;4faf&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;ab -S -p post_smaller.txt -T application/json -q -n 100000 -c 3000 http://test.haproxy.in:80/ping&lt;/pre&gt;&lt;p name=&quot;3620&quot; id=&quot;3620&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;A sample result of such a request looks something like this&lt;/p&gt;&lt;figure name=&quot;f8a9&quot; id=&quot;f8a9&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 803px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 114.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*R40IjhjQTBDJS6xJ3oMHqg.png&quot; data-width=&quot;1458&quot; data-height=&quot;1672&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*R40IjhjQTBDJS6xJ3oMHqg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;a84d&quot; id=&quot;a84d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The numbers that we were interested in were&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;524d&quot; id=&quot;524d&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;99% latency.&lt;/li&gt;&lt;li name=&quot;fcd7&quot; id=&quot;fcd7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Time per request.&lt;/li&gt;&lt;li name=&quot;9526&quot; id=&quot;9526&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;No. of failed requests.&lt;/li&gt;&lt;li name=&quot;a5e0&quot; id=&quot;a5e0&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Requests per second.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;13eb&quot; id=&quot;13eb&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;The biggest problem of &lt;code class=&quot;markup--code markup--p-code&quot;&gt;ab&lt;/code&gt; is that it does not provide a parameter to control the number of requests per second. We had to tweak the concurrency level to get our desired requests per second and this lead to a lot of trail and errors.&lt;/p&gt;&lt;h3 name=&quot;f813&quot; id=&quot;f813&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Almighty Graph&lt;/h3&gt;&lt;p name=&quot;a1a7&quot; id=&quot;a1a7&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We could not randomly go about doing multiple load runs and keep getting results because that would not give us any meaningful information. We had to perform these tests in some specific way so as to get meaningful results out of it. So we followed this graph&lt;/p&gt;&lt;figure name=&quot;5409&quot; id=&quot;5409&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 650px; max-height: 500px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 76.9%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*5NfdO-F4C_1qV4XMKJqNMw.png&quot; data-width=&quot;650&quot; data-height=&quot;500&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*5NfdO-F4C_1qV4XMKJqNMw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;b20b&quot; id=&quot;b20b&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This graph states that up until a certain point, if we keep increasing the number of requests, the latency will remain almost the same. However, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;beyond a certain tipping point&lt;/em&gt;&lt;/strong&gt;, the latency will start to increase exponentially. It is this tipping point for a machine or for a setup that we intended to measure.&lt;/p&gt;&lt;h3 name=&quot;61e2&quot; id=&quot;61e2&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Ganglia&lt;/h3&gt;&lt;p name=&quot;3d92&quot; id=&quot;3d92&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Before providing some test results, I would like to mention &lt;a href=&quot;http://ganglia.sourceforge.net/&quot; data-href=&quot;http://ganglia.sourceforge.net/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Ganglia&lt;/a&gt;.&lt;/p&gt;&lt;blockquote name=&quot;1b06&quot; id=&quot;1b06&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;Ganglia is a scalable distributed monitoring system for high-performance computing systems such as clusters and Grids.&lt;/blockquote&gt;&lt;p name=&quot;199c&quot; id=&quot;199c&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Look at the following screenshot of one of our machines to get an idea about what ganglia is and what sort of information it provides about the underlying machine.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;e741&quot; id=&quot;e741&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 397px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 39.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*ABgypqN1-Cq2l4fRduxZYQ.png&quot; data-width=&quot;2748&quot; data-height=&quot;1090&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*ABgypqN1-Cq2l4fRduxZYQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;figure name=&quot;30eb&quot; id=&quot;30eb&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--figure&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 436px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 43.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*J3uFhy4njFCsISzsJsgYUg.png&quot; data-width=&quot;2144&quot; data-height=&quot;934&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*J3uFhy4njFCsISzsJsgYUg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;98f8&quot; id=&quot;98f8&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Pretty interesting, eh?&lt;/p&gt;&lt;p name=&quot;0699&quot; id=&quot;0699&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Moving on, we constantly monitored ganglia for our HAProxy machine to monitor some important things.&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;fb69&quot; id=&quot;fb69&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;TCP established&lt;/code&gt; This tells us the total number of tcp connections established on the system. NOTE: this is the sum of inbound as well as outbound connections.&lt;/li&gt;&lt;li name=&quot;a32d&quot; id=&quot;a32d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;packets sent and received&lt;/code&gt; We wanted to see the total number of tcp packets being sent and received by our HAProxy machine.&lt;/li&gt;&lt;li name=&quot;fb58&quot; id=&quot;fb58&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;bytes sent and received&lt;/code&gt; This shows us the total data that we sent and received by the machine.&lt;/li&gt;&lt;li name=&quot;b93e&quot; id=&quot;b93e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;memory&lt;/code&gt; The amount of RAM being used over time.&lt;/li&gt;&lt;li name=&quot;4c5d&quot; id=&quot;4c5d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;network&lt;/code&gt; The network bandwidth consumption because of the packets being sent over the wire.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;ea96&quot; id=&quot;ea96&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Following are the known limits found via previous tests/numbers that we wanted to achieve via our load test.&lt;/p&gt;&lt;blockquote name=&quot;3bcd&quot; id=&quot;3bcd&quot; class=&quot;graf graf--blockquote graf--hasDropCapModel graf-after--p&quot;&gt;700k TCP established connections,&lt;br&gt;50k packets sent, 60k packets received, &lt;br&gt;10–15MB bytes sent as well as received, &lt;br&gt;14–15Gig memory at peak, &lt;br&gt;7MB network. &lt;br&gt;&lt;code class=&quot;markup--code markup--blockquote-code&quot;&gt;ALL these values are on a per second basis&lt;/code&gt;&lt;/blockquote&gt;&lt;h3 name=&quot;9e36&quot; id=&quot;9e36&quot; class=&quot;graf graf--h3 graf-after--blockquote&quot;&gt;HAProxy Nbproc&lt;/h3&gt;&lt;p name=&quot;3423&quot; id=&quot;3423&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Initially when we began load testing HAProxy, we found out that with SSL the CPU was being hit pretty early on in the process but the requests per second were very low. On investigating the &lt;a href=&quot;http://www.tecmint.com/12-top-command-examples-in-linux/&quot; data-href=&quot;http://www.tecmint.com/12-top-command-examples-in-linux/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;top&lt;/a&gt; command, we found that HAProxy was using only 1 core. Whereas we had 15 more cores to spare.&lt;/p&gt;&lt;p name=&quot;66b4&quot; id=&quot;66b4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Googling for about 10 minutes led us to find this interesting setting in HAProxy that lets HAProxy use multiple cores.&lt;/p&gt;&lt;p name=&quot;903a&quot; id=&quot;903a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It’s called &lt;code class=&quot;markup--code markup--p-code&quot;&gt;nbproc&lt;/code&gt; and to get a better hang of what it is and how to set it, check out this article:&lt;/p&gt;&lt;p name=&quot;2528&quot; id=&quot;2528&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;http://blog.onefellow.com/post/82478335338/haproxy-mapping-process-to-cpu-core-for-maximum&quot; data-href=&quot;http://blog.onefellow.com/post/82478335338/haproxy-mapping-process-to-cpu-core-for-maximum&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://blog.onefellow.com/post/82478335338/haproxy-mapping-process-to-cpu-core-for-maximum&lt;/a&gt;&lt;/p&gt;&lt;p name=&quot;d8f5&quot; id=&quot;d8f5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Tuning this setting was the base of our load testing strategy moving forward. Because the ability to use multiple cores by HAProxy gave us the power to form multiple combinations for our load testing suite.&lt;/p&gt;&lt;h3 name=&quot;2753&quot; id=&quot;2753&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Load Testing with AB&lt;/h3&gt;&lt;p name=&quot;d63f&quot; id=&quot;d63f&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;When we had started out with our load testing journey, we were not clear on the things we should be measuring and what we need to achieve.&lt;/p&gt;&lt;p name=&quot;bc2e&quot; id=&quot;bc2e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Initially we had only one goal in mind and that was to find the tipping point only by variation of all the below mentioned parameters.&lt;/p&gt;&lt;figure name=&quot;f7f8&quot; id=&quot;f7f8&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 585px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 83.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*_YxnDT0z5HOlY95pnbuFJw.png&quot; data-width=&quot;1606&quot; data-height=&quot;1342&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*_YxnDT0z5HOlY95pnbuFJw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;426c&quot; id=&quot;426c&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I maintained a table of all the results for the various load tests that we gave. All in all I gave over 500 test runs to get to the ultimate result. As you can clearly see, there are a lot of moving parts to each and every test.&lt;/p&gt;&lt;h4 name=&quot;a8e2&quot; id=&quot;a8e2&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Single Client issues&lt;/h4&gt;&lt;p name=&quot;7ddb&quot; id=&quot;7ddb&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;We started seeing that the client was becoming bottleneck as we kept on increasing our requests per second. Apache bench uses a single core and from the documentation it is evident that it does not provide any feature for using multiple cores.&lt;/p&gt;&lt;p name=&quot;f88f&quot; id=&quot;f88f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;To run multiple clients efficiently we found an interesting linux utility called &lt;a href=&quot;http://www.shakthimaan.com/posts/2014/11/27/gnu-parallel/news.html&quot; data-href=&quot;http://www.shakthimaan.com/posts/2014/11/27/gnu-parallel/news.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Parallel&lt;/a&gt;. As the name suggests, it helps you run multiple commands in parallel and utilises multiple cores. Exactly what we wanted.&lt;/p&gt;&lt;p name=&quot;b09c&quot; id=&quot;b09c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Have a look at a sample command that runs multiple clients using parallel.&lt;/p&gt;&lt;pre name=&quot;6d83&quot; id=&quot;6d83&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;cat hosts.txt |  parallel  &amp;#39;ab  -S -p post_smaller.txt -T application/json -n 100000 -c 3000 {}&amp;#39;&lt;/pre&gt;&lt;pre name=&quot;cb12&quot; id=&quot;cb12&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;sachinm@ip-192-168-0-124:~$ cat hosts.txt&lt;br&gt;http://test.haproxy.in:80/ping&lt;br&gt;http://test.haproxy.in:80/ping&lt;br&gt;http://test.haproxy.in:80/ping&lt;/pre&gt;&lt;p name=&quot;28e5&quot; id=&quot;28e5&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The above command would run 3 ab clients hitting the same URL. This helped us remove the client side bottleneck.&lt;/p&gt;&lt;h4 name=&quot;a97a&quot; id=&quot;a97a&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;The Sleep and Times parameter&lt;/h4&gt;&lt;p name=&quot;90e5&quot; id=&quot;90e5&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;We talked about some parameters in ganglia that we wanted to track. Lets discuss them once by one.&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;f1e5&quot; id=&quot;f1e5&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;packets sent and received&lt;/code&gt; This can be simulated by sending some data as a part of the post request. This would also help us generate some &lt;code class=&quot;markup--code markup--li-code&quot;&gt;network as well as bytes sent and received portions in ganglia&lt;/code&gt;&lt;/li&gt;&lt;li name=&quot;4a31&quot; id=&quot;4a31&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;tcp_established&lt;/code&gt; This is something which took us a long, long time to actually simulate in our scenario. Imagine if a single ping request takes about a second, that would take us about 700k requests per second to reach our tcp_established milestone. &lt;br&gt;Now this number might seem easier to achieve on production, but it was impossible to generate it in our scenario.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;6aa7&quot; id=&quot;6aa7&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;What did we do you might ask? We introduced a sleep parameter in our POST call that specifies the number of milliseconds the server needs to sleep before sending out a response. This would simulate a long running request on production. So now say we have a sleep of about 20 minutes (Yep), that would take us around 583 requests per second to reach the 700k mark.&lt;/p&gt;&lt;p name=&quot;f8bd&quot; id=&quot;f8bd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Additionally, we also introduced another parameter in our POST calls to the HAProxy and that was the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;times&lt;/code&gt; parameter. That specified number of times the server should write a response on the tcp connection before terminating it. This helped us simulated even more data transferred over the wire.&lt;/p&gt;&lt;h4 name=&quot;9f9e&quot; id=&quot;9f9e&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Issues with apache bench&lt;/h4&gt;&lt;p name=&quot;6020&quot; id=&quot;6020&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Although we found out a lot of results with apache bench, we also faced a lot of issues along the way. I won’t be mentioning all of them here as they are not important for this post as I’ll be introducing another client shortly.&lt;/p&gt;&lt;p name=&quot;6f5f&quot; id=&quot;6f5f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We were pretty content with the numbers we were getting out of apache bench, but at one point of time, generating the required tcp connections just became impossible. Somehow the apache bench was not handling the sleep parameter we had introduced, properly and was not scaling for us.&lt;/p&gt;&lt;p name=&quot;7b9f&quot; id=&quot;7b9f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Although running multiple ab clients on a single machine was sorted out by using the parallel utility. Running this setup across multiple client machines was still a pain for us. I had not heard of the &lt;a href=&quot;https://github.com/grondo/pdsh&quot; data-href=&quot;https://github.com/grondo/pdsh&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;pdsh&lt;/a&gt; utility by then and was practically stuck.&lt;/p&gt;&lt;p name=&quot;b9a4&quot; id=&quot;b9a4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, we were not focussing on any timeouts as well. There are some default set of timeouts on the HAProxy, the ab client and the server and we had completely ignored these. We figured out a lot of things along the way and organized ourselves a lot on how to go about testing.&lt;/p&gt;&lt;p name=&quot;3d2c&quot; id=&quot;3d2c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We used to talk about the tipping point graph but we deviated a lot from it as time went on. Meaningful results, however, could only be found by focusing on that.&lt;/p&gt;&lt;p name=&quot;9dab&quot; id=&quot;9dab&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;With apache bench a point came where the number of TCP connections were not increasing. We had around 40–45 clients running on 5–6 different client boxes but were not able to achieve the scale we wanted. Theoretically, the number of TCP connections should have jumped as we went on increasing the sleep time, but it wasn’t working for us.&lt;/p&gt;&lt;h3 name=&quot;0904&quot; id=&quot;0904&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Enter Vegeta&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;da8b&quot; id=&quot;da8b&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 56.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*KGjslsE-jllJYpItVg84sA.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*KGjslsE-jllJYpItVg84sA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;ee61&quot; id=&quot;ee61&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I was searching for some other load testing tools that might be more scalable and better functionality wise as compared to apache bench when I came across V&lt;a href=&quot;https://github.com/tsenart/vegeta&quot; data-href=&quot;https://github.com/tsenart/vegeta&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;egeta&lt;/a&gt;.&lt;/p&gt;&lt;p name=&quot;eafe&quot; id=&quot;eafe&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;From my personal experience, I have seen Vegeta to be extremely scalable and provides much better functionality as compared to apache bench. A single Vegeta client was able to produce the level of throughput equivalent to 15 apache bench clients in our load test.&lt;/p&gt;&lt;p name=&quot;0cf6&quot; id=&quot;0cf6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Moving forward, I will be providing load test results that have been tested using Vegeta itself.&lt;/p&gt;&lt;h3 name=&quot;c7fb&quot; id=&quot;c7fb&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Load Testing with Vegeta&lt;/h3&gt;&lt;p name=&quot;b938&quot; id=&quot;b938&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;First, have a look at the command that we used to run a single Vegeta client. Interestingly, the command to put load on the backend servers is called &lt;code class=&quot;markup--code markup--p-code&quot;&gt;attack&lt;/code&gt; :p&lt;/p&gt;&lt;pre name=&quot;8713&quot; id=&quot;8713&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;echo &amp;quot;POST https://test.haproxy.in:443/ping&amp;quot; | vegeta -cpus=32 attack -duration=10m  -header=&amp;quot;sleep:30000&amp;quot;  -body=post_smaller.txt -rate=2000 -workers=500  | tee reports.bin | vegeta report&lt;/pre&gt;&lt;p name=&quot;0c02&quot; id=&quot;0c02&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Just love the parameters provided by Vegeta. Let’s have a look at some of these below.&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;8a04&quot; id=&quot;8a04&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;-cpus=32&lt;/code&gt; Specifies the number of cores to be used by this client. We had to expand our client machines to 32core, 64Gig because of the amount of load to be generated. If you look closely above, the rate isn’t much. But it becomes difficult to sustain such a load when a lot of connections are in sleep state from the server end.&lt;/li&gt;&lt;li name=&quot;fdda&quot; id=&quot;fdda&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;-duration=10m&lt;/code&gt; I guess this is self explanatory. If you don’t specify any duration, the test will run forever.&lt;/li&gt;&lt;li name=&quot;5691&quot; id=&quot;5691&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;-rate=2000&lt;/code&gt; The number of requests per second.&lt;/li&gt;&lt;/ol&gt;&lt;figure name=&quot;7ea2&quot; id=&quot;7ea2&quot; class=&quot;graf graf--figure graf-after--li&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 323px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 46.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*8QYxI2VKQFtcsNk858eg0A.png&quot; data-width=&quot;1542&quot; data-height=&quot;712&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*8QYxI2VKQFtcsNk858eg0A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;1660&quot; id=&quot;1660&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;So as you can see above, we reached a hefty 32k requests per second on a mere 4 core machine. If you remember the tipping point graph, you will be able to notice it clearly enough above. So the tipping point in this case is 31.5k Non SSL requests.&lt;/p&gt;&lt;p name=&quot;004d&quot; id=&quot;004d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Have a look at some more results from the load test.&lt;/p&gt;&lt;figure name=&quot;31a8&quot; id=&quot;31a8&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 271px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 38.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*v3m7_R_c89id10wD8pxWrQ.png&quot; data-width=&quot;1546&quot; data-height=&quot;598&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*v3m7_R_c89id10wD8pxWrQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;54f1&quot; id=&quot;54f1&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;16k SSL connections is also not bad at all. Please note that at this point in our load testing journey, we had to start from scratch because we had adopted a new client and it was giving us way better results than ab. So we had to do a lot of stuff again.&lt;/p&gt;&lt;figure name=&quot;dd6b&quot; id=&quot;dd6b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 237px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 33.900000000000006%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*aDkvgQvP3TNcIuUfEYa_fQ.png&quot; data-width=&quot;1540&quot; data-height=&quot;522&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*aDkvgQvP3TNcIuUfEYa_fQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;94ca&quot; id=&quot;94ca&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;An increase in the number of cores led to an increase in the number of requests per second that the machine can take before the CPU limit is hit.&lt;/p&gt;&lt;p name=&quot;71f9&quot; id=&quot;71f9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We found that there wasn’t a substantial increase in the number of requests per second if we increased the number of cores from 8 to 16. Also, if we finally decided to go with a 8 core machine in production, we would never allocate all of the cores to HAProxy or be it a any other process for that matter. So we decided to perform some tests with 6 cores as well to see if we had acceptable numbers.&lt;/p&gt;&lt;figure name=&quot;be7d&quot; id=&quot;be7d&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 171px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 24.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Ba_wms7xaxRi5EzOfPsvTQ.png&quot; data-width=&quot;1542&quot; data-height=&quot;376&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*Ba_wms7xaxRi5EzOfPsvTQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;6b6e&quot; id=&quot;6b6e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Not bad.&lt;/p&gt;&lt;h3 name=&quot;b9d0&quot; id=&quot;b9d0&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Introducing the sleep&lt;/h3&gt;&lt;p name=&quot;934a&quot; id=&quot;934a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We were pretty satisfied with our load test results till now. However, this did not simulate the real production scenario. That happened when we introduced a sleep time as well which was absent till now in our tests.&lt;/p&gt;&lt;pre name=&quot;a7d0&quot; id=&quot;a7d0&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;echo &amp;quot;POST https://test.haproxy.in:443/ping&amp;quot; | vegeta -cpus=32 attack -duration=10m  -header=&amp;quot;sleep:1000&amp;quot;  -body=post_smaller.txt-rate=2000 -workers=500  | tee reports.bin | vegeta report&lt;/pre&gt;&lt;p name=&quot;ead8&quot; id=&quot;ead8&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;So a sleep time of 1000 milliseconds would lead to server sleeping for &lt;code class=&quot;markup--code markup--p-code&quot;&gt;x&lt;/code&gt; amount of time where &lt;code class=&quot;markup--code markup--p-code&quot;&gt;0&amp;lt; x &amp;lt; 1000&lt;/code&gt; and is selected randomly. So on an average the above load test will give a latency of ≥ 500ms&lt;/p&gt;&lt;figure name=&quot;82c6&quot; id=&quot;82c6&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 187px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 26.700000000000003%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*BfBf2pUQDVc7D6dSWoxOmw.png&quot; data-width=&quot;1550&quot; data-height=&quot;414&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*BfBf2pUQDVc7D6dSWoxOmw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;c09b&quot; id=&quot;c09b&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The numbers in the last cell represent&lt;/p&gt;&lt;pre name=&quot;7bdd&quot; id=&quot;7bdd&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;TCP established, Packets Rec, Packets Sent&lt;/pre&gt;&lt;p name=&quot;8bd4&quot; id=&quot;8bd4&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;respectively. As you can clearly see the max requests per second that the 6 core machine can support has decreased to 8k from 20k. Clearly, the sleep has its impact and that impact is the increase in the number of TCP connections established. This is however nowhere near to the 700k mark that we set out to achieve.&lt;/p&gt;&lt;h3 name=&quot;2ed3&quot; id=&quot;2ed3&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Milestone #1&lt;/h3&gt;&lt;p name=&quot;d20a&quot; id=&quot;d20a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;How do we increase the number of TCP connections? Simple, we keep on increasing the sleep time and they should rise. We kept playing around with the sleep time and we stopped at the 60 seconds sleep time. That would mean an average latency of around 30 sec.&lt;/p&gt;&lt;p name=&quot;7f00&quot; id=&quot;7f00&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There is an interesting result parameter that Vegeta provides and that is % of requests successful. We saw that with the above sleep time, only 50% of the calls were succeeding. See the results below.&lt;/p&gt;&lt;figure name=&quot;8b80&quot; id=&quot;8b80&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 127px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 18.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*-YAcVyKfw40Q84s3brTRdw.png&quot; data-width=&quot;1542&quot; data-height=&quot;280&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*-YAcVyKfw40Q84s3brTRdw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;f721&quot; id=&quot;f721&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We achieved a whooping 400k TCP established connections with 8k requests per second and 60000 ms sleep time. The R in 60000R means Random.&lt;/p&gt;&lt;p name=&quot;50cf&quot; id=&quot;50cf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The first real discovery we made was that there is a default call timeout in Vegeta which is of 30 seconds and that explained why 50% of our calls were failing. So we increased that to about 70s for our further tests and kept on varying it as and when the need arose.&lt;/p&gt;&lt;figure name=&quot;fa37&quot; id=&quot;fa37&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 377px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 53.900000000000006%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*0RM6sCjY53Lr9gL-nMOWeQ.png&quot; data-width=&quot;1544&quot; data-height=&quot;832&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*0RM6sCjY53Lr9gL-nMOWeQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;d586&quot; id=&quot;d586&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We hit the 700k mark easily after tweaking the timeout value from the client end. The only problem with this was that these were not consistent. These were just peaks. So the system hit a peak of 600k or 700k but did not stay there for very long.&lt;/p&gt;&lt;p name=&quot;6b6a&quot; id=&quot;6b6a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We however wanted something similar to this&lt;/p&gt;&lt;figure name=&quot;42d0&quot; id=&quot;42d0&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 304px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 43.4%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*RJqRVlM6uspwaFytYVTUtw.png&quot; data-width=&quot;1152&quot; data-height=&quot;500&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*RJqRVlM6uspwaFytYVTUtw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;348d&quot; id=&quot;348d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This shows a stable state where 780k connections are maintained. If you look closely at the stats above, the number of requests per second are very high. On production however, we have much less number of requests (somewhere around 300) on a single HAProxy machine.&lt;/p&gt;&lt;p name=&quot;a1df&quot; id=&quot;a1df&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We were sure that if we drastically reduced the number of HAProxies we have on production (somewhere around 30, which means 30*300 ~ 9k connects per second) we will hit the machine limits w.r.t. the number of TCP connections first and not the CPU.&lt;/p&gt;&lt;blockquote name=&quot;d256&quot; id=&quot;d256&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;So we decided to achieve 900 requests per second and 30MB/s Network and 2.1Million TCP established connections. We agreed upon these numbers as these would be 3 times our production load on a single HAProxy.&lt;/blockquote&gt;&lt;p name=&quot;58c3&quot; id=&quot;58c3&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Plus, till now we had settled on 6 cores being used by HAProxy. We wanted to test out 3 cores only because this is what would be easiest for us to roll out on our production machines (Our production machines, as mentioned before are 4 core 30 Gig. So for rolling out changes with &lt;code class=&quot;markup--code markup--p-code&quot;&gt;nbproc = 3&lt;/code&gt; would be easiest for us.&lt;/p&gt;&lt;pre name=&quot;5856&quot; id=&quot;5856&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;REMEMBER the machine we had at this point in time was 16 core 30 Gig machine with 3 cores being allocated to HAProxy.&lt;/pre&gt;&lt;h3 name=&quot;79bc&quot; id=&quot;79bc&quot; class=&quot;graf graf--h3 graf-after--pre&quot;&gt;Milestone #2&lt;/h3&gt;&lt;p name=&quot;9eaa&quot; id=&quot;9eaa&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Now that we had max limits on requests per second that different variations in machine configuration could support, we only had one task left as mentioned above.&lt;/p&gt;&lt;p name=&quot;207d&quot; id=&quot;207d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Achieve 3X the production load which is&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;6352&quot; id=&quot;6352&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;900 requests per second&lt;/li&gt;&lt;li name=&quot;808b&quot; id=&quot;808b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;2.1 million TCP established and&lt;/li&gt;&lt;li name=&quot;318d&quot; id=&quot;318d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;30 MB/s network.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;54a4&quot; id=&quot;54a4&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;We got stuck yet again as the TCP established were taking a hard hit at 220k. No matter what the number of client machines or what the sleep time was, number of TCP connections seemed to have stuck there.&lt;/p&gt;&lt;p name=&quot;df14&quot; id=&quot;df14&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at some calculations. 220k TCP established connections and 900 requests per second = 110,000 / 900 ~= 120 seconds .I took 110k because 220k connections include both incoming and outgoing. So it’s two way.&lt;/p&gt;&lt;p name=&quot;9189&quot; id=&quot;9189&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Our doubt about 2 minutes being a limit somewhere in the system was verified when we introduced logs on the HAProxy side. We could see 120000 ms as total time for a lot of connections in the logs.&lt;/p&gt;&lt;pre name=&quot;216b&quot; id=&quot;216b&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;Mar 23 13:24:24 localhost haproxy[53750]: 172.168.0.232:48380 [23/Mar/2017:13:22:22.686] api~ api-backend/http31 39/0/2062/-1/122101 -1 0 - - SD-- 1714/1714/1678/35/0 0/0 {0,&amp;quot;&amp;quot;,&amp;quot;&amp;quot;} &amp;quot;POST /ping HTTP/1.1&amp;quot;&lt;/pre&gt;&lt;pre name=&quot;764b&quot; id=&quot;764b&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;122101 is the timeout value. See HAProxy documentation on meanings of all these values. &lt;/pre&gt;&lt;p name=&quot;0302&quot; id=&quot;0302&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;On investigating further we found out that NodeJs has a default request timeout of 2 minutes. Voila !&lt;/p&gt;&lt;figure name=&quot;1b21&quot; id=&quot;1b21&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 912px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 130.29999999999998%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*GnRdySeu4J-6UnkHGOiuuA.png&quot; data-width=&quot;1228&quot; data-height=&quot;1600&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*GnRdySeu4J-6UnkHGOiuuA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;div name=&quot;7f4a&quot; id=&quot;7f4a&quot; class=&quot;graf graf--mixtapeEmbed graf-after--figure&quot;&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23925284/how-to-modify-the-nodejs-request-default-timeout-time&quot; data-href=&quot;http://stackoverflow.com/questions/23925284/how-to-modify-the-nodejs-request-default-timeout-time&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;http://stackoverflow.com/questions/23925284/how-to-modify-the-nodejs-request-default-timeout-time&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;how to modify the nodejs request default timeout time?&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;I was using nodejs request, the default timeout of nodejs http is 120000 ms, but it is not enough for me, while my…&lt;/em&gt;stackoverflow.com&lt;/a&gt;&lt;a href=&quot;http://stackoverflow.com/questions/23925284/how-to-modify-the-nodejs-request-default-timeout-time&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;69a6ce6ceca32709e65c1298a96eba04&quot; data-thumbnail-img-id=&quot;0*I9pljOqQJDl9Hfxv.&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*I9pljOqQJDl9Hfxv.);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div name=&quot;f347&quot; id=&quot;f347&quot; class=&quot;graf graf--mixtapeEmbed graf-after--mixtapeEmbed&quot;&gt;&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_settimeout_msecs_callback&quot; data-href=&quot;https://nodejs.org/api/http.html#http_server_settimeout_msecs_callback&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://nodejs.org/api/http.html#http_server_settimeout_msecs_callback&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;HTTP | Node.js v7.8.0 Documentation&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;The HTTP interfaces in Node.js are designed to support many features of the protocol which have been traditionally…&lt;/em&gt;nodejs.org&lt;/a&gt;&lt;a href=&quot;https://nodejs.org/api/http.html#http_server_settimeout_msecs_callback&quot; class=&quot;js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock&quot; data-media-id=&quot;569a99a63445102def730e4cde08785e&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;4321&quot; id=&quot;4321&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;But our happiness was apparently short lived. At 1.3 million, the HAProxy connections suddenly dropped to 0 and started increasing again. We soon checked the &lt;a href=&quot;http://www.linfo.org/dmesg.html&quot; data-href=&quot;http://www.linfo.org/dmesg.html&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;dmesg&lt;/a&gt; command that provided us some useful kernel level information for our HAProxy process.&lt;/p&gt;&lt;p name=&quot;8c5e&quot; id=&quot;8c5e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Basically, the HAProxy process had gone out of memory. So we decided to increase the machine RAM and we shifted to 16 core 64 Gig machine with &lt;code class=&quot;markup--code markup--p-code&quot;&gt;nbproc = 3&lt;/code&gt; and because of this change we were able to reach 2.4 million connections.&lt;/p&gt;&lt;h3 name=&quot;8d9e&quot; id=&quot;8d9e&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Backend Code&lt;/h3&gt;&lt;p name=&quot;c225&quot; id=&quot;c225&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Following is the backend server code that was being used. We had also used statsd in the server code to get consolidated data on requests per second that were being received by the client.&lt;/p&gt;&lt;pre name=&quot;ae99&quot; id=&quot;ae99&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;var http = require(&amp;#39;http&amp;#39;);&lt;br&gt;var createStatsd = require(&amp;#39;uber-statsd-client&amp;#39;);&lt;br&gt;qs = require(&amp;#39;querystring&amp;#39;);&lt;/pre&gt;&lt;pre name=&quot;f6eb&quot; id=&quot;f6eb&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;var sdc = createStatsd({&lt;br&gt;host: &amp;#39;172.168.0.134&amp;#39;,&lt;br&gt;port: 8125&lt;br&gt;});&lt;/pre&gt;&lt;pre name=&quot;9a27&quot; id=&quot;9a27&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;var argv = process.argv;&lt;br&gt;var port = argv[2];&lt;/pre&gt;&lt;pre name=&quot;1159&quot; id=&quot;1159&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;function randomIntInc (low, high)&lt;br&gt;{&lt;br&gt;    return Math.floor(Math.random() * (high - low + 1) + low);&lt;br&gt;}&lt;/pre&gt;&lt;pre name=&quot;3677&quot; id=&quot;3677&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;function sendResponse(res,times, old_sleep)&lt;br&gt;{&lt;br&gt;    res.write(&amp;#39;pong&amp;#39;);&lt;br&gt;    if(times==0)&lt;br&gt;    {&lt;br&gt;        res.end();&lt;br&gt;    }&lt;br&gt;    else&lt;br&gt;    { &lt;br&gt;        sleep = randomIntInc(0, old_sleep+1);&lt;br&gt;        setTimeout(sendResponse, sleep, res,times-1, old_sleep);&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;&lt;pre name=&quot;6125&quot; id=&quot;6125&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;var server = http.createServer(function(req, res)&lt;br&gt;{&lt;br&gt;   headers = req.headers;&lt;br&gt;   old_sleep = parseInt(headers[&amp;quot;sleep&amp;quot;]);&lt;br&gt;   times = headers[&amp;quot;times&amp;quot;] || 0;&lt;br&gt;   sleep = randomIntInc(0, old_sleep+1);&lt;br&gt;   console.log(sleep);&lt;br&gt;   sdc.increment(&amp;quot;ssl.server.http&amp;quot;);&lt;br&gt;   res.writeHead(200);&lt;br&gt;   setTimeout(sendResponse, sleep, res, times, old_sleep)&lt;/pre&gt;&lt;pre name=&quot;8e8a&quot; id=&quot;8e8a&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;});&lt;/pre&gt;&lt;pre name=&quot;f149&quot; id=&quot;f149&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;server.timeout = 3600000;&lt;br&gt;server.listen(port);&lt;/pre&gt;&lt;p name=&quot;0181&quot; id=&quot;0181&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;We also had a small script to run multiple backend servers. We had 8 machines with 10 backend servers EACH (yeah !). We literally took the idea of clients and backend servers being infinite for the load test, seriously.&lt;/p&gt;&lt;pre name=&quot;500e&quot; id=&quot;500e&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;counter=0&lt;br&gt;while [ $counter -le 9 ]&lt;br&gt;do&lt;br&gt;   port=$((8282+$counter))&lt;br&gt;   nodejs /opt/local/share/test-tools/HikeCLI/nodeclient/httpserver.js $port &amp;amp;&lt;br&gt;   echo &amp;quot;Server created on port &amp;quot;  $port&lt;/pre&gt;&lt;pre name=&quot;a17c&quot; id=&quot;a17c&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;   ((counter++))&lt;br&gt;done&lt;/pre&gt;&lt;pre name=&quot;bbc4&quot; id=&quot;bbc4&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;echo &amp;quot;Created all servers&amp;quot;&lt;/pre&gt;&lt;h3 name=&quot;3b40&quot; id=&quot;3b40&quot; class=&quot;graf graf--h3 graf-after--pre&quot;&gt;Client Code&lt;/h3&gt;&lt;p name=&quot;219b&quot; id=&quot;219b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;As for the client, there was a limitation of 63k TCP connections per IP. If you are not sure about this concept, please refer my &lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-2-4c8677780df6&quot; data-href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-2-4c8677780df6&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;previous article&lt;/a&gt; in this series.&lt;/p&gt;&lt;p name=&quot;7eb5&quot; id=&quot;7eb5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So in order to achieve 2.4 million connections (two sided which is 1.2 million from the client machines), we needed somewhere around 20 machines. Its a pain really to run the Vegeta command on all 20 machines one by one and even of you found a way to do that using something like &lt;a href=&quot;https://github.com/brockgr/csshx&quot; data-href=&quot;https://github.com/brockgr/csshx&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;csshx&lt;/a&gt;, you still would need something to combine all the results from all the Vegeta clients.&lt;/p&gt;&lt;p name=&quot;7e51&quot; id=&quot;7e51&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Check out the script below.&lt;/p&gt;&lt;pre name=&quot;12fe&quot; id=&quot;12fe&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;result_file=$1&lt;/pre&gt;&lt;pre name=&quot;3004&quot; id=&quot;3004&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;declare -a machines=(&amp;quot;172.168.0.138&amp;quot; &amp;quot;172.168.0.141&amp;quot; &amp;quot;172.168.0.142&amp;quot; &amp;quot;172.168.0.18&amp;quot; &amp;quot;172.168.0.5&amp;quot; &amp;quot;172.168.0.122&amp;quot; &amp;quot;172.168.0.123&amp;quot; &amp;quot;172.168.0.124&amp;quot; &amp;quot;172.168.0.232&amp;quot; &amp;quot; 172.168.0.244&amp;quot; &amp;quot;172.168.0.170&amp;quot; &amp;quot;172.168.0.179&amp;quot; &amp;quot;172.168.0.59&amp;quot; &amp;quot;172.168.0.68&amp;quot; &amp;quot;172.168.0.137&amp;quot; &amp;quot;172.168.0.155&amp;quot; &amp;quot;172.168.0.154&amp;quot; &amp;quot;172.168.0.45&amp;quot; &amp;quot;172.168.0.136&amp;quot; &amp;quot;172.168.0.143&amp;quot;)&lt;/pre&gt;&lt;pre name=&quot;aa85&quot; id=&quot;aa85&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;bins=&amp;quot;&amp;quot;&lt;br&gt;commas=&amp;quot;&amp;quot;&lt;/pre&gt;&lt;pre name=&quot;e6ee&quot; id=&quot;e6ee&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;for i in &amp;quot;${machines[@]}&amp;quot;; do bins=$bins&amp;quot;,&amp;quot;$i&amp;quot;.bin&amp;quot;; commas=$commas&amp;quot;,&amp;quot;$i;  done;&lt;/pre&gt;&lt;pre name=&quot;96e3&quot; id=&quot;96e3&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;bins=${bins:1}&lt;br&gt;commas=${commas:1}&lt;/pre&gt;&lt;pre name=&quot;6e77&quot; id=&quot;6e77&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;pdsh -b -w &amp;quot;$commas&amp;quot; &amp;#39;echo &amp;quot;POST http://test.haproxy.in:80/ping&amp;quot; | /home/sachinm/.linuxbrew/bin/vegeta -cpus=32 attack -connections=1000000 -header=&amp;quot;sleep:20&amp;quot; -header=&amp;quot;times:2&amp;quot; -body=post_smaller.txt -timeout=2h -rate=3000 -workers=500 &amp;gt; &amp;#39; $result_file&lt;/pre&gt;&lt;pre name=&quot;ccf9&quot; id=&quot;ccf9&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;for i in &amp;quot;${machines[@]}&amp;quot;; do  scp sachinm@$i:/home/sachinm/$result_file $i.bin ; done;&lt;/pre&gt;&lt;pre name=&quot;f5fb&quot; id=&quot;f5fb&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;vegeta report -inputs=&amp;quot;$bins&amp;quot;&lt;/pre&gt;&lt;p name=&quot;6ece&quot; id=&quot;6ece&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Apparently, Vegeta provides information on this utility called &lt;a href=&quot;https://github.com/grondo/pdsh&quot; data-href=&quot;https://github.com/grondo/pdsh&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;pdsh&lt;/a&gt; that lets you run a command concurrently on multiple machines remotely . Additionally, the Vegeta allows us to combine multiple results into one and that’s really all we wanted.&lt;/p&gt;&lt;h3 name=&quot;5d37&quot; id=&quot;5d37&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;HAProxy Configuration&lt;/h3&gt;&lt;p name=&quot;0f79&quot; id=&quot;0f79&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This is probably what you came here looking for, below is the HAProxy config that we used in our load test runs. The most important part being that of the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;nbproc&lt;/code&gt; setting and the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;maxconn&lt;/code&gt; setting. The maxconn setting allows us to provide the maximum number of TCP connections that the HAProxy can support overall (one way).&lt;/p&gt;&lt;p name=&quot;7d0b&quot; id=&quot;7d0b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Changes to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;maxconn&lt;/code&gt; setting leads to increase in HAProxy process’ ulimit. Take a look below&lt;/p&gt;&lt;figure name=&quot;ffc2&quot; id=&quot;ffc2&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 304px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 43.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*At2DHNGCMm9hUPbKRvtX4g.png&quot; data-width=&quot;1568&quot; data-height=&quot;682&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*At2DHNGCMm9hUPbKRvtX4g.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;44ca&quot; id=&quot;44ca&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The max open files has increased to 4 million because of the max connections for HAProxy being set at 2 million. Neat !&lt;/p&gt;&lt;p name=&quot;24da&quot; id=&quot;24da&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Check the article below for a whole lot of HAProxy optimisations that you can and should do to achieve the kind of stats we achieved.&lt;/p&gt;&lt;div name=&quot;eba5&quot; id=&quot;eba5&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://www.linangran.com/?p=547&quot; data-href=&quot;https://www.linangran.com/?p=547&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://www.linangran.com/?p=547&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Use HAProxy to load balance 300k concurrent tcp socket connections: Port Exhaustion, Keep-alive and…&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;I&amp;#39;m trying to build up a push system recently. To increase the scalability of the system, the best practice is to make…&lt;/em&gt;www.linangran.com&lt;/a&gt;&lt;a href=&quot;https://www.linangran.com/?p=547&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;8d00329a02e93224a861ca93e4c60a64&quot; data-thumbnail-img-id=&quot;0*NoW97lRlDGmHnsPJ.&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*NoW97lRlDGmHnsPJ.);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;figure name=&quot;55a9&quot; id=&quot;55a9&quot; class=&quot;graf graf--figure graf-after--mixtapeEmbed&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 687px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 98.1%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*sd0hWfAkh-iwzo4AKrCSuA.png&quot; data-width=&quot;1250&quot; data-height=&quot;1226&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*sd0hWfAkh-iwzo4AKrCSuA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;figure name=&quot;90a5&quot; id=&quot;90a5&quot; class=&quot;graf graf--figure graf-after--figure&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 737px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 105.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*pGyKr5KepjpzKIy--QcDPg.png&quot; data-width=&quot;1600&quot; data-height=&quot;1684&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*pGyKr5KepjpzKIy--QcDPg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;2fcc&quot; id=&quot;2fcc&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;The http30 goes on to http83 :p&lt;/p&gt;&lt;p name=&quot;f9f5&quot; id=&quot;f9f5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That’s all for now folks. If you’ve it so far, I’m truly amazed :)&lt;/p&gt;&lt;p name=&quot;11f1&quot; id=&quot;11f1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A special shout out to &lt;a href=&quot;https://medium.com/u/7a4e80f5af06&quot; data-href=&quot;https://medium.com/u/7a4e80f5af06&quot; data-anchor-type=&quot;2&quot; data-user-id=&quot;7a4e80f5af06&quot; data-action-value=&quot;7a4e80f5af06&quot; data-action=&quot;show-user-card&quot; data-action-type=&quot;hover&quot; class=&quot;markup--user markup--p-user&quot; target=&quot;_blank&quot;&gt;Dheeraj Kumar Sidana&lt;/a&gt; who helped us all the way through this and without whose help we would not have been able to reach any meaningful results. :)&lt;/p&gt;&lt;p name=&quot;a75b&quot; id=&quot;a75b&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Do let me know how this blog post helped you. Also, please recommend (❤) and spread the love as much as possible for this post if you think this might be useful for someone.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Load Testing HAProxy (Part 2)</title>
   <link href="http://localhost:4000/2017/03/26/Load-Testing-HAProxy-Part-2-4c8677780df6/"/>
   <updated>2017-03-26T00:00:00-07:00</updated>
   <id>http://localhost:4000/2017/03/26/Load-Testing-HAProxy--Part-2--4c8677780df6</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Load Testing HAProxy (Part 2)&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Load Testing HAProxy (Part 2)&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
This is the second part in the 3 part series on performance testing of the famous TCP load balancer and reverse proxy, HAProxy. If you…
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;c817&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;541b&quot; id=&quot;541b&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;6ced&quot; id=&quot;6ced&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 72.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*s2S16ZXbIxtsYIG87aOadg.png&quot; data-width=&quot;3055&quot; data-height=&quot;2222&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*s2S16ZXbIxtsYIG87aOadg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;2b00&quot; id=&quot;2b00&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This is the second part in the 3 part series on performance testing of the famous TCP load balancer and reverse proxy, HAProxy. If you haven’t gone through the previous post, I would highly suggest you do so to get some sort of context.&lt;/p&gt;&lt;div name=&quot;11c5&quot; id=&quot;11c5&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; data-href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Load Testing HAProxy (Part-1)&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;Load Testing ? HAProxy ? If all this seems greek to you, don’t worry. I will provide inline links to read up on what…&lt;/em&gt;medium.com&lt;/a&gt;&lt;a href=&quot;https://medium.com/@sachinmalhotra/load-testing-haproxy-part-1-f7d64500b75d&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;b4e074c36e4fe03700883e589ab06de8&quot; data-thumbnail-img-id=&quot;1*4npSurj6b2n__CsxxnaUQw.png&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/1*4npSurj6b2n__CsxxnaUQw.png);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;834b&quot; id=&quot;834b&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;This post will focus on the TCP Port exhaustion problem and how we can deal with it. In the last post we talked about how we can tune the kernel level and process level ulimit settings. This post is focussed on modifying the sysctl settings to get over the port exhaustion limits.&lt;/p&gt;&lt;h3 name=&quot;ebc3&quot; id=&quot;ebc3&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;SYSCTL Local Port Range and Orphaned Sockets&lt;/h3&gt;&lt;p name=&quot;ade3&quot; id=&quot;ade3&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Port exhaustion is a problem that will cause TCP communications with other machines over the network to fail. Most of the times there is a single process that leads to this problem and restarting it will fix the issue, temporarily. It will however come back to bite in a few hours or days depending on the system load.&lt;/p&gt;&lt;p name=&quot;1eac&quot; id=&quot;1eac&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Port exhaustion does not mean that the ports actually get tired. Of course, that is not possible because the computer is not human and the ports are not capable of getting tired. The truth is much more insidious. Port exhaustion simply means that the system does not have any more &lt;em class=&quot;markup--em markup--p-em&quot;&gt;ephemeral ports &lt;/em&gt;left to communicate with other machines / servers.&lt;/p&gt;&lt;p name=&quot;b353&quot; id=&quot;b353&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before going further, &lt;em class=&quot;markup--em markup--p-em&quot;&gt;let us understand what constitutes a TCP connection and what really does an inbound and an outbound connection means.&lt;/em&gt;&lt;/p&gt;&lt;p name=&quot;4d78&quot; id=&quot;4d78&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In majority of the cases whenever we talk about TCP connections and high scalability and ability to support concurrent connections, we usually refer to the number of inbound connections.&lt;/p&gt;&lt;p name=&quot;12a7&quot; id=&quot;12a7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Say, the HAProxy is listening on port 443 for new inbound connections. If we say that the HAProxy can support X number of concurrent connections, what we really mean are X number of incoming connections and all of them are established on port 443 on the HAProxy machine.&lt;/p&gt;&lt;p name=&quot;e89e&quot; id=&quot;e89e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If these connections are inbound for the HAProxy, then these have to be &lt;em class=&quot;markup--em markup--p-em&quot;&gt;outbound for the client machines where the connection originated. &lt;/em&gt;Any sort of communication from the client requires them to initiate outbound connections to the servers.&lt;/p&gt;&lt;blockquote name=&quot;370e&quot; id=&quot;370e&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;When a connection is established over TCP, a socket is created on both the local and the remote host. These sockets are then connected to create a socket pair, which is described by a unique 4-tuple consisting of the local IP address and port along with the remote IP address and port.&lt;/blockquote&gt;&lt;figure name=&quot;d060&quot; id=&quot;d060&quot; class=&quot;graf graf--figure graf-after--blockquote&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 222px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 31.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*RTMxj2dEaOP0jxRS0II52Q.png&quot; data-width=&quot;1410&quot; data-height=&quot;448&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*RTMxj2dEaOP0jxRS0II52Q.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;3 TCP connections from client to server/proxy&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;671f&quot; id=&quot;671f&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;If you understood the concept of the quadruple, you will realise that in an outbound connection or rather multiple outbound connections to the SAME backend server, 2things always remain the same i.e. Destination IP and Destination Port. Assuming we are only taking into account a single client machine, the client IP will also remain the same.&lt;/p&gt;&lt;p name=&quot;69b3&quot; id=&quot;69b3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This means that the number of outbound connections is dependent on the number of client ports that can be used for establishing the connection. While establishing an outbound connection, the source port is randomly selected from the ephemeral port range and this port gets freed up once the connection is destroyed. That’s why such ports are called as ephemeral ports.&lt;/p&gt;&lt;p name=&quot;1a97&quot; id=&quot;1a97&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;By default, the total number of local ephemeral ports available are around 28000.&lt;/p&gt;&lt;figure name=&quot;93c0&quot; id=&quot;93c0&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 55px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 7.9%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*wizxu4JbP_-59HRWOxNTbg.png&quot; data-width=&quot;1036&quot; data-height=&quot;82&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*wizxu4JbP_-59HRWOxNTbg.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;a382&quot; id=&quot;a382&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Now you might be thinking that 28k is a pretty large number and what can possibly cause 28k connections to get used up at a single point of time? In order to understand this, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;we have to understand the TCP connection lifecycle.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;a8d1&quot; id=&quot;a8d1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;During the TCP handshake, the connection state goes from&lt;/p&gt;&lt;p name=&quot;1201&quot; id=&quot;1201&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;SYN_SENT → SYN_RECV → ESTABLISHED. Once the connection is in ESTABLISHED state, it means that the TCP connection is now active. &lt;em class=&quot;markup--em markup--p-em&quot;&gt;However, once the connection is terminated, &lt;/em&gt;the local port that was being used earlier does not become active immediately.&lt;/p&gt;&lt;p name=&quot;b22d&quot; id=&quot;b22d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The connection enters a state known as the &lt;em class=&quot;markup--em markup--p-em&quot;&gt;TIME_WAIT state for a period of 120 seconds before it is finally terminated. &lt;/em&gt;This is a kernel level setting that exists to allow any delayed or out of order packets to be ignored by the network.&lt;/p&gt;&lt;blockquote name=&quot;42e3&quot; id=&quot;42e3&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;If you do the math, it won’t take more than&lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt; 230 concurrent connections per second&lt;/strong&gt; before the supposedly large limit of 28000 ephemeral ports on the system is reached. This limit is very easy to reach on proxies like HAProxy or NGINX because all the traffic is routed through them to the backend servers.&lt;/blockquote&gt;&lt;p name=&quot;cf20&quot; id=&quot;cf20&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;When a connection enters the TIME_WAIT state, it is known as an &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;orphaned socket&lt;/em&gt;&lt;/strong&gt; because the TCP socket in this case is not help by any socket descriptor but are still held by the system for the designated time i.e. 120 seconds by default.&lt;/p&gt;&lt;h3 name=&quot;8aa2&quot; id=&quot;8aa2&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;How to detect this?&lt;/h3&gt;&lt;p name=&quot;c7d5&quot; id=&quot;c7d5&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Enough with all the theoretical stuff. Let’s jump in and see how we can identify if this limit has been hit on the system. There are two commands I absolutely love to use to find out the number of TCP connections established on the system.&lt;/p&gt;&lt;h4 name=&quot;39b4&quot; id=&quot;39b4&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;ss (Socket Statistics)&lt;/h4&gt;&lt;p name=&quot;b0bb&quot; id=&quot;b0bb&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;The socket statistics command is a sort of replacement of the famous netstat command and is much faster than the netstat command in rendering information because it fetches the connections info directly from the kernel space. In order to get a hang of the different options supported by the ss command, check out&lt;/p&gt;&lt;div name=&quot;da84&quot; id=&quot;da84&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;http://www.binarytides.com/linux-ss-command/&quot; data-href=&quot;http://www.binarytides.com/linux-ss-command/&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;http://www.binarytides.com/linux-ss-command/&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;10 examples of Linux ss command to monitor network connections&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;In a previous tutorial we saw how to use the netstat command to get statistics on network/socket connections. However…&lt;/em&gt;www.binarytides.com&lt;/a&gt;&lt;a href=&quot;http://www.binarytides.com/linux-ss-command/&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;d00df2553001213c2bb541f65e1b78eb&quot; data-thumbnail-img-id=&quot;0*CzGSu58bgHL_QyV1.&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*CzGSu58bgHL_QyV1.);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;5ca3&quot; id=&quot;5ca3&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;The `ss -s` command will show the total number of TCP established connections on the machine. If you see this reach the 28000 mark, it is very much possible that the ephemeral ports have been exhausted on that machine. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;BEWARE:&lt;/em&gt;&lt;/strong&gt; This might be higher than the 28k number if multiple services are running on the same machine on different ports.&lt;/p&gt;&lt;h4 name=&quot;8c67&quot; id=&quot;8c67&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Netstat&lt;/h4&gt;&lt;p name=&quot;3776&quot; id=&quot;3776&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;The netstat command is a very famous command that provides information about all sorts of connections established on the machine’s networking stack.&lt;/p&gt;&lt;pre name=&quot;2578&quot; id=&quot;2578&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;sudo netstat -anptl &lt;/pre&gt;&lt;p name=&quot;9e98&quot; id=&quot;9e98&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This will show you the details about all the connections on the machine. The details include&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;1504&quot; id=&quot;1504&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;local address&lt;/li&gt;&lt;li name=&quot;056f&quot; id=&quot;056f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;remote address&lt;/li&gt;&lt;li name=&quot;132e&quot; id=&quot;132e&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;connection state&lt;/li&gt;&lt;li name=&quot;7508&quot; id=&quot;7508&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;process pid&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;59f8&quot; id=&quot;59f8&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;We can also use this to see if a single process has established 28k connections to an outbound server which gives us insights into the port exhaustion problem.&lt;/p&gt;&lt;figure name=&quot;3bb6&quot; id=&quot;3bb6&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 200px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 28.499999999999996%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*sZemeif4fRCVwE56TnP44A.png&quot; data-width=&quot;1486&quot; data-height=&quot;424&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*sZemeif4fRCVwE56TnP44A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;a67e&quot; id=&quot;a67e&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;For eg:- the above image shows that a process with pid 9758 has established multiple connections with the foreign machine with IP 192.168.0.168 and port 443. As we can clearly see, on the source side of things, there are numerous ports being used.&lt;/p&gt;&lt;pre name=&quot;eaae&quot; id=&quot;eaae&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;sachinm@ip-192-168-0-122:~$ sudo netstat -anptl | grep &amp;#39;192.168.0.168:443&amp;#39; | cut -c69-79 | sort | uniq -c | sort -rn&lt;/pre&gt;&lt;pre name=&quot;f3dd&quot; id=&quot;f3dd&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;5670 ESTABLISHED&lt;/pre&gt;&lt;p name=&quot;5da7&quot; id=&quot;5da7&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This modified command will show the status of the different connections established with 192.168.0.168 on port 443. Currently there are 5670 connections. If this limit were to reach 28k, then you should look at options to increase the ephemeral port range on the machine.&lt;/p&gt;&lt;p name=&quot;3ee7&quot; id=&quot;3ee7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let’s look at another interesting command that you can issue at the server end or the proxy end to find out how many inbound connections have been established and by which IPs. So for example check out the result of the below command&lt;/p&gt;&lt;pre name=&quot;c222&quot; id=&quot;c222&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;ss -tan &amp;#39;sport = :443&amp;#39; | awk &amp;#39;{print $(NF)&amp;quot; &amp;quot;$(NF-1)}&amp;#39; | sed &amp;#39;s/:[^ ]*//g&amp;#39; | sort | uniq -c&lt;/pre&gt;&lt;figure name=&quot;ca9b&quot; id=&quot;ca9b&quot; class=&quot;graf graf--figure graf-after--pre&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 256px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 36.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*1QWzk7jbPFW_vXZ1f-M2Lw.png&quot; data-width=&quot;2020&quot; data-height=&quot;738&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*1QWzk7jbPFW_vXZ1f-M2Lw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;f345&quot; id=&quot;f345&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This shows that there are about 14 different machines who have established around 2300 connections each with 192.168.0.168 and if you look at the command closely, we have filtered out results only for port 443.&lt;/p&gt;&lt;p name=&quot;7e0d&quot; id=&quot;7e0d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Enough with finding the problem already. Let’s dive straight into finding the solution(s) to this problem.&lt;/p&gt;&lt;h3 name=&quot;f22f&quot; id=&quot;f22f&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;What’s the way out?&lt;/h3&gt;&lt;figure name=&quot;aec5&quot; id=&quot;aec5&quot; class=&quot;graf graf--figure graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 700px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 100%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*KhacIUhbHawI68R-IRyD8A.png&quot; data-width=&quot;960&quot; data-height=&quot;960&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*KhacIUhbHawI68R-IRyD8A.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;68fb&quot; id=&quot;68fb&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Well don’t be afraid because sysctl just happens to be a friendly monster. There are many ways by which we can solve this problem.&lt;/p&gt;&lt;h4 name=&quot;a197&quot; id=&quot;a197&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Approach #1&lt;/h4&gt;&lt;p name=&quot;d6fa&quot; id=&quot;d6fa&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;One of the most practical approaches to solve this problem and one that you most likely will or rather should end up doing is to increase the local ephemeral port range to the maximum possible value. As mentioned before, the default range is very small.&lt;/p&gt;&lt;pre name=&quot;34e5&quot; id=&quot;34e5&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;echo 1024 65535 &amp;gt; /proc/sys/net/ipv4/ip_local_port_range&lt;/pre&gt;&lt;p name=&quot;cc9d&quot; id=&quot;cc9d&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This will increase the local port range to a bigger value. We cannot increase the range beyond this as there can only be a maximum of 65535 ports and the first 1024 are reserved for select services and purposes.&lt;/p&gt;&lt;p name=&quot;930e&quot; id=&quot;930e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Note that you might still get bottleneck on this issue. However, instead of 28000 ports being used locally, it will be 64000 ports. Not a full proof solution but this is something that you can do to give you some breathing room.&lt;/p&gt;&lt;p name=&quot;d6ea&quot; id=&quot;d6ea&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Does this mean I can only get about 64k concurrent connections from a single client machine? The answer is NO.&lt;/p&gt;&lt;figure name=&quot;d99a&quot; id=&quot;d99a&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 436px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 62.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*SURvNQCUrxJ0KMyhii6uGQ.png&quot; data-width=&quot;1550&quot; data-height=&quot;966&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*SURvNQCUrxJ0KMyhii6uGQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;3fbc&quot; id=&quot;3fbc&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In this scenario, a single client machine will be able to generate about 120k concurrent connections because both the processes are connecting to two different backend servers or proxies and hence different destination IPs.&lt;/p&gt;&lt;h4 name=&quot;cc97&quot; id=&quot;cc97&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Approach #2&lt;/h4&gt;&lt;p name=&quot;daa1&quot; id=&quot;daa1&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Another simple solution is to enable a Linux TCP option called &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;tcp_tw_reuse. &lt;/em&gt;&lt;/strong&gt;This option enables the Linux kernel to reclaim a connection slot from a connection in TIME_WAIT state and reallocate it to a new connection.&lt;/p&gt;&lt;pre name=&quot;430a&quot; id=&quot;430a&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;--&amp;gt; vim /etc/sysctl.conf&lt;/pre&gt;&lt;pre name=&quot;d9c7&quot; id=&quot;d9c7&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;--&amp;gt; &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;Add the following line in the end&lt;/strong&gt;&lt;br&gt;# Allow reuse of sockets in TIME_WAIT state for new connections&lt;br&gt;# only when it is safe from the network stack’s perspective.&lt;br&gt;net.ipv4.tcp_tw_reuse = 1&lt;/pre&gt;&lt;pre name=&quot;491e&quot; id=&quot;491e&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;--&amp;gt; &lt;strong class=&quot;markup--strong markup--pre-strong&quot;&gt;Reload sysctl settings&lt;br&gt;&lt;/strong&gt;sysctl -p&lt;/pre&gt;&lt;h4 name=&quot;dd82&quot; id=&quot;dd82&quot; class=&quot;graf graf--h4 graf-after--pre&quot;&gt;Approach #3&lt;/h4&gt;&lt;p name=&quot;2d46&quot; id=&quot;2d46&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Use more server ports. Till now we have talked about port exhaustion problems arising because in the quadruplet logic discussed before, the destination Ip, destination port and source Ip remain constant. The only thing that changes is the client ports.&lt;/p&gt;&lt;p name=&quot;3f86&quot; id=&quot;3f86&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;However, if the server listens on two different ports instead of one, then we have twice the number of ephemeral ports available instead of one. This clubbed with the first approach gives you about 120k concurrent connections on a single machine.&lt;/p&gt;&lt;p name=&quot;d739&quot; id=&quot;d739&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You have to however take care that running the server on two ports — which essentially means running two servers on the same machine — does not have a huge impact on the hardware.&lt;/p&gt;&lt;h4 name=&quot;0e97&quot; id=&quot;0e97&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Approach #4&lt;/h4&gt;&lt;p name=&quot;59d0&quot; id=&quot;59d0&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;In a real production scenario, you may have millions of concurrent users simultaneously hitting the system. But in a load testing scenario, these users are to be artificially generated by a client running on a machine.&lt;/p&gt;&lt;p name=&quot;5f91&quot; id=&quot;5f91&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Here again the 65k port limit comes to bite on the client side. The only way to overcome this from the client’s perspective is to increase the number of client machines that are generating the load. As you will read the next part in this series you will find that we had to use about 14 different machines to generate the kind of load we wanted to test HAProxy.&lt;/p&gt;&lt;h3 name=&quot;6722&quot; id=&quot;6722&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Putting it all together&lt;/h3&gt;&lt;p name=&quot;0e45&quot; id=&quot;0e45&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;There isn’t one single configuration that will solve all your woes and work like a charm. It is always the combination of multiple things that work out in the end.&lt;/p&gt;&lt;p name=&quot;a687&quot; id=&quot;a687&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For us as a prerequisite to load testing HAProxy, we followed approach #1 and approach #2 and eventually approach #3 to generate a huge…huge load of &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;2 million concurrent connections&lt;/strong&gt; on a single HAProxy machine.&lt;/p&gt;&lt;p name=&quot;7584&quot; id=&quot;7584&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.freecodecamp.com/how-we-fine-tuned-haproxy-to-achieve-2-000-000-concurrent-ssl-connections-d017e61a4d27&quot; data-href=&quot;https://medium.freecodecamp.com/how-we-fine-tuned-haproxy-to-achieve-2-000-000-concurrent-ssl-connections-d017e61a4d27&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Here’s the final part of this series&lt;/a&gt;, where I’ll put together all the components that went into generating this kind of load, the tunings we did and the learnings that came out of it.&lt;/p&gt;&lt;p name=&quot;3958&quot; id=&quot;3958&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Do let me know how this blog post helped you and stay tuned for the final part in this series of posts. Also, please recommend (❤) this post if you think this may be useful for someone.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Load Testing HAProxy (Part 1)</title>
   <link href="http://localhost:4000/2017/03/19/Load-Testing-HAProxy-Part-1-f7d64500b75d/"/>
   <updated>2017-03-19T00:00:00-07:00</updated>
   <id>http://localhost:4000/2017/03/19/Load-Testing-HAProxy--Part-1--f7d64500b75d</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Load Testing HAProxy (Part 1)&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Load Testing HAProxy (Part 1)&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
This is the first post in a 3 part series on load testing HAProxy, which is a reliable, high performant TCP/HTTP load balancer.
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;32f4&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;f5c9&quot; id=&quot;f5c9&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;d9b7&quot; id=&quot;d9b7&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 66.7%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*cj6DXYTZl0q9RDR-3mil7g.jpeg&quot; data-width=&quot;1125&quot; data-height=&quot;750&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*cj6DXYTZl0q9RDR-3mil7g.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;33bc&quot; id=&quot;33bc&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This is the first post in a 3 part series on load testing HAProxy, which is a reliable, high performant TCP/HTTP load balancer.&lt;/p&gt;&lt;p name=&quot;abe4&quot; id=&quot;abe4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Load Testing? HAProxy? If all this seems greek to you, don’t worry. I will provide inline links to read up on everything I’m talking about in this blog post.&lt;/p&gt;&lt;p name=&quot;c2aa&quot; id=&quot;c2aa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For reference, our current stack is:&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;71cf&quot; id=&quot;71cf&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Instances hosted on &lt;a href=&quot;https://aws.amazon.com/ec2/&quot; data-href=&quot;https://aws.amazon.com/ec2/&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Amazon EC2&lt;/a&gt; (not that this one should matter)&lt;/li&gt;&lt;li name=&quot;7cfe&quot; id=&quot;7cfe&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Ubuntu 14.04 (Trusty) for the OS&lt;/li&gt;&lt;li name=&quot;a566&quot; id=&quot;a566&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;a href=&quot;http://supervisord.org/&quot; data-href=&quot;http://supervisord.org/&quot; class=&quot;markup--anchor markup--li-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Supervisor&lt;/a&gt; for process management&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;a8ed&quot; id=&quot;a8ed&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;On production, we have around 30-odd &lt;a href=&quot;https://serversforhackers.com/load-balancing-with-haproxy&quot; data-href=&quot;https://serversforhackers.com/load-balancing-with-haproxy&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;HAProxy&lt;/a&gt; load balancers that help us route our traffic to the backend servers which are in an autoscaling mode and hence don’t have a fixed number. Number of backend servers ranges from 12–32 throughout the day.&lt;/p&gt;&lt;p name=&quot;5f2b&quot; id=&quot;5f2b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts&quot; data-href=&quot;https://www.digitalocean.com/community/tutorials/an-introduction-to-haproxy-and-load-balancing-concepts&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;This article&lt;/a&gt; should help you get up-to-speed on the basics of load balancing and how it works with HAProxy. It will also explain what routing algorithms are available.&lt;/p&gt;&lt;p name=&quot;2b7b&quot; id=&quot;2b7b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Coming back to our topic at hand, which is load testing HAProxy.&lt;/p&gt;&lt;p name=&quot;00b5&quot; id=&quot;00b5&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Never before did we put any dedicated effort in finding out the limits of our HAProxy setup in handling HTTP and HTTPs requests. Currently, on production, we have 4 core, 30 Gig instances of HAProxy machines.&lt;/p&gt;&lt;div name=&quot;d45f&quot; id=&quot;d45f&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2016/11/introducing-amazon-ec2-r4-instances-the-next-generation-of-memory-optimized-instances/&quot; data-href=&quot;https://aws.amazon.com/about-aws/whats-new/2016/11/introducing-amazon-ec2-r4-instances-the-next-generation-of-memory-optimized-instances/&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;https://aws.amazon.com/about-aws/whats-new/2016/11/introducing-amazon-ec2-r4-instances-the-next-generation-of-memory-optimized-instances/&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;Introducing Amazon EC2 R4 Instances, the next generation of memory-optimized instances&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;You can now launch R4 instances, the next generation of Amazon EC2 Memory Optimized instances, featuring a larger…&lt;/em&gt;aws.amazon.com&lt;/a&gt;&lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2016/11/introducing-amazon-ec2-r4-instances-the-next-generation-of-memory-optimized-instances/&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;3df49ed9af24d838369e3d1069271f44&quot; data-thumbnail-img-id=&quot;0*wwyTimwAps6HvAiJ.&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*wwyTimwAps6HvAiJ.);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;1f7b&quot; id=&quot;1f7b&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;As I am writing this post, we’re in the process of moving our entire traffic (HTTP) to HTTPs (that is, encrypted traffic). But before moving further, we needed some definitive answers to the following questions:&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;3589&quot; id=&quot;3589&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;What is the impact as we shift our traffic from Non-SSL to SSL?&lt;/strong&gt; CPU should definitely take a hit because SSL handshake is not a normal 3 way handshake, it is rather a 5 way handshake and after the handshake is complete, further communication is encrypted using the secret key generated during the handshake and this is bound to take up CPU.&lt;/li&gt;&lt;li name=&quot;0455&quot; id=&quot;0455&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;What are some other hardware/software limits that might be reached on production as a result of SSL termination at the HAProxy level&lt;/strong&gt;. We could also go for the SSL PassThrough option provided by HAProxy which terminates/decrypts the SSL connection at the backend servers. However, SSL termination at the HAProxy level is more performant and so this is what we intend to test.&lt;/li&gt;&lt;li name=&quot;9718&quot; id=&quot;9718&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;What is the best hardware required on production to support the kind of load that we see today&lt;/strong&gt;. Will the existing hardware scale or do we need bigger machines? This was also one of the prime questions we wanted an answer to via this test.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;872c&quot; id=&quot;872c&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;For this purpose we put in a dedicated effort for load testing HAProxy version 1.6 to find out answers to the above questions. I won’t be outlining the approach we took nor will I be outlining the results of this exercise in this blog post.&lt;/p&gt;&lt;p name=&quot;4c8e&quot; id=&quot;4c8e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Rather, I will be discussing an important aspect of any load testing exercise that most of us tend to ignore.&lt;/p&gt;&lt;h3 name=&quot;65af&quot; id=&quot;65af&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Ulimiter&lt;/h3&gt;&lt;p name=&quot;7595&quot; id=&quot;7595&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;If you have ever done any kind of load testing or hosted any server serving a lot of concurrent requests, you definitely would have run into the dreaded &lt;em class=&quot;markup--em markup--p-em&quot;&gt;“Too many open files”&lt;/em&gt; issue.&lt;/p&gt;&lt;figure name=&quot;ec91&quot; id=&quot;ec91&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 400px; max-height: 398px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 99.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*4npSurj6b2n__CsxxnaUQw.png&quot; data-width=&quot;400&quot; data-height=&quot;398&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*4npSurj6b2n__CsxxnaUQw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;c0b6&quot; id=&quot;c0b6&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;An important part of any stress testing exercise is the ability of your load testing client to establish a lot of concurrent connections to your backend server or to the proxy like HAProxy in between.&lt;/p&gt;&lt;p name=&quot;7408&quot; id=&quot;7408&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A lot of times we end up being bottleneck on the client not being able to generate the amount of load we expect it to generate. The reason for this is not because the client is not performing optimally, but something else entirely on the hardware level.&lt;/p&gt;&lt;p name=&quot;063f&quot; id=&quot;063f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Ulimit is used to restrict the number of user level resources. For all practical purposes pertaining to load testing environments, ulimit gives us the number of file descriptors that can be opened by a single process on the system. On most machines if you check the limit on file descriptors, it comes out to be this number = &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;1024.&lt;/strong&gt;&lt;/p&gt;&lt;figure name=&quot;f449&quot; id=&quot;f449&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 466px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 66.5%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*qE7hD6O7lsA1RtbXwspdow.png&quot; data-width=&quot;974&quot; data-height=&quot;648&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*qE7hD6O7lsA1RtbXwspdow.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Staging Ulimit Config&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;3184&quot; id=&quot;3184&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;As you can see, the number of open files is 1024 it on our staging setup. Opening a new TCP connection / socket also counts as an open file or a file descriptor and hence the limitation.&lt;/p&gt;&lt;p name=&quot;3261&quot; id=&quot;3261&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What this generally means is that a single client process can only open 1024 connections to the backend servers and no more. It means you need to increase this limit to a very high number on your load testing environment before proceeding further. Checkout the ulimit setting we have on our production machines.&lt;/p&gt;&lt;figure name=&quot;54d3&quot; id=&quot;54d3&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 522px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 74.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*6QbQnvAF0m7v5OA2ko0fNw.png&quot; data-width=&quot;866&quot; data-height=&quot;646&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*6QbQnvAF0m7v5OA2ko0fNw.png&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;Production Level Ulimit config&lt;/figcaption&gt;&lt;/figure&gt;&lt;p name=&quot;0954&quot; id=&quot;0954&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;This information is what you would generally find after 10 seconds of Googling, but keep in mind that &lt;em class=&quot;markup--em markup--p-em&quot;&gt;ulimit is not guaranteed to give you the limits your processes actually have!&lt;/em&gt; There’s a million things that can modify a limits of a process after (or before) you initialized your shell. So what you should do instead is fire up &lt;code class=&quot;markup--code markup--p-code&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&lt;a href=&quot;http://hisham.hm/htop/&quot; data-href=&quot;http://hisham.hm/htop/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;htop&lt;/a&gt;&lt;/code&gt;, &lt;code class=&quot;markup--code markup--p-code&quot;&gt;ps&lt;/code&gt;, or whatever you want to use to get the ID of the problematic process, and do a &lt;code class=&quot;markup--code markup--p-code&quot;&gt;cat /proc/{process_id}/limits&lt;/code&gt;:&lt;/p&gt;&lt;figure name=&quot;2f59&quot; id=&quot;2f59&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 445px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 63.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*oVCiJir-1oICfl7rxIGwfw.png&quot; data-width=&quot;1186&quot; data-height=&quot;754&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*oVCiJir-1oICfl7rxIGwfw.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;blockquote name=&quot;e0bd&quot; id=&quot;e0bd&quot; class=&quot;graf graf--blockquote graf-after--figure&quot;&gt;The max open files for this specific process is different than the system wide limits we have on this server.&lt;/blockquote&gt;&lt;p name=&quot;3751&quot; id=&quot;3751&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Let’s move on to the interesting part. Raising the limits :D&lt;/p&gt;&lt;h3 name=&quot;deb2&quot; id=&quot;deb2&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;The Stuff You Came Here to Read: Raising the Limit&lt;/h3&gt;&lt;p name=&quot;7656&quot; id=&quot;7656&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;There are two ways of changing the ulimit setting on a machine.&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;54ff&quot; id=&quot;54ff&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;ulimit -n &amp;lt;some_value&amp;gt;. &lt;/em&gt;&lt;/strong&gt;This will change the ulimit settings only for the current shell session. As soon as you open another shell session, you are back to square one i.e. 1024 file descriptors. So this is probably not what you want.&lt;/li&gt;&lt;li name=&quot;25d0&quot; id=&quot;25d0&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;fs.file-max = 500000&lt;/em&gt;&lt;/strong&gt;. Add this line to the end of the file &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;/etc/sysctl.conf. &lt;/em&gt;&lt;/strong&gt;And add the following&lt;br&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;* soft nofile &lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;500000&lt;/em&gt;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;&lt;br&gt;* hard nofile &lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;500000&lt;/em&gt;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;&lt;br&gt;root soft nofile &lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;500000&lt;/em&gt;&lt;/strong&gt;&lt;code class=&quot;markup--code markup--li-code&quot;&gt;&lt;br&gt;root hard nofile &lt;/code&gt;&lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;500000&lt;br&gt;&lt;/em&gt;&lt;/strong&gt;to the file &lt;strong class=&quot;markup--strong markup--li-strong&quot;&gt;&lt;em class=&quot;markup--em markup--li-em&quot;&gt;/etc/security/limits.conf.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;f517&quot; id=&quot;f517&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;The * basically represents that we are setting these values for all the users except root. “soft or hard” basically represent soft or hard limits. The next entry specifies the item for which we want to change the limit values i.e. nofile in this case which means the number of open files . And finally we have the value we wanna set which in this case is 500000. The * here does not apply to a root user, hence the last two lines specially for the root user.&lt;/p&gt;&lt;p name=&quot;8ced&quot; id=&quot;8ced&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;After doing this, you need to take a reboot of the system. Sadly yes :( And the changes should reflect in the ulimit -n command.&lt;/p&gt;&lt;figure name=&quot;173e&quot; id=&quot;173e&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 79px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 11.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*kUNMdQiWHLOilGmSNXOVZA.png&quot; data-width=&quot;760&quot; data-height=&quot;86&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*kUNMdQiWHLOilGmSNXOVZA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;e5bf&quot; id=&quot;e5bf&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Hurray !. Pat yourself on the back. You successfully changed the ulimit settings for the system. However, it is not necessary that changing this will affect all the user processes running on the system. It is quite possible that even after changing the system wide ulimit, you might find that &lt;em class=&quot;markup--em markup--p-em&quot;&gt;/etc/&amp;lt;pid&amp;gt;/limits&lt;/em&gt; give you a smaller number than what you might expect to find.&lt;/p&gt;&lt;figure name=&quot;fa5b&quot; id=&quot;fa5b&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 400px; max-height: 400px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 100%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*7ZiJ5StrDzfIohN9QZeOqQ.png&quot; data-width=&quot;400&quot; data-height=&quot;400&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*7ZiJ5StrDzfIohN9QZeOqQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;eafa&quot; id=&quot;eafa&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;In this case, you almost certainly have a process manager, or something similar that is messing up your limits. You need to keep in mind that processes inherit the limits of their parent processes. So if you have something like a Supervisor managing your processes, they will inherit the settings of the Supervisor daemon and this overrides any changes you make to the system level limits.&lt;/p&gt;&lt;p name=&quot;4886&quot; id=&quot;4886&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;http://supervisord.org/configuration.html#supervisord-section-values&quot; data-href=&quot;http://supervisord.org/configuration.html#supervisord-section-values&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Supervisor has a config variable&lt;/a&gt; that sets the file descriptor limit of its main process. Apparently, this setting is in turn inherited by any and all processes it launches. To override the default setting, you can add the following line to &lt;code class=&quot;markup--code markup--p-code&quot;&gt;/etc/supervisor/supervisord.conf&lt;/code&gt;, in the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;[supervisord]&lt;/code&gt;section:&lt;/p&gt;&lt;pre name=&quot;4fcf&quot; id=&quot;4fcf&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;&lt;code class=&quot;markup--code markup--pre-code&quot;&gt;minfds=500000&lt;/code&gt;&lt;/pre&gt;&lt;p name=&quot;9aca&quot; id=&quot;9aca&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Updating this will lead to all the child processes being controlled by supervisor inheriting this updated limit. You just need to restart the supervisor daemon to bring this change into effect.&lt;/p&gt;&lt;p name=&quot;443b&quot; id=&quot;443b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Remember to do this on any machine that intends to have a lot of concurrent connections open. Be it the client in a load testing scenario or a server trying to serve a lot of concurrent requests.&lt;/p&gt;&lt;p name=&quot;5997&quot; id=&quot;5997&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;a href=&quot;https://medium.com/p/4c8677780df6&quot; data-href=&quot;https://medium.com/p/4c8677780df6&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;In Part 2&lt;/a&gt;, we’ll learn how to deal with the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Sysctl port range monster&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;p name=&quot;0e8b&quot; id=&quot;0e8b&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Do let me know how this blog post helped you. Also, please recommend (❤) this post if you think this may be useful for someone.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>The Graduate Record Examination (GRE)</title>
   <link href="http://localhost:4000/2017/02/10/Are-you-Bored-ce374915696/"/>
   <updated>2017-02-10T00:00:00-08:00</updated>
   <id>http://localhost:4000/2017/02/10/Are-you-Bored---ce374915696</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Are you Bored ?&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Are you Bored ?&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
In case you are extremely bored, I have something for you.
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;b739&quot; class=&quot;section section--body section--first&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;bf72&quot; id=&quot;bf72&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;p name=&quot;83b9&quot; id=&quot;83b9&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In case you are extremely bored, I have something for you.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;2560&quot; id=&quot;2560&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 48.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*1RtBcTWKyiTB8MIHr1bwKw.jpeg&quot; data-width=&quot;1100&quot; data-height=&quot;535&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*1RtBcTWKyiTB8MIHr1bwKw.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;A Cheeseburger&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;c45c&quot; id=&quot;c45c&quot; class=&quot;graf graf--p graf-after--figure graf--trailing&quot;&gt;A delicious cheeseburger for my extremely bored audience. Just kidding. I just wanted to get your attention. This is going to be a fairly long post about how one should go about preparing for the Graduate Record Examination ;)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;eece&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;2f52&quot; id=&quot;2f52&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;The GRE&lt;/h3&gt;&lt;p name=&quot;13b6&quot; id=&quot;13b6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;This post is for someone preparing for the GRE test in the coming future and wants a prolonged set of explanations about resources and do’s and don’ts about the examination. I’ll be mentioning all the resources and materials that I had used to prepare for my exam. Just to provide myself some credibility, here are my exam scores.&lt;/p&gt;&lt;blockquote name=&quot;5f89&quot; id=&quot;5f89&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;Quant = 164, Verbal = 155, AWA = 5.0 [GRE]&lt;/blockquote&gt;&lt;blockquote name=&quot;7902&quot; id=&quot;7902&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot;&gt;Reading = 30, Listening = 29, Speaking = 28 and Writing = 30 [TOEFL]&lt;/blockquote&gt;&lt;p name=&quot;002f&quot; id=&quot;002f&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;I spent about 6–8 months to get through these exams. I procrastinated a lot but I did put in a dedicated effort for the last couple of months and I dedicate my score to that effort itself. I did a lot of research on the materials I should use for my preparation and I’ll be providing an extensive list of materials here in this blog post.&lt;/p&gt;&lt;h3 name=&quot;f278&quot; id=&quot;f278&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Getting to know the GRE&lt;/h3&gt;&lt;p name=&quot;3e8b&quot; id=&quot;3e8b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;A score of 320+ is considered to be a great score if you are someone like me who has absolutely &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;0 research experience. &lt;/strong&gt;It is not really a difficult task to get this score. If you know about the pattern of the exam, you know that students are mostly frightened by the long list of vocabulary words that they have to cram and retain. But fear not, you don’t need to do that to get a great score. Let me first break down the exam into various components for you.&lt;/p&gt;&lt;p name=&quot;b742&quot; id=&quot;b742&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The exam has a total of 4 sections apart and 2 essay writing sections. 2 Quant, 2 verbal sections and 2 essays. The essays are Issue Essay and the Argument Essay.&lt;/p&gt;&lt;p name=&quot;0d35&quot; id=&quot;0d35&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Issue Essay (30 minutes), Argument Essay(30 minutes), 2 * Quant (25 questions in 35 minutes), 2 * Verbal (20 questions in 30 minutes) amounts to about 3 hours and 10 minutes. There is a 15 minutes break after your AWA and 2 other sections. AWA is the first section on the GRE and you cannot skip forward before attempting this section.&lt;/p&gt;&lt;p name=&quot;addc&quot; id=&quot;addc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Just when you think that after a strenuous 3 hours of sitting, you’ll sail off into the sunset with a great score, the ETS guys tell you to&lt;/p&gt;&lt;figure name=&quot;15f1&quot; id=&quot;15f1&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 630px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 90%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*aaiZIbm7foPFbckanBzAag.png&quot; data-width=&quot;1000&quot; data-height=&quot;900&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*aaiZIbm7foPFbckanBzAag.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;4ead&quot; id=&quot;4ead&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;ETS also has a research section waiting for you somewhere in the exam. It can be either verbal or quant and the BEST (worst ;P) part is that you don’t know which section on the test is the research section. So as a student, you have to give your level best in every section. That makes the GRE a 4 hour beast of an exam that requires a lot of focus and will to get through.&lt;/p&gt;&lt;p name=&quot;697f&quot; id=&quot;697f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The test is adaptive , the next question will be supposedly tougher or easier based on how you attempted the previous questions.&lt;/p&gt;&lt;h3 name=&quot;d6cc&quot; id=&quot;d6cc&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Verbal Question Types&lt;/h3&gt;&lt;p name=&quot;46a1&quot; id=&quot;46a1&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The verbal section consists of various question types. These are&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;926b&quot; id=&quot;926b&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Sentence Equivalence&lt;/li&gt;&lt;li name=&quot;39cb&quot; id=&quot;39cb&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Text Completion&lt;/li&gt;&lt;li name=&quot;cdbe&quot; id=&quot;cdbe&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Reading Comprehension and&lt;/li&gt;&lt;li name=&quot;6c23&quot; id=&quot;6c23&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Paragraph Argument.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;b85e&quot; id=&quot;b85e&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;I won’t be providing the details for each of these questions in this blog post. Such details can easily be found on &lt;a href=&quot;https://www.ets.org/gre/revised_general/about/content/&quot; data-href=&quot;https://www.ets.org/gre/revised_general/about/content/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ETS’s website&lt;/a&gt;. The Text completion is further of three types.&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;f871&quot; id=&quot;f871&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Single Blank&lt;/li&gt;&lt;li name=&quot;9b8a&quot; id=&quot;9b8a&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Double Blank and&lt;/li&gt;&lt;li name=&quot;bcb1&quot; id=&quot;bcb1&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Triple Blank text completion.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;e875&quot; id=&quot;e875&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;For me, the Reading Comprehension is the toughest part of the verbal section. Out of the 40 questions you will get in the 2 verbal sections (excluding the research section here), approximately 16 questions are RCs. These need a lot of practice and patience to get through. Especially because of the convoluted text structure often found in the paragraphs.&lt;/p&gt;&lt;h3 name=&quot;fa23&quot; id=&quot;fa23&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Quant Question Types&lt;/h3&gt;&lt;p name=&quot;b4ca&quot; id=&quot;b4ca&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The Quant section on the GRE is comprised of 4 major sections&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;792b&quot; id=&quot;792b&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Algebra&lt;/li&gt;&lt;li name=&quot;0f4b&quot; id=&quot;0f4b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Geometry&lt;/li&gt;&lt;li name=&quot;9ca7&quot; id=&quot;9ca7&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Arithmetic&lt;/li&gt;&lt;li name=&quot;f5a3&quot; id=&quot;f5a3&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Data Analysis.&lt;/li&gt;&lt;/ul&gt;&lt;p name=&quot;6145&quot; id=&quot;6145&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;As a part of these 4 sections, there is a lot of content to be covered. Again, the quant syllabus can be easily found on the ETS website or in the ETS official GRE book. The quant section is comprised of questions which any engineer would have encountered in their 10th class or during their Bachelors. This section is supposedly easier or rather way too easy as opposed to its counterpart, but being overconfident can be surely detrimental to your score. Getting a complete 170 in the Quant section requires a lot of practice and focus .In case you manage to get a perfect quant score, even a smaller verbal score something like 155 would mean a total of 325, which is awesome.&lt;/p&gt;&lt;h3 name=&quot;324e&quot; id=&quot;324e&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Resources&lt;/h3&gt;&lt;p name=&quot;5c14&quot; id=&quot;5c14&quot; class=&quot;graf graf--p graf-after--h3 graf--trailing&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;The primary resource&lt;/strong&gt; I would pick up any day of the week for Verbal prep is &lt;a href=&quot;http://www.amazon.in/Word-Power-Made-Norman-Lewis/dp/8183071007?tag=googinhydr18418-21&amp;amp;tag=googinkenshoo-21&amp;amp;ascsubtag=43b85d9f-fcbb-4d2f-8c7c-15ee667692bb&quot; data-href=&quot;http://www.amazon.in/Word-Power-Made-Norman-Lewis/dp/8183071007?tag=googinhydr18418-21&amp;amp;tag=googinkenshoo-21&amp;amp;ascsubtag=43b85d9f-fcbb-4d2f-8c7c-15ee667692bb&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Word Power Made Easy by Normal Lewis.&lt;/a&gt; The book does not contain a lot of GRE words, however, it does strive to make you fall in love with &lt;a href=&quot;https://www.google.co.in/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=etymology&quot; data-href=&quot;https://www.google.co.in/webhp?sourceid=chrome-instant&amp;amp;ion=1&amp;amp;espv=2&amp;amp;ie=UTF-8#q=etymology&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;etymology&lt;/a&gt; and vocabulary in particular. After completing the book you will know how to identify words by their roots. This should be done if you have &amp;gt; 2 months in hand for your preparation. If not, you can skip this.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;cefa&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;eab4&quot; id=&quot;eab4&quot; class=&quot;graf graf--p graf--leading graf--trailing&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Next resource&lt;/strong&gt; I would recommend is the &lt;a href=&quot;https://www.flipkart.com/gre-official-guide-revised-general-test/p/itme9tex8ch4m6au?gclid=CP3Z0rOwhNICFcGOaAodoigJKw&amp;amp;pid=9780071791236&amp;amp;cmpid=content_book_8965229628_gmc_pla&amp;amp;tgi=sem%2C1%2CG%2C11214002%2Cg%2Csearch%2C%2C170219493259%2C1o2%2C%2C%2Cc%2C%2C%2C%2C%2C%2C%2C&amp;amp;s_kwcid=AL%21739%213%21170219493259%21%21%21g%2151320962143%21&amp;amp;ef_id=WJ0XaQAAAB84RA1Y%3A20170210012913%3As&quot; data-href=&quot;https://www.flipkart.com/gre-official-guide-revised-general-test/p/itme9tex8ch4m6au?gclid=CP3Z0rOwhNICFcGOaAodoigJKw&amp;amp;pid=9780071791236&amp;amp;cmpid=content_book_8965229628_gmc_pla&amp;amp;tgi=sem%2C1%2CG%2C11214002%2Cg%2Csearch%2C%2C170219493259%2C1o2%2C%2C%2Cc%2C%2C%2C%2C%2C%2C%2C&amp;amp;s_kwcid=AL%21739%213%21170219493259%21%21%21g%2151320962143%21&amp;amp;ef_id=WJ0XaQAAAB84RA1Y%3A20170210012913%3As&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ETS Official GRE Book&lt;/a&gt;. ETS guys are the test makers themselves and this book contains questions and practice tests filled with official GRE content. There are 4 practice tests to be done here. 2 paper based and 2 software based. The software based tests model the actual exam perfectly and one should strive to give one of these a couple of days before the exam to get a rough estimate of the score you will get on the actual test day.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;40ca&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;d15c&quot; id=&quot;d15c&quot; class=&quot;graf graf--p graf--leading&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Third up on my list&lt;/strong&gt; is &lt;a href=&quot;https://gre.magoosh.com/plans&quot; data-href=&quot;https://gre.magoosh.com/plans&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Magoosh GRE Prep&lt;/a&gt;. This is a PAID service mind you but I guess these guys nail the preparation perfectly. About a year back, I had joined &lt;a href=&quot;http://www.jamboreeindia.com&quot; data-href=&quot;http://www.jamboreeindia.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Jambooree&lt;/a&gt; classes for GRE prep and they took about 25k INR for a couple of months of prep. The Magoosh guys charged around 7–8k INR for a period of 6 months and their questions and content are way better than the Jambooree ones. I guess anyone looking to join classes over the weekend or something for GRE prep should rather take up the online offering by Magoosh. You won’t repent this decision.&lt;/p&gt;&lt;p name=&quot;c141&quot; id=&quot;c141&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;They have around 1000 questions for practice. Around 100–150 videos for covering the concepts of both Verbal and Quant. Plus, for every practice question you get a video explanation.&lt;/p&gt;&lt;figure name=&quot;a315&quot; id=&quot;a315&quot; class=&quot;graf graf--figure graf-after--p graf--trailing&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 500px; max-height: 359px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 71.8%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*u3Pu0AF2PZutRjr1ESMkWA.jpeg&quot; data-width=&quot;500&quot; data-height=&quot;359&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*u3Pu0AF2PZutRjr1ESMkWA.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;6e46&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;c1ba&quot; id=&quot;c1ba&quot; class=&quot;graf graf--p graf--leading graf--trailing&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Fourth up on my list&lt;/strong&gt; are two other practice books offered up by the ETS guys. The official guide has 4 practice tests, but lacks in practice questions topic wise. So as an additional offering, they have &lt;a href=&quot;http://www.amazon.in/Official-Verbal-Reasoning-Practice-Questions/dp/9339217969?tag=googinhydr18418-21&amp;amp;tag=googinkenshoo-21&amp;amp;ascsubtag=43b85d9f-fcbb-4d2f-8c7c-15ee667692bb&quot; data-href=&quot;http://www.amazon.in/Official-Verbal-Reasoning-Practice-Questions/dp/9339217969?tag=googinhydr18418-21&amp;amp;tag=googinkenshoo-21&amp;amp;ascsubtag=43b85d9f-fcbb-4d2f-8c7c-15ee667692bb&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ETS Verbal Reasoning Practice questions&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.in/Official-Quantitative-Reasoning-Practice-Questions/dp/9339217977/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1486690728&amp;amp;sr=1-1&amp;amp;keywords=ets+quantitative+reasoning+practice&quot; data-href=&quot;http://www.amazon.in/Official-Quantitative-Reasoning-Practice-Questions/dp/9339217977/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1486690728&amp;amp;sr=1-1&amp;amp;keywords=ets+quantitative+reasoning+practice&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ETS Quant Practice questions&lt;/a&gt;. Both these books contain 150 questions each for practice and these are official GRE questions from the test-makers themselves.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;628a&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;b056&quot; id=&quot;b056&quot; class=&quot;graf graf--p graf--leading graf--trailing&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;When preparing for the GRE&lt;/strong&gt;, it is really important to give a lot of mock tests before actually going for the exam. That’s because you will get to know if you have that kind of sitting and also your weaknesses in a time constrained environment. There is an awesome list of 33 free mock tests available on &lt;a href=&quot;https://crunchprep.com/gre/2014/free-gre-practice-tests&quot; data-href=&quot;https://crunchprep.com/gre/2014/free-gre-practice-tests&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Crunchprep&lt;/a&gt; which you should definitely take up (Not all, but at-least 5–6 of them are a must).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;c8da&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;1dbf&quot; id=&quot;1dbf&quot; class=&quot;graf graf--p graf--leading&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;The Magoosh blog&lt;/strong&gt; is an ocean of free content on the GRE. It contains a lot of articles on vocabulary, difficult and confusing words, strategies and what not. You will more likely than not find an article on their blog that solves your doubts. Also, you can post your comments on the blog itself and the Magoosh team responds fairly quickly.&lt;/p&gt;&lt;h3 name=&quot;5bb9&quot; id=&quot;5bb9&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Reading and Vocabulary&lt;/h3&gt;&lt;p name=&quot;aa1a&quot; id=&quot;aa1a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;One of the two most dreaded parts of the GRE exam is the vocabulary section. The exam does not directly ask the meaning of difficult words. This is not something they like to test. So cramming up huge word lists will do you no good. There are a number of word lists available online like Barron’s and Kaplan’s Flashcards, however, cramming them up is equivalent to not doing anything at all.&lt;/p&gt;&lt;p name=&quot;161f&quot; id=&quot;161f&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;What the GRE is interested in testing is your ability to comprehend the meaning of the content in-front of you and then answer the question. They test your ability to understand the meaning of the given sentence or paragraph. Sure, knowing the definition of the words really helps, but that’s just the tip of the iceberg. You need to understand the usage of the word in various contexts as well.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;d21f&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;fd70&quot; id=&quot;fd70&quot; class=&quot;graf graf--p graf--leading&quot;&gt;&lt;a href=&quot;https://gre.magoosh.com/flashcards/vocabulary/decks&quot; data-href=&quot;https://gre.magoosh.com/flashcards/vocabulary/decks&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Magoosh Flashcards&lt;/a&gt; have provided a great vocabulary flashcards application that lets you learn the words along with a sentence effectively. They have divided up the words into three decks namely Common,Basic and Advanced.&lt;/p&gt;&lt;blockquote name=&quot;b31a&quot; id=&quot;b31a&quot; class=&quot;graf graf--blockquote graf-after--p graf--trailing&quot;&gt;For the GRE, you can skip the Advanced deck but thoroughly go through the Common and the Basic ones.&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;7ea8&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;1d0d&quot; id=&quot;1d0d&quot; class=&quot;graf graf--p graf--leading graf--trailing&quot;&gt;&lt;a href=&quot;http://wordnik.com&quot; data-href=&quot;http://wordnik.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Wordnik&lt;/strong&gt;&lt;/a&gt; is great website which provides sentences for the searched words and the best part is that wordnik pulls off the sentences from world class magazines like The New York Times, The Atlantic etc. For all the words which you don’t understand, please check out the sentences on wordnick for greater clarity on the context usage for the word.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;d67f&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;c696&quot; id=&quot;c696&quot; class=&quot;graf graf--p graf--leading graf--trailing&quot;&gt;&lt;a href=&quot;https://www.vocabulary.com/&quot; data-href=&quot;https://www.vocabulary.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Vocabulary.com&lt;/strong&gt;&lt;/a&gt; is another great resource out there for learning vocabulary words. A lot of times the meaning provided by the Magoosh flashcards are not enough. So for getting a better understanding of the meaning of a word, you can check out this website. It has an excellent UI and provides insane definitions and examples for a lot of words.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;f2a0&quot; class=&quot;section section--body&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;04ac&quot; id=&quot;04ac&quot; class=&quot;graf graf--p graf--leading graf--trailing&quot;&gt;&lt;a href=&quot;http://quizlet.com&quot; data-href=&quot;http://quizlet.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Quizlet&lt;/strong&gt;&lt;/a&gt; is like a gold mine for leaning stuff like definitions etc. Quizlet lets you create flashcards on the go where you provide the word, the definition, an image if it helps you remember the definition etc. The fun part is that it lets you create your own study sets comprising of flashcards and then provides various games and quiz on top of it. That is a great way of learning stuff like vocabulary. You can jot down difficult to remember words in different sets and then practice them over and over until you master them.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;8ff6&quot; class=&quot;section section--body section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;3bd1&quot; id=&quot;3bd1&quot; class=&quot;graf graf--p graf--leading&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Apart from learning vocabulary words effectively, you also need to do a lot of reading&lt;/strong&gt; to nail reading comprehension. RC is a tough beast to conquer and the only way to do this is by reading a lot of good prose. I’m not talking about fiction novels like Harry Potter etc. I’m talking about difficult prose that you would otherwise never read during your leisure time. Something like art, culture, governments, novel reviews, poetry reviews. An amazing website that provides content like this is &lt;a href=&quot;https://www.aldaily.com/&quot; data-href=&quot;https://www.aldaily.com/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;aldaily&lt;/a&gt;.&lt;/p&gt;&lt;h3 name=&quot;d6af&quot; id=&quot;d6af&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Analytical Writing Assessment&lt;/h3&gt;&lt;p name=&quot;8434&quot; id=&quot;8434&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The AWA, as mentioned before consists of two tasks. One is the Issue essay and the other one is the Argument essay.&lt;/p&gt;&lt;h4 name=&quot;992d&quot; id=&quot;992d&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Issue Essay&lt;/h4&gt;&lt;p name=&quot;4985&quot; id=&quot;4985&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;The issue essay consists of various topics that fall into various buckets like art, culture, education, government etc. There is a certain topic and mostly you have to analyse the issue at hand and pick a side i.e. for or against and then write the essay. This is a list of steps generally followed for writing the issue essay.&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;eabc&quot; id=&quot;eabc&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Brainstorm.&lt;/li&gt;&lt;li name=&quot;4bec&quot; id=&quot;4bec&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Pick a side by writing down points (bullet shorthand points on rough sheet) for each side.&lt;/li&gt;&lt;li name=&quot;1557&quot; id=&quot;1557&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;You need 3 body paragraphs, 1 introduction and 1 conclusion. 2 paragraphs are usually for addressing the side you choose and 1 is for addressing the opposite side. So choose your sides accordingly.&lt;/li&gt;&lt;li name=&quot;2630&quot; id=&quot;2630&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Start with the introduction (if you can come up with one without waisting much time.)&lt;/li&gt;&lt;li name=&quot;7289&quot; id=&quot;7289&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Write the 3 body paragraphs.&lt;/li&gt;&lt;li name=&quot;3b04&quot; id=&quot;3b04&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Finally, the conclusion.&lt;/li&gt;&lt;li name=&quot;72d2&quot; id=&quot;72d2&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Proofread the essay because there are no spellcheckers in the software to rectify spelling mistakes.&lt;/li&gt;&lt;/ol&gt;&lt;p name=&quot;3b33&quot; id=&quot;3b33&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;It is also best to follow some sort of a template for both the essays. &lt;a href=&quot;https://crunchprep.com/gre-analytical-writing-guide&quot; data-href=&quot;https://crunchprep.com/gre-analytical-writing-guide&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Crunchprep&lt;/a&gt; provides an amazing blog covering each and every aspect of the AWA and they also provide templates for both the essays. Use the template and modify according to the topic at hand. Do not cram the template up and write it word for word. That will count as plagiarism as a lot of other students might also be doing the same.&lt;/p&gt;&lt;h4 name=&quot;237e&quot; id=&quot;237e&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Argument Essay&lt;/h4&gt;&lt;p name=&quot;8fe0&quot; id=&quot;8fe0&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;The argument essay is comparatively easier than the issue essay. Here, a certain argument paragraph is provided and the reader needs to find out the assumptions in the argument and write up an essay pointing out these assumptions that the author makes. There are many different types of assumptions usually encountered in an argument essay paragraph and the crunchprep blog covers everything up very well.&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;50ec&quot; id=&quot;50ec&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Brainstorm to find out the assumptions. Write down mini points on the rough sheet.&lt;/li&gt;&lt;li name=&quot;8cbd&quot; id=&quot;8cbd&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Begin with the introduction. Mention that the argument is flawed and thus the conclusion doesn’t hold true.&lt;/li&gt;&lt;li name=&quot;ae35&quot; id=&quot;ae35&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Write up 2–3 body paragraphs providing the various assumptions that weaken the argument.&lt;/li&gt;&lt;li name=&quot;ab4f&quot; id=&quot;ab4f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Remember to provide rectification for these missing pieces at the end of every body paragraph. Something like &lt;em class=&quot;markup--em markup--li-em&quot;&gt;“If additional survey had been done with a large sample of people, the argument would have been much more convincing”&lt;/em&gt;&lt;/li&gt;&lt;li name=&quot;fd24&quot; id=&quot;fd24&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Write up the conclusion and do not introduce any new point here. Just summarise what all you have written in the previous paragraphs.&lt;/li&gt;&lt;/ol&gt;&lt;h3 name=&quot;23dd&quot; id=&quot;23dd&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;Gmat AWA&lt;/h3&gt;&lt;p name=&quot;4409&quot; id=&quot;4409&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;There is no free service out there that matches the level of &lt;a href=&quot;http://gmatawa.com&quot; data-href=&quot;http://gmatawa.com&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;GMAT AWA&lt;/a&gt; for scoring your essays. You get 10 free essay evaluations on an email address and these evaluations are pretty accurate. So do remember to check out the scoring from this website for every essay you practice. You must practice 10 essays each for Issue and Argument before the actual exam.&lt;/p&gt;&lt;p name=&quot;66d8&quot; id=&quot;66d8&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;I guess the list of resources provided here is more than enough to get you a great score. In case you have any other query regarding the exam or any other content, feel free to reach out to me :). Would love to help you get through.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>How my mentor saved me from breaking 50 production servers</title>
   <link href="http://localhost:4000/2016/10/25/How-my-mentor-saved-me-from-breaking-50-production-servers-6ed0d99df92d/"/>
   <updated>2016-10-25T00:00:00-07:00</updated>
   <id>http://localhost:4000/2016/10/25/How-my-mentor-saved-me-from-breaking-50-production-servers-6ed0d99df92d</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;How my mentor saved me from breaking 50 production servers&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;How my mentor saved me from breaking 50 production servers&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
Hundreds of production servers being blasted with requests from millions of users on a per second basis. A slight delay in serving a…
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;4907&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;1a1f&quot; id=&quot;1a1f&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf--leading&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 67.10000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*WGDDXDYWMqgCYSoZorNmiA.jpeg&quot; data-width=&quot;2235&quot; data-height=&quot;1500&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*WGDDXDYWMqgCYSoZorNmiA.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;b1d6&quot; id=&quot;b1d6&quot; class=&quot;graf graf--h3 graf-after--figure graf--title&quot;&gt;&lt;/h3&gt;&lt;p name=&quot;ecd5&quot; id=&quot;ecd5&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Hundreds of production servers being blasted with requests from millions of users on a per second basis. A slight delay in serving a request may lead the customer to uninstall the application. A sluggish or an unresponsive service may cause things to go haywire. And you are responsible for making a small code change in such a system. What do you do ? How do you go about it ?&lt;/p&gt;&lt;p name=&quot;ffc2&quot; id=&quot;ffc2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;TLDR; &lt;/strong&gt;This article is my retrospective on a potential screw up on our production system due to a bad code I wrote.&lt;/p&gt;&lt;p name=&quot;c0b2&quot; id=&quot;c0b2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I work as a Backend Developer at a startup where we deal with features and bug fixes affecting millions of people on a daily basis. A small fracture in the code and it doesn’t take time before shit hits the fan.&lt;/p&gt;&lt;p name=&quot;2b85&quot; id=&quot;2b85&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We are a messaging based platform and large part of the messaging volume are Stickers. Something like this —&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--outsetColumn&quot;&gt;&lt;figure name=&quot;529e&quot; id=&quot;529e&quot; class=&quot;graf graf--figure graf--layoutOutsetCenter graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 1000px; max-height: 413px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 41.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*Z1VabAJZ9dguiXQjXyIiPQ.png&quot; data-width=&quot;1600&quot; data-height=&quot;661&quot; src=&quot;https://cdn-images-1.medium.com/max/1000/1*Z1VabAJZ9dguiXQjXyIiPQ.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;c240&quot; id=&quot;c240&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;We have a dedicated team for curating content for stickers and they recently came up with the idea of animated stickers. Customers got bored of the static stickers and putting some animation in them could prove useful for us.&lt;/p&gt;&lt;p name=&quot;2aee&quot; id=&quot;2aee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;From a technical standpoint on the server end, a small requirement came up. We needed to put in some hacks in place to maintain backward compatibility with older clients.&lt;/p&gt;&lt;blockquote name=&quot;4f88&quot; id=&quot;4f88&quot; class=&quot;graf graf--pullquote graf-after--p&quot;&gt;Whenever a new client i.e. a supported build for the animated stickers sends a packet to an older client i.e. the unsupported build, we should send a customised message to the older client telling them to upgrade to the newer build. We cannot directly send an animated sticker as the older client won’t understand it and the application might crash.&lt;/blockquote&gt;&lt;p name=&quot;4fdf&quot; id=&quot;4fdf&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Well this looks pretty simple right ? Just a couple of version checks on the server side and you’re good to go. However, the client one upped this by adding that the intercept message should be customised and should be different for every animated sticker&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;. &lt;/strong&gt;This was also not much of an effort. We just had to save the intercept messages in our existing sticker database (which is Mongo right now) and put a cache on top of it to prevent redundant calls to Mongo and we were good to go.&lt;/p&gt;&lt;p name=&quot;6e7c&quot; id=&quot;6e7c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The problem was with identification of an animated sticker whenever one came in our server flow. The simplest way would have been where the client tells us if it’s a static sticker or an animated sticker. But this was not always possible — we were told — because of some bug on an older version of the application.&lt;/p&gt;&lt;p name=&quot;d465&quot; id=&quot;d465&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Every sticker packet has a stickerId associated with it. It is a unique Id generated by the sticker team while storing sticker content in the database. An animated sticker packet (JSON packet) would look something like this&lt;/p&gt;&lt;pre name=&quot;b6f1&quot; id=&quot;b6f1&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;{&lt;br&gt;     &amp;quot;t&amp;quot;: &amp;quot;st&amp;quot;,&lt;/pre&gt;&lt;pre name=&quot;981a&quot; id=&quot;981a&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;     &amp;quot;md&amp;quot;: &lt;br&gt;         {&lt;/pre&gt;&lt;pre name=&quot;e59a&quot; id=&quot;e59a&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;              &amp;quot;is_anim&amp;quot;: 1&lt;/pre&gt;&lt;pre name=&quot;90d2&quot; id=&quot;90d2&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;         },&lt;/pre&gt;&lt;pre name=&quot;6e41&quot; id=&quot;6e41&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;     &amp;quot;stkId&amp;quot;: &amp;quot;loveydovey123&amp;quot;&lt;br&gt;}&lt;/pre&gt;&lt;p name=&quot;fccf&quot; id=&quot;fccf&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;is_anim&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;field may or may not be present always. So we needed another way of differentiating animated from a static sticker.&lt;/p&gt;&lt;p name=&quot;6b49&quot; id=&quot;6b49&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Without much deliberation I came up with a solution. We store the sticker data in MongoDb and we also keep a field in the document for each sticker indicating if it is an enhanced sticker.&lt;/p&gt;&lt;p name=&quot;8169&quot; id=&quot;8169&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I wrote the code in such a way that for every given sticker (for which &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;is_anim&lt;em class=&quot;markup--em markup--p-em&quot;&gt; &lt;/em&gt;&lt;/strong&gt;is missing), the code would hit an in memory cache — which would keep the intercept message (if any) as described before and would also tell us if the given sticker packet is an animated one for a period of 2 hours. In case of a cache miss the code will hit the persistent storage i.e. Mongo in this case and populate the in memory cache as well. Lets look at the pseudo code&lt;/p&gt;&lt;pre name=&quot;8105&quot; id=&quot;8105&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;public boolean isAnimatedSticker(String stickerId)&lt;br&gt;{     &lt;br&gt;     boolean isAnimated = CacheManager.get(stickerId);&lt;/pre&gt;&lt;pre name=&quot;dcc7&quot; id=&quot;dcc7&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;     if(isAnimated != null &amp;amp;&amp;amp; isAnimated == true) &lt;br&gt;        return true;&lt;br&gt; &lt;br&gt;     if(isAnimated == null)&lt;br&gt;        return populateCacheFromDbAndReturnData(stickerId);&lt;/pre&gt;&lt;pre name=&quot;c214&quot; id=&quot;c214&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;     return false;&lt;/pre&gt;&lt;pre name=&quot;0b67&quot; id=&quot;0b67&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;}&lt;/pre&gt;&lt;p name=&quot;0836&quot; id=&quot;0836&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Simple piece of code right ? Checks the cache to see if the sticker is enhanced, if nothing is found in the cache it hits the database and populates the cache and also returns the desired result. All this worked right off the bat and was tested thoroughly on our staging and dev environments.&lt;/p&gt;&lt;p name=&quot;7cd9&quot; id=&quot;7cd9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There was a lot of pressure from the product manager for animated stickers as their release was due in a couple of days (release of a new build in the market). So we were in a hurry to get the change set deployed on production.&lt;/p&gt;&lt;p name=&quot;9253&quot; id=&quot;9253&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;My mentor and some other seniors in the team were vey careful in taking any changes to production at that time owing to a major service outage already affecting us.&lt;/p&gt;&lt;p name=&quot;4cf2&quot; id=&quot;4cf2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;While reviewing the code, my mentor raised a crucial question I had failed to address. He asked me why, I was querying Mongo and how many times will I do it. I told him when and why I would be doing it. Then he asked me&lt;/p&gt;&lt;blockquote name=&quot;8fc1&quot; id=&quot;8fc1&quot; class=&quot;graf graf--pullquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--pullquote-strong&quot;&gt;“Will I hit Mongo for every unique sticker packet once on every production machine to check if it is animated ?”&lt;/strong&gt;&lt;/blockquote&gt;&lt;p name=&quot;3ddc&quot; id=&quot;3ddc&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;I said “&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Only for the ones for which is_anim field is missing. Basically for every static sticker and some animated stickers&lt;/em&gt;” ! He said this will &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;definitely&lt;/strong&gt; &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;break production&lt;/strong&gt;. I was like&lt;/p&gt;&lt;figure name=&quot;2e44&quot; id=&quot;2e44&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 512px; max-height: 351px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 68.60000000000001%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*kyWSPddrwLomm1FmVDdoQg.jpeg&quot; data-width=&quot;512&quot; data-height=&quot;351&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*kyWSPddrwLomm1FmVDdoQg.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;p name=&quot;03c3&quot; id=&quot;03c3&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;He didn’t say it that calmly though. He was pissed at me for coming up with a stupid design. We have about 50 production servers and every server will have its own in memory cache. Out of the 24,000 messages per second in peak time, we have about 8k messages for stickers. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Out of these 8000 messages, 3000 are unique stickers&lt;/strong&gt; — We have about 12,000 unique stickers on the app today and stickers is one of our most used and loved feature.&lt;/p&gt;&lt;p name=&quot;a862&quot; id=&quot;a862&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That means 3k Mongo calls per production server which when escalated to 5o servers would mean around 150k calls on Mongo in a very short span of time. This will definitely bring down the stickers Mongo server as it is not very well scaled right now. It is tuned to serve around 1–2k calls at max.&lt;/p&gt;&lt;p name=&quot;b420&quot; id=&quot;b420&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This scenario would have taken place at the time of deploying my code on production. Although we have a 4 minute gap between server restarts but the design still sucked and my manager wasn’t going to take any chances with it. This was alarming also because the change set was written in a manner where it would affect the main messaging flow.&lt;/p&gt;&lt;p name=&quot;10ec&quot; id=&quot;10ec&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;It should have been written in an asynchronous manner in the first place&lt;/strong&gt; where any outage in the animated stickers code would not affect other services in the infrastructure.&lt;/p&gt;&lt;p name=&quot;43ba&quot; id=&quot;43ba&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This was supposed to be a simple change to be done under the radar but I ended up being ridiculed for doing such a poor effort. What I learnt from this small (major ?) incident is that before diving into the task assigned and becoming coding ninjas right away, you should adhere to certain guidelines.&lt;/p&gt;&lt;h3 name=&quot;a7e7&quot; id=&quot;a7e7&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Think before you Code&lt;/h3&gt;&lt;p name=&quot;7610&quot; id=&quot;7610&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Never go off writing code based on the first solution that comes to your mind. Always write down a basic pseudo code first and then consider all possibilities where things could possibly go wrong and break the system. This should be done irrespective of how large or small the change set is. Even for a hot fix !&lt;/p&gt;&lt;figure name=&quot;4ccd&quot; id=&quot;4ccd&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 550px; max-height: 832px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 151.29999999999998%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*RNT-8qt-DXLJWDva8t7C3w.jpeg&quot; data-width=&quot;550&quot; data-height=&quot;832&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*RNT-8qt-DXLJWDva8t7C3w.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;h3 name=&quot;46f3&quot; id=&quot;46f3&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Some Key parameters to Ponder&lt;/h3&gt;&lt;p name=&quot;e865&quot; id=&quot;e865&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Code is anything but a few lines of the language syntax. Before finalising any solution for the problem at hand, do consider the following parameters&lt;/p&gt;&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;7a9e&quot; id=&quot;7a9e&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Code should be clean and easy to understand.&lt;/li&gt;&lt;li name=&quot;5d6f&quot; id=&quot;5d6f&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Should be Unit Testable.&lt;/li&gt;&lt;li name=&quot;1007&quot; id=&quot;1007&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;If your code is interacting with external services or databases, make sure to not overwhelm them. You should have some sort of caching or rate limiting in place.&lt;/li&gt;&lt;li name=&quot;5836&quot; id=&quot;5836&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Before writing any code from scratch, always try and find in the current system if something has already been implemented.&lt;/li&gt;&lt;/ul&gt;&lt;h3 name=&quot;19a8&quot; id=&quot;19a8&quot; class=&quot;graf graf--h3 graf-after--li&quot;&gt;Load Testing is a Must&lt;/h3&gt;&lt;p name=&quot;3a7a&quot; id=&quot;3a7a&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Most of the times functional testing is not enough. Like in this case, if some sort of load testing had been done, this problem would not have surfaced right before deployment. So there should always be certain automated test cases — or as most people call it a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Regression Suite — &lt;/strong&gt;ready to run on your change set along with some sort of fabricated load to verify if nothing breaks.&lt;/p&gt;&lt;h3 name=&quot;9ea7&quot; id=&quot;9ea7&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Say NO to Hacks&lt;/h3&gt;&lt;p name=&quot;8c6e&quot; id=&quot;8c6e&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The server guys get a lot of requests from the client to put in hacks just because of some buggy builds that went out. Sometimes it is easy to put in a hack but over a period of time things get messy. The code quickly changes from an elegantly structured piece of software to garbled shit no one can understand.&lt;/p&gt;&lt;p name=&quot;4552&quot; id=&quot;4552&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Start saying NO to the client guys. Only accommodate changes if they can be done in time, with proper functional and load testing and thorough code review.&lt;/p&gt;&lt;h3 name=&quot;8a24&quot; id=&quot;8a24&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Go the Async Way&lt;/h3&gt;&lt;p name=&quot;9382&quot; id=&quot;9382&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;I’m sure most of the audience here would be familiar with the concept of Micro services. A small component of code that can be built, tested and deployed independently of the main code. That is how stuff should be written in my opinion.&lt;/p&gt;&lt;p name=&quot;ba3c&quot; id=&quot;ba3c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You can’t go on modifying the main code flow because a small mistake on your part could cause a major outage. So try and write code that is asynchronous and thus works independently off the main flow.&lt;/p&gt;&lt;p name=&quot;bfbd&quot; id=&quot;bfbd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Ofcourse, don’t go on making every feature a microservice in itself.&lt;/p&gt;&lt;h3 name=&quot;98e3&quot; id=&quot;98e3&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;UPDATE&lt;/h3&gt;&lt;p name=&quot;6003&quot; id=&quot;6003&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;I did not mention the final solution which we came at after discussions because that in itself was another hack. There is another component of every sticker called the&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt; category Id&lt;/strong&gt;.&lt;/p&gt;&lt;p name=&quot;18cc&quot; id=&quot;18cc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We have different packs of stickers and each pack has a unique categoryId and in it every sticker in itself has a stickerId. We were told that only 3 packs of animated stickers will be released on production and so we decided on supporting just those three (in cases where client does not provide any info on sticker being animated in the JSON itself). So we hard coded those 3 category IDs , something like this&lt;/p&gt;&lt;pre name=&quot;abe1&quot; id=&quot;abe1&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;if(packet.getMetdata.contains(anim_field) || categoryId is one of list(a,b,c))&lt;br&gt;{ &lt;br&gt; &lt;br&gt;       isAnimated = True;&lt;/pre&gt;&lt;pre name=&quot;263b&quot; id=&quot;263b&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;} &lt;/pre&gt;&lt;p name=&quot;f101&quot; id=&quot;f101&quot; class=&quot;graf graf--p graf-after--pre graf--trailing&quot;&gt;This again is not an elegant solution but there isn’t one for such problems I guess. There has to be some sort of a common ground between client and the server.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Life Lessons</title>
   <link href="http://localhost:4000/2016/03/05/Life-Lessons-e2d986747feb/"/>
   <updated>2016-03-05T00:00:00-08:00</updated>
   <id>http://localhost:4000/2016/03/05/Life-Lessons----e2d986747feb</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;Life Lessons !!&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;Life Lessons !!&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
Life is a Race! If you don’t run fast, someone will crush you and overtake you.
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;99d6&quot; class=&quot;section section--body section--first&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h3 name=&quot;b4e7&quot; id=&quot;b4e7&quot; class=&quot;graf graf--h3 graf--leading graf--title&quot;&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;a1e1&quot; id=&quot;a1e1&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h3&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 56.3%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*OGdRMytMAm-49cZ-YUlkOg.jpeg&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*OGdRMytMAm-49cZ-YUlkOg.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;blockquote name=&quot;c2b2&quot; id=&quot;c2b2&quot; class=&quot;graf graf--pullquote graf-after--figure&quot;&gt;Life is a Race! If you don’t run fast, someone will crush you and overtake you.&lt;/blockquote&gt;&lt;p name=&quot;3acf&quot; id=&quot;3acf&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;A famous dialogue from one of my most beloved movies of all time, &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;3 Idiots&lt;/strong&gt;&lt;/p&gt;&lt;div name=&quot;bbbf&quot; id=&quot;bbbf&quot; class=&quot;graf graf--mixtapeEmbed graf-after--p&quot;&gt;&lt;a href=&quot;http://www.imdb.com/title/tt1187043/&quot; data-href=&quot;http://www.imdb.com/title/tt1187043/&quot; class=&quot;markup--anchor markup--mixtapeEmbed-anchor&quot; title=&quot;http://www.imdb.com/title/tt1187043/&quot;&gt;&lt;strong class=&quot;markup--strong markup--mixtapeEmbed-strong&quot;&gt;3 Idiots (2009)&lt;/strong&gt;&lt;br&gt;&lt;em class=&quot;markup--em markup--mixtapeEmbed-em&quot;&gt;Directed by Rajkumar Hirani. With Aamir Khan, Madhavan, Mona Singh, Sharman Joshi. Two friends are searching for their…&lt;/em&gt;www.imdb.com&lt;/a&gt;&lt;a href=&quot;http://www.imdb.com/title/tt1187043/&quot; class=&quot;js-mixtapeImage mixtapeImage u-ignoreBlock&quot; data-media-id=&quot;5330f8d0bf3d926aebfebcfda90ff1b9&quot; data-thumbnail-img-id=&quot;0*rBywo5OkZZw10dhC.&quot; style=&quot;background-image: url(https://cdn-images-1.medium.com/fit/c/160/160/0*rBywo5OkZZw10dhC.);&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;p name=&quot;e2f3&quot; id=&quot;e2f3&quot; class=&quot;graf graf--p graf-after--mixtapeEmbed&quot;&gt;It’s a really long article. I invested a lot of time coming up with these points and putting my thoughts to words. Hope you are able to take away some good stuff from this and hope this helps you out !!&lt;/p&gt;&lt;h3 name=&quot;fbb0&quot; id=&quot;fbb0&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Life is NOT a Race&lt;/h3&gt;&lt;p name=&quot;140c&quot; id=&quot;140c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The most important point that we don’t realize is that &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;life in fact is not inherently a race. It is we who make it a race and bring about this feeling of competition. &lt;/strong&gt;Right from the time we were born, we were taught that we need to come first. First in class, first in sports, first in extra curricular activities etc. We are in a constant state of &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;comparison with our peers.&lt;/strong&gt; In this process we actually limit our potential.&lt;/p&gt;&lt;p name=&quot;1bbc&quot; id=&quot;1bbc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let me cite a simple example. Suppose the highest percentage in a class is 85 % and a kid gets say 87 %, his parents will be elated with his performance for the sole reason that came &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;first.&lt;/strong&gt; What we don’t realise is that he probably had the capability to score 90+. And in case the maximum potential for our kid is say 75 % and despite that he gets a 77 %, we tend to scold him. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Why ? &lt;/em&gt;&lt;/strong&gt;because there is a student who performed better than him. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;FREAKING COMPETITION !!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;a087&quot; id=&quot;a087&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We take this sense of competition everywhere we go. People can compete on just about anything. Consider this. There are two families A and B. when family A visits B, B makes about say &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;5 dishes for lunch. &lt;/strong&gt;(And yes, this is in fact counted !!). Now family B happens to visit A in the future and in case A makes lesser number of dishes than what B made, then it is considered to be a sign of disrespect. Trust me, this happens. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Shit like this does happen. :(&lt;/strong&gt;&lt;/p&gt;&lt;blockquote name=&quot;9cc4&quot; id=&quot;9cc4&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;Life is like a car ride from a source to a destination. No matter how fast you go and who accompanies you, you will reach your destination. People will keep getting in and getting off of your car as you continue down your lane. Some people will be driving their cars at a higher speed than you. Do not pay any heed to them because if you happen to beat one person, there will always be another one to beat and in case you become the best (i.e. the fastest in this case), you will always have the insecurity of maintaining your position at the top.&lt;/blockquote&gt;&lt;p name=&quot;3f79&quot; id=&quot;3f79&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;So stop competing with others and instead focus on building your abilities. Focus on building stronger relationships and living life to the fullest because Hey, YOLO !&lt;/p&gt;&lt;h3 name=&quot;9611&quot; id=&quot;9611&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Relationship or Business ?&lt;/h3&gt;&lt;p name=&quot;692e&quot; id=&quot;692e&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;A lot of problems in our lives are there because of a lot of expectations we have from our friends and family members etc. Let me give you a very simple example of how &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;expectations ruin relationships.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;ddcf&quot; id=&quot;ddcf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A very naive example where expectations destroy relationships is a common neighbourhood scenario. We decided to help our neighbours by helping them organising an important family function. Helped them with preparation, invitations and stuff. Roles reversed, the same did not happen. The neighbours were disinterested in helping us out and we develop a grudge against them as we &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;expected them to pay back. Sad but true !&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;0a69&quot; id=&quot;0a69&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;That’s a very big problem in relationships. We give loads of love, but we also expect a lot of that coming back. We expect a lot of stuff from a lot of people and that is where it all goes wrong. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Relationships simply mean give, give and only give. Business means give and take. Its upto you to decide what you consider it to be.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3 name=&quot;225e&quot; id=&quot;225e&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Who is the real us ?&lt;/h3&gt;&lt;p name=&quot;b2c3&quot; id=&quot;b2c3&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;A typical professional’s day appears to be one that has literally been programmed into their memory. He does the same things over and over again, in the same manner, in the same sequence and still knows that what he is doing is probably &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;shitty and is still willing to do that for years at a stretch.&lt;/em&gt;&lt;/strong&gt; The life of a typical IT guy is somewhere on these lines :-&lt;/p&gt;&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;6682&quot; id=&quot;6682&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Get up (Same time everyday).&lt;/li&gt;&lt;li name=&quot;59fa&quot; id=&quot;59fa&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Prepare breakfast (Same old same old. No surprises here :p)&lt;/li&gt;&lt;li name=&quot;7dea&quot; id=&quot;7dea&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Reach office round about 9 a.m. Every single day without a leave.&lt;/li&gt;&lt;li name=&quot;98e3&quot; id=&quot;98e3&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Work your ass off the entire day for 12–13 hours at a stretch. He probably doesn’t even love the work he is doing, but still does it.&lt;/li&gt;&lt;li name=&quot;ad8b&quot; id=&quot;ad8b&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Toady to your manager.&lt;/li&gt;&lt;li name=&quot;e124&quot; id=&quot;e124&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Come home late night exhausted from work.&lt;/li&gt;&lt;li name=&quot;b30d&quot; id=&quot;b30d&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Sleep. Well this was a no brainer !!&lt;/li&gt;&lt;/ol&gt;&lt;blockquote name=&quot;7a63&quot; id=&quot;7a63&quot; class=&quot;graf graf--blockquote graf-after--li&quot;&gt;This seems to be a script fed to a &lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;ROBOT and he executes it every day without any exceptions.&lt;/strong&gt; But who is the real us? The one that we put on when we go to work everyday amidst the pressures of our everyday life, or the one we display when we are jumping around in the rain with our friends?&lt;/blockquote&gt;&lt;p name=&quot;3826&quot; id=&quot;3826&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Pay a small attention to this.Take a break from this monotonous routine and you might be surprised with what you find. You will realize that you have been a part of the wrong race this whole time and that you need to participate in a different race moving forward and in that race you won’t be mediocre any more.&lt;/p&gt;&lt;h3 name=&quot;88b5&quot; id=&quot;88b5&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Empathy&lt;/h3&gt;&lt;p name=&quot;a3fb&quot; id=&quot;a3fb&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;In our day to day lives performing the same laborious mundane tasks over and over again can be extremely overwhelming. So much so that we always try to find an answer to the question&lt;/p&gt;&lt;p name=&quot;2eba&quot; id=&quot;2eba&quot; class=&quot;graf graf--p graf--startsWithDoubleQuote graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;“What’s in it for me ?”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;736c&quot; id=&quot;736c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We always look for opportunities that would benefit us. In the process we even tend to hurt others and if someone is facing a problem or has a contrasting viewpoint, we tend to go all out against them and criticise them for being different. My suggestion ?&lt;/p&gt;&lt;blockquote name=&quot;7684&quot; id=&quot;7684&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;Step in the shoes of the other person and try walking a mile. Be empathetic to them. Try being an altruist. Prove the cynical ideology of people wrong by understanding other’s viewpoints as well and understanding them and at times even accepting them without letting your ego get in the way.&lt;/blockquote&gt;&lt;h3 name=&quot;8707&quot; id=&quot;8707&quot; class=&quot;graf graf--h3 graf-after--blockquote&quot;&gt;Crave for Knowledge and not Money&lt;/h3&gt;&lt;p name=&quot;4fb6&quot; id=&quot;4fb6&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;From what I have seen and form my interactions with my peers, I have found out that 90% of times the reason for happiness or the &lt;em class=&quot;markup--em markup--p-em&quot;&gt;pain in the arse &lt;/em&gt;behaviour or switching a company is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;MONEY.&lt;/strong&gt;&lt;/p&gt;&lt;blockquote name=&quot;8959&quot; id=&quot;8959&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;I’m not being paid enough. I have had a lot of impact.&lt;/blockquote&gt;&lt;blockquote name=&quot;df05&quot; id=&quot;df05&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot;&gt;Had I a strong family business, I would never be a part of this industry.&lt;/blockquote&gt;&lt;blockquote name=&quot;1119&quot; id=&quot;1119&quot; class=&quot;graf graf--blockquote graf--hasDropCapModel graf-after--blockquote&quot;&gt;The only reason I’m into this field is because it pays off.&lt;/blockquote&gt;&lt;p name=&quot;f15d&quot; id=&quot;f15d&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;I’m surprised that no one ever mentions their passion for what they are doing. Never heard someone tell me that money is second nature for them, what’s more important is the quality of work they get. The sought of stuff they work upon day in and day out. Why does it always have to be about money ? Why can’t we instead invest in our skills and crave for knowledge as much as we crave for money and fame ?&lt;/p&gt;&lt;h3 name=&quot;82b5&quot; id=&quot;82b5&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Health is …..&lt;/h3&gt;&lt;p name=&quot;8895&quot; id=&quot;8895&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;For us Software Developers, spending hours at a stretch in front of a computer screen is completely normal. If you work at a startup, the stress levels and the time you spend in front of a screen is even more. Because of this, a lot of us suffer from back pains and stiffness and various other types of maladies.&lt;/p&gt;&lt;p name=&quot;6efa&quot; id=&quot;6efa&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Still, we don’t pay much heed to our health. Health somehow does not become a priority for us. There is always something better to do than exercising or shaping up our body.&lt;/p&gt;&lt;p name=&quot;2ce4&quot; id=&quot;2ce4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;It is only when the Doc tells us &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;“Enough. If you don’t exercise now, you might be bedridden for life !! “ &lt;/strong&gt;do we start to consider this thing called health seriously. I mean if you can’t get off the bed in the morning yourself, how will you work all day long ? Who will take care of you in your old age when things will get even worse ? You will end up spoiling your job, relationships and everything you once loved will flush down the toilet because ? (No points for guessing !!).&lt;/p&gt;&lt;p name=&quot;cff6&quot; id=&quot;cff6&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Health is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;Wealth&lt;/em&gt;&lt;/strong&gt;. Period !!&lt;/p&gt;&lt;h3 name=&quot;da7b&quot; id=&quot;da7b&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Travel&lt;/h3&gt;&lt;p name=&quot;f4e8&quot; id=&quot;f4e8&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;One of my favourite topics. Could write about this for hours and still not get bored. The phrase &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;You only live once. Live life king size &lt;/strong&gt;and the stuff, are boring clichés in today’s time. We have heard this about a thousand times or more in our lives but still we keep living the same monotonous lives. We always think about vacations but somehow this is something that keeps getting postponed.&lt;/p&gt;&lt;p name=&quot;6c57&quot; id=&quot;6c57&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We are never able to gather enough funds and find out a suitable time to escape into paradise (Well that’s really what travel is). I’ve stumbled upon so many blogs and articles here on Medium itself and I can’t emphasise enough the fact that travelling is something that &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;rejuvenates us, rekindles us from the ground up, gives us a new perspective on life, reenergises us, helps you shun off the diffident you and add life to your lifeless life !!&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;f229&quot; id=&quot;f229&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Recently I have been reading about this new kind of job profile for us Software Devs and its known as a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Digital&lt;/strong&gt; &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Nomad. &lt;/strong&gt;A digital nomad is like a normal developer except he does not stay at one place for a long time. Instead, he keeps moving from one place to other like a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;nomad. &lt;/strong&gt;Learning about problems people face, building solutions for them and most of all, travelling a lot.&lt;/p&gt;&lt;p name=&quot;f796&quot; id=&quot;f796&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Sounds fun right ? Do you have what it takes to quit your day job and become a Digital Nomad ?&lt;/p&gt;&lt;h3 name=&quot;b972&quot; id=&quot;b972&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Stop asking “Why me ?”&lt;/h3&gt;&lt;p name=&quot;b123&quot; id=&quot;b123&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Life is a complete roller coaster ride. It almost never proceeds according to our expectations. Life is never what we want it to be. Someday we are elated and on cloud 9 as something happened unexpectedly and someday we are down and feeling as if it is the end of life for us.&lt;/p&gt;&lt;p name=&quot;1dd7&quot; id=&quot;1dd7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;When we are down, and I mean utterly depressed or something, we do tend to ask this one question from God and that is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;“Why me God ? Why ? What have I done to deserve this ?” &lt;/strong&gt;We almost never get an answer to this question and with time our wounds heal (or at least we forget about them). I would urge you to stop obsessing morbidly over this. Let me quote a small excerpt I found on some blog :-&lt;/p&gt;&lt;blockquote name=&quot;6a18&quot; id=&quot;6a18&quot; class=&quot;graf graf--blockquote graf-after--p&quot;&gt;Arthur Ashe, the legendary Wimbledon player was dying of AIDS which he got due to infected blood he received during a heart surgery in 1983.&lt;/blockquote&gt;&lt;blockquote name=&quot;901b&quot; id=&quot;901b&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot;&gt;From the world over, he recieved letters from his fan, one of them conveyed: “Why does God have to select you for such a bad disease?”.&lt;/blockquote&gt;&lt;blockquote name=&quot;0572&quot; id=&quot;0572&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot;&gt;To this Arthur Ashe replied: The world over — 50,000,000 children start playing tennis, 5,000,000 learn to play tennis, 500,000 learn professional tennis, 50,000 come to the circuit, 5000 reach the grand slam, 50 reach the Wimbledon, 4 to semi finals, 2 to finals. When I was the one holding the cup, I never asked god “Why me?”.&lt;/blockquote&gt;&lt;blockquote name=&quot;8fb4&quot; id=&quot;8fb4&quot; class=&quot;graf graf--blockquote graf-after--blockquote&quot;&gt;And today in pain, I should not be asking GOD “why me?”.&lt;/blockquote&gt;&lt;p name=&quot;1fa7&quot; id=&quot;1fa7&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;In case you need motivation to pick yourself up and come out of such situations, read about &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;Nick Vujicic, the man without arms and legs.&lt;/strong&gt;&lt;/p&gt;&lt;figure name=&quot;5fa4&quot; id=&quot;5fa4&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 700px; max-height: 395px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 56.39999999999999%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*LCC2zPeUJJqXcpSWEykmkQ.jpeg&quot; data-width=&quot;784&quot; data-height=&quot;442&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*LCC2zPeUJJqXcpSWEykmkQ.jpeg&quot;&gt;&lt;/div&gt;&lt;figcaption class=&quot;imageCaption&quot;&gt;The man without limbs !!&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 name=&quot;1741&quot; id=&quot;1741&quot; class=&quot;graf graf--h3 graf-after--figure&quot;&gt;Focusing on what you have&lt;/h3&gt;&lt;p name=&quot;ed15&quot; id=&quot;ed15&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Let me tell you a story to put across my point. There are two men. Let’s call them A and B. They meet over coffee one day and apparently, A is upset ovr something. He is really sad. Now B starts to interrogate straight away and asks&lt;/p&gt;&lt;blockquote name=&quot;9bc9&quot; id=&quot;9bc9&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Hey man, Why do you look so upset ? What happened ? Everything okay ?”&lt;/blockquote&gt;&lt;p name=&quot;7490&quot; id=&quot;7490&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;A says that he had an uncle who just passed away. He left him a fortune of Rs 50,000. B is confused. He says&lt;/p&gt;&lt;blockquote name=&quot;e09c&quot; id=&quot;e09c&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“I don’t understand. You should be happy mate. 50,000 is a huge amount.”&lt;/blockquote&gt;&lt;p name=&quot;955e&quot; id=&quot;955e&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;To this A replies&lt;/p&gt;&lt;blockquote name=&quot;16cc&quot; id=&quot;16cc&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“No, you don’t understand. I have another uncle who just passed away leaving behind a fortune of Rs 10,00,000”&lt;/blockquote&gt;&lt;p name=&quot;3d67&quot; id=&quot;3d67&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;On being further confused by what is going on, B asks&lt;/p&gt;&lt;blockquote name=&quot;11f5&quot; id=&quot;11f5&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Dude, shouldn’t you be celebrating. Rs 10,00,000 is a huge fortune. You couldn’t earn that kind of money in a lifetime !!”&lt;/blockquote&gt;&lt;p name=&quot;c094&quot; id=&quot;c094&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;A continues further by saying&lt;/p&gt;&lt;blockquote name=&quot;122a&quot; id=&quot;122a&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“No man. I have yet another uncle who passed away yesterday. :( And he left behind a fortune of Rs 50,00,000”&lt;/blockquote&gt;&lt;p name=&quot;b0f8&quot; id=&quot;b0f8&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Now B is loosing his mind and being completely baffled by what is going on, he bursts out saying&lt;/p&gt;&lt;blockquote name=&quot;ea1f&quot; id=&quot;ea1f&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“Are you out of your freaking mind ? Why so sad when you have so much of inherited money ? Why dude ?”&lt;/blockquote&gt;&lt;p name=&quot;8a89&quot; id=&quot;8a89&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;To this A says&lt;/p&gt;&lt;blockquote name=&quot;d714&quot; id=&quot;d714&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot;&gt;“&lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;Because I have no more uncles left to die !!&lt;/strong&gt;”&lt;/blockquote&gt;&lt;p name=&quot;1e7e&quot; id=&quot;1e7e&quot; class=&quot;graf graf--p graf-after--blockquote graf--trailing&quot;&gt;&lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;The moral here being that if you always focus on what is missing in life, you are bound to be miserable&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;section name=&quot;c190&quot; class=&quot;section section--body section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;56c5&quot; id=&quot;56c5&quot; class=&quot;graf graf--p graf--leading graf--trailing&quot;&gt;If you are patient enough to read upto this point, do show some love by liking and recommending this article !! Cheers :)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>The Startup Rollercoaster</title>
   <link href="http://localhost:4000/2015/10/05/The-startup-rollercoaster-237d78070dcf/"/>
   <updated>2015-10-05T00:00:00-07:00</updated>
   <id>http://localhost:4000/2015/10/05/The-startup-rollercoaster-237d78070dcf</id>
   <content type="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;&lt;title&gt;The startup rollercoaster&lt;/title&gt;&lt;style&gt;
      * {
        font-family: Georgia, Cambria, &quot;Times New Roman&quot;, Times, serif;
      }
      html, body {
        margin: 0;
        padding: 0;
      }
      h1 {
        font-size: 50px;
        margin-bottom: 17px;
        color: #333;
      }
      h2 {
        font-size: 24px;
        line-height: 1.6;
        margin: 30px 0 0 0;
        margin-bottom: 18px;
        margin-top: 33px;
        color: #333;
      }
      h3 {
        font-size: 30px;
        margin: 10px 0 20px 0;
        color: #333;
      }
      header {
        width: 100%;
        margin: auto;
      }
      section {
        width: 100%;
        margin: auto;
      }
      section p {
        margin-bottom: 27px;
        font-size: 20px;
        line-height: 1.6;
        color: #333;
      }
      section img {
        max-width: 100%;
      }
      footer {
        padding: 0 20px;
        margin: 50px 0;
        text-align: center;
        font-size: 12px;
      }
      .aspectRatioPlaceholder {
        max-width: auto !important;
        max-height: auto !important;
      }
      .aspectRatioPlaceholder-fill {
        padding-bottom: 0 !important;
      }
      header,
      section[data-field=subtitle] {
        display: none;
      }
      &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;article class=&quot;h-entry&quot;&gt;
&lt;header&gt;
&lt;h1 class=&quot;p-name&quot;&gt;The startup rollercoaster&lt;/h1&gt;
&lt;/header&gt;
&lt;section data-field=&quot;subtitle&quot; class=&quot;p-summary&quot;&gt;
Startups are interesting. Let me rephrase it. Startups are really interesting. From the small idea you have over beer to prepping demos for…
&lt;/section&gt;
&lt;section data-field=&quot;body&quot; class=&quot;e-content&quot;&gt;
&lt;section name=&quot;128c&quot; class=&quot;section section--body section--first section--last&quot;&gt;&lt;div class=&quot;section-divider&quot;&gt;&lt;hr class=&quot;section-divider&quot;&gt;&lt;/div&gt;&lt;div class=&quot;section-content&quot;&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;h2 name=&quot;4759&quot; id=&quot;4759&quot; data-align=&quot;center&quot; class=&quot;graf graf--h2 graf--leading graf--title&quot;&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--fullWidth&quot;&gt;&lt;figure name=&quot;30fc&quot; id=&quot;30fc&quot; class=&quot;graf graf--figure graf--layoutFillWidth graf-after--h2&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 56.2%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*QReTgszQMZERTObc_SgNCA.png&quot; data-width=&quot;1918&quot; data-height=&quot;1077&quot; src=&quot;https://cdn-images-1.medium.com/max/2000/1*QReTgszQMZERTObc_SgNCA.png&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div class=&quot;section-inner sectionLayout--insetColumn&quot;&gt;&lt;p name=&quot;5993&quot; id=&quot;5993&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;Startups are interesting. Let me rephrase it. Startups are really interesting. From the small idea you have over beer to prepping demos for the product, to pitching the product to investors, to receiving the funds for your product, to seeing your startup getting acclaimed by the investors and clients; It is in fact a &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;roller coaster ride.&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;1d9a&quot; id=&quot;1d9a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I really thought that working for a startup is a risky affair and it is always better to work for a big and well established company. However my perception changed greatly when I joined a startup myself ( not an early stage startup but a very successful one ). Over a period of 3–4 months I realised what is so special about a startup that people cherish. What is it that inspires people to give up big juicy packages and work on an early stage product which might even fail in the market.&lt;/p&gt;&lt;p name=&quot;3aa1&quot; id=&quot;3aa1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For the founders it is obviously an interesting venture as it is their idea, their baby and they want to get their product, their idea in the market as soon as possible. They think they can solve a problem we face on a daily basis and this is what keeps them motivated. As for the people who become a part of the journey later on, I figured out, it is the &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;wealth of knowledge &lt;/strong&gt;that seems very flashy and that is what attracts them. People say that we get to learn so much working in a startup as compared to if we would work for a bigger established firm and this is true IMHO. We get exposed to a vast pool of technologies that we haven’t even heard of while working for a startup and that too in a very short span of time. One of the best perks of working for a startup is &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;experimentation. &lt;/strong&gt;You can experiment a lot with the newer technologies and propose changes to the current architecture as well.&lt;/p&gt;&lt;p name=&quot;531d&quot; id=&quot;531d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I won’t be focussing on the perks of working for a startup. Everybody knows that and that is why most of the graduates today either want to join a startup or start one of their own.&lt;/p&gt;&lt;figure name=&quot;516e&quot; id=&quot;516e&quot; class=&quot;graf graf--figure graf-after--p&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot; style=&quot;max-width: 652px; max-height: 304px;&quot;&gt;&lt;div class=&quot;aspectRatioPlaceholder-fill&quot; style=&quot;padding-bottom: 46.6%;&quot;&gt;&lt;/div&gt;&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*u0Fxo1_zLpxPYsidmBT2Sw.jpeg&quot; data-width=&quot;652&quot; data-height=&quot;304&quot; src=&quot;https://cdn-images-1.medium.com/max/800/1*u0Fxo1_zLpxPYsidmBT2Sw.jpeg&quot;&gt;&lt;/div&gt;&lt;/figure&gt;&lt;blockquote name=&quot;6d04&quot; id=&quot;6d04&quot; class=&quot;graf graf--blockquote graf-after--figure&quot;&gt;Translation :- When the graduates of this country get bored of their 9–5 jobs, they only have 3 ways out IAS, MBA or Startup.&lt;/blockquote&gt;&lt;p name=&quot;5586&quot; id=&quot;5586&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;I guess this is the most apt explanation for the current state of affairs of graduates (at least in India). I just want to focus on one specific problem that I and possibly other people working in a startup might face.&lt;/p&gt;&lt;p name=&quot;6d31&quot; id=&quot;6d31&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;You cannot truly get matured in using a technology unless you don’t fail or rather miserably fail at it. Yes, our mentors can guide us. Yes, our mentors can tell us the best practices to follow. They can tell us how a DB schema should be for specific problems. They can tell us how the architecture can be scaled. They can tell us how the micro services design pattern is a great one. We can try and remember all this stuff, but ultimately it will slip out of our minds.&lt;/p&gt;&lt;p name=&quot;490e&quot; id=&quot;490e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The reason for this is that we can’t really &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;mug &lt;/em&gt;&lt;/strong&gt;up the internals of a technology. We can only get better at stuff with experience. So although getting exposed to too many technologies at once seems to be very flashy and interesting (it is actually ;)) , you can’t really say that you are an expert at it unless you get your hands dirty and that takes time.&lt;/p&gt;&lt;p name=&quot;981c&quot; id=&quot;981c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;What I am suggesting is that instead of trying and exploring each and every small piece of tech being used in your team / squad, just try and focus on the project you currently are working on and the software and technologies involved in it. Just try and explore one technology at a time and the stuff you explore will only come in handy if you are actually using it to build something. It can be a side project or your current project at the company. Then after a certain point of time you can truly claim to be an expert at that technology and that is actually much much better. Don’t try your hands at &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;everything you come across. Stick to one thing at a time !&lt;/strong&gt;&lt;/p&gt;&lt;p name=&quot;d307&quot; id=&quot;d307&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Happy Coding !! :)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;/section&gt;
&lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</content>
 </entry>
 

</feed>
